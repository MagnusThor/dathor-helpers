/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/ExampleApp/Actions/AddToFavoritesAction.js":
/*!*********************************************************!*\
  !*** ./dist/ExampleApp/Actions/AddToFavoritesAction.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// src/UI/Components/Actions/AddToCartAction.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AddToFavoritesAction = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\n/**\n * A component representing an \"Add to Cart\" button.\n * It publishes an event when clicked.\n */\nclass AddToFavoritesAction extends UIComponent_1.UIComponentBase {\n    constructor(properties) {\n        super({\n            ...properties,\n            id: properties.id || `add-to-cart-${properties.movieId}`, // Ensure a unique ID\n            name: properties.name || 'AddToCartAction',\n            template: (component) => {\n                const props = component.properties;\n                const label = props.label || \"Add to Cart\";\n                const buttonClasses = props.buttonClasses || \"bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200\";\n                return /*html*/ `\r\n                    <button class=\"${buttonClasses}\" data-event-click=\"handleAddToCart\">\r\n                        ${label}\r\n                    </button>\r\n                `;\n            },\n            eventHandlers: {\n                click: (event) => {\n                    const target = event.target;\n                    if (target.dataset.eventClick === 'handleAddToCart') {\n                        this.handleAddToCart(event);\n                    }\n                }\n            }\n        });\n        // Set default quantity if not provided\n        if (this.properties.rating === undefined || this.properties.rating === null) {\n            this.properties.rating = 1;\n        }\n    }\n    /**\n     * Handles the click event for the \"Add to Cart\" button.\n     * Publishes an 'addToCart' event via the event bus.\n     */\n    handleAddToCart(event) {\n        event.preventDefault(); // Prevent default button behavior if it's inside a form\n        console.log(`[${this.properties.id}] Adding product ${this.properties.movieId} (Qty: ${this.properties.rating}) to cart.`);\n        // Publish an event that other parts of the application (e.g., a CartService) can listen to\n        this.publish('addToFavorites', {\n            productId: this.properties.movieId,\n            quantity: this.properties.rating\n        });\n    }\n}\nexports.AddToFavoritesAction = AddToFavoritesAction;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Actions/AddToFavoritesAction.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Favorites/FavoritesBadgeComponent.js":
/*!*************************************************************************!*\
  !*** ./dist/ExampleApp/Components/Favorites/FavoritesBadgeComponent.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FavoritesBadgeComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\nclass FavoritesBadgeComponent extends UIComponent_1.UIComponentBase {\n    constructor(properties) {\n        super({\n            ...properties,\n            id: properties.id || \"favorites-badge-component\",\n            name: properties.name || \"FavoriesBadgeComponent\",\n            state: {\n                itemCount: 0, // Initial state: no items\n                isVisible: false, // Not visible initially\n                ...properties.state, // Allow initial state override\n            },\n            template: (component) => {\n                const state = component.getState();\n                if (!state.isVisible || state.itemCount <= 0) {\n                    return /*html*/ `<div id=\"${component.properties.id}\" class=\"hidden\"></div>`;\n                }\n                // Basic badge styling with Tailwind CSS\n                return /*html*/ `\r\n                    <div id=\"${component.properties.id}\" class=\"relative inline-flex items-center justify-center w-6 h-6 text-xs font-bold text-white bg-red-500 border-2 border-white rounded-full -top-2 -right-2\">\r\n                        ${state.itemCount}\r\n                    </div>\r\n                `;\n            },\n        });\n    }\n    /**\n     * Called when the component is first created/entered or becomes active.\n     * This is where we set up event subscriptions.\n     */\n    async onEnter() {\n        await super.onEnter(); // IMPORTANT: Call super.onEnter() first!\n        console.log(`[${this.properties.id}] Subscribing to 'addToFavorites' events.`);\n        // Subscribe to the 'addToCart' event published by AddToCartAction\n        // The handler updates the component's state.\n        this.subscribe(\"addToFavorites\", this.handleEvent.bind(this));\n        // You can also use eventBus.subscribe directly if your base UIComponent doesn't have a subscribe method.\n        // eventBus.subscribe('addToCart', this.handleAddToCartEvent.bind(this));\n    }\n    /**\n     * Called when the component is removed or becomes inactive.\n     * This is where we clean up event subscriptions to prevent memory leaks.\n     */\n    onLeave() {\n        console.log(`[${this.properties.id}] Unsubscribing from 'addToFavorites' events.`);\n        // Unsubscribe from the 'addToCart' event\n        //this.unsubscribe('addToCart', this.handleAddToCartEvent.bind(this));\n    }\n    /**\n     * Event handler for the 'addToCart' event.\n     * @param payload The data sent with the event (e.g., { productId, quantity }).\n     */\n    handleEvent(payload) {\n        console.log(`[${this.properties.id}] Received 'addToFavorites' event for product ${payload.productId}, quantity ${payload.quantity}.`);\n        console.log(`[${this.properties.id}] Received 'addToFavorites' event for product ${payload.productId}, quantity ${payload.quantity}.`);\n        const currentCount = this.getState().itemCount; // Get current state\n        const newCount = currentCount + payload.quantity;\n        this.setState({\n            itemCount: newCount,\n            isVisible: newCount > 0,\n        });\n    }\n}\nexports.FavoritesBadgeComponent = FavoritesBadgeComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Favorites/FavoritesBadgeComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Footer/FooterComponent.js":
/*!**************************************************************!*\
  !*** ./dist/ExampleApp/Components/Footer/FooterComponent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FooterComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\nconst FavoritesBadgeComponent_1 = __webpack_require__(/*! ../Favorites/FavoritesBadgeComponent */ \"./dist/ExampleApp/Components/Favorites/FavoritesBadgeComponent.js\");\nclass FooterComponent extends UIComponent_1.UIComponentBase {\n    constructor(properties) {\n        super({\n            ...properties,\n            id: properties.id || 'app-footer',\n            name: properties.name || 'FooterComponent',\n            template: (component) => /*html*/ `\r\n                <footer id=\"${component.properties.id}\" class=\"bg-gray-800 text-white p-4 mt-8 flex justify-between items-center\">\r\n                    <p>&copy; 2025 Your App. All rights reserved.</p>\r\n                    <div id=\"cart-badge-container\">\r\n                    </div>\r\n         </footer>\r\n            `\n        });\n        const favoriteBadgeComponent = new FavoritesBadgeComponent_1.FavoritesBadgeComponent({ id: \"favorites-badge\" });\n        this.addChild(favoriteBadgeComponent);\n    }\n}\nexports.FooterComponent = FooterComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Footer/FooterComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Header/HeaderComponent.js":
/*!**************************************************************!*\
  !*** ./dist/ExampleApp/Components/Header/HeaderComponent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HeaderComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\nclass HeaderComponent extends UIComponent_1.UIComponentBase {\n    constructor(properties) {\n        super({\n            ...properties,\n            template: (component) => /*html*/ `\r\n                <header class=\"bg-gray-800 text-white p-4 shadow-md\">\r\n                    <nav class=\"container mx-auto flex justify-between items-center\">\r\n                        <a href=\"#/\" class=\"text-2xl font-bold hover:text-blue-300 transition-colors\">My App</a>\r\n                        <div class=\"space-x-4\">\r\n                            <a href=\"#/\" class=\"hover:text-blue-300 transition-colors\">Home</a>\r\n                            <a href=\"#/movies/\" class=\"hover:text-blue-300 transition-colors\">Movies</a>\r\n                            <a href=\"#/search\" class=\"hover:text-blue-300 transition-colors\">Search</a>\r\n                            <a href=\"#/about\" class=\"hover:text-blue-300 transition-colors\">About</a>\r\n                        </div>\r\n                    </nav>\r\n                </header>\r\n            `\n        });\n        console.log(`[${this.properties.id || 'HeaderComponent'}] Initialized.`);\n    }\n}\nexports.HeaderComponent = HeaderComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Header/HeaderComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Movie/MovieCardComponent.js":
/*!****************************************************************!*\
  !*** ./dist/ExampleApp/Components/Movie/MovieCardComponent.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MovieCardComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\nclass MovieCardComponent extends UIComponent_1.UIComponentBase {\n    constructor(properties) {\n        super({\n            ...properties,\n            template: (component) => {\n                const { movie } = component.properties;\n                return /*html*/ `\r\n                    <div class=\"bg-gray-50 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 cursor-pointer\"\r\n                        data-movie-id=\"${movie.id}\"\r\n                        data-action=\"view-detail\">\r\n                        <a href=\"#/movies/${movie.id}\">\r\n                            <img src=\"${movie.poster}\" alt=\"${movie.title} poster\"\r\n                                class=\"w-full h-64 object-cover rounded-t-lg\">\r\n                            <div class=\"p-3\">\r\n                                <h3 class=\"font-bold text-gray-800 truncate\">${movie.title}</h3>\r\n                                <p class=\"text-sm text-gray-500\">${movie.year}</p>\r\n                            </div>\r\n                        </a>\r\n            </div>\r\n                `;\n            },\n            eventHandlers: {\n                click: (event) => {\n                    const target = event.target;\n                    let currentElement = target;\n                    // Traverse up the DOM tree until we find the <li> with data-action or the component's root element\n                    // This ensures we catch clicks on children of the <li>, like img, h3, p.\n                    while (currentElement && currentElement !== this._element) {\n                        if (currentElement.dataset.action === 'view-detail' && currentElement.dataset.movieId) {\n                            event.preventDefault(); // Prevent the <a> tag's default browser navigation\n                            const movieId = parseInt(currentElement.dataset.movieId, 10);\n                            // Navigate using the router instance passed in properties\n                            this.properties.router.navigate(`/movies/${movieId}`);\n                            break;\n                        }\n                        currentElement = currentElement.parentElement;\n                    }\n                }\n            }\n        });\n        console.log(`[${this.properties.id || 'MovieCardComponent'}] Initialized for movie: ${properties.movie.title}`);\n    }\n    async onEnter() {\n        await super.onEnter();\n    }\n}\nexports.MovieCardComponent = MovieCardComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Movie/MovieCardComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Notifications/NotificationComponent.js":
/*!***************************************************************************!*\
  !*** ./dist/ExampleApp/Components/Notifications/NotificationComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// src/components/Notifications/NotificationComponent.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NotificationComponent = void 0;\nconst UIObservedComponent_1 = __webpack_require__(/*! ../../../UI/UIObservedComponent */ \"./dist/UI/UIObservedComponent.js\");\nconst INotificationComponentInterfaces_1 = __webpack_require__(/*! ../../Interfaces/INotificationComponentInterfaces */ \"./dist/ExampleApp/Interfaces/INotificationComponentInterfaces.js\");\nclass NotificationComponent extends UIObservedComponent_1.UIObservedComponent {\n    constructor(properties) {\n        super({\n            ...properties,\n            state: {\n                notifications: [] // Initial state: no notifications\n            },\n            template: (component) => {\n                const { notifications } = component.getState(); // Access current state\n                // Console log for debugging\n                console.log(`[${component.properties.id}] NotificationComponent template: Rendering with notifications:`, notifications);\n                if (notifications.length === 0) {\n                    return `<div id=\"${component.properties.id}-container\" class=\"hidden\"></div>  `; // Render nothing if no notifications\n                }\n                return /*html*/ `\r\n                    <div id=\"${component.properties.id}-container\" class=\"fixed bottom-4 right-4 z-50 space-y-2 w-full max-w-sm\">\r\n                        ${notifications.map((notification) => `\r\n                            <div id=\"notification-${notification.id}\" \r\n                                class=\"p-4 rounded-lg shadow-lg flex items-center justify-between text-white ${NotificationComponent.getNotificationClasses(notification.type)} animate-fade-in-up\"\r\n                                data-notification-id=\"${notification.id}\"\r\n                                data-action=\"dismiss-notification\"\r\n                            >\r\n                                <span>${notification.message}</span>\r\n                                ${notification.dismissible ? `\r\n                                    <button class=\"ml-4 text-white hover:text-gray-200 focus:outline-none\" data-action=\"dismiss-notification\">\r\n                                        &times;\r\n                                    </button>\r\n                                ` : ''}\r\n                            </div>\r\n                        `).join('')}\r\n                    </div>\r\n                `;\n            },\n            eventHandlers: {\n                click: (event) => {\n                    const target = event.target;\n                    const notificationElement = target.closest('[data-notification-id]');\n                    if (notificationElement && target.dataset.action === 'dismiss-notification') {\n                        const notificationId = notificationElement.dataset.notificationId;\n                        if (notificationId) {\n                            this.dismissNotification(notificationId);\n                        }\n                    }\n                }\n            }\n        });\n        console.log(`[${this.properties.id}] NotificationComponent initialized.`);\n        // Subscribe to the global notification event\n        this.subscribe(INotificationComponentInterfaces_1.NOTIFICATION_EVENT_NAME, this.handleNewNotification.bind(this));\n        // this.render();\n    }\n    // Helper to get Tailwind CSS classes based on notification type\n    static getNotificationClasses(type) {\n        switch (type) {\n            case 'success': return 'bg-green-500';\n            case 'error': return 'bg-red-500';\n            case 'info': return 'bg-blue-500';\n            case 'warning': return 'bg-yellow-500';\n            default: return 'bg-gray-700';\n        }\n    }\n    // Method to add a new notification to the state\n    addNotification(notification) {\n        console.log(`[${this.properties.id}] Adding notification:`, notification);\n        this.properties.state.notifications = [\n            ...this.properties.state.notifications, notification\n        ];\n        if (notification.duration && notification.duration > 0) {\n            setTimeout(() => {\n                this.dismissNotification(notification.id);\n            }, notification.duration);\n        }\n    }\n    // Method to remove a notification from the state\n    dismissNotification(id) {\n        console.log(`[${this.properties.id}] Dismissing notification: ${id}`);\n        // Directly mutate the observed state\n        this.properties.state.notifications =\n            this.properties.state.notifications.filter(n => n.id !== id);\n    }\n    // Handler for global notification event\n    handleNewNotification(notificationData) {\n        console.log(`[${this.properties.id}] Received new notification event:`, notificationData);\n        // Add a unique ID if not provided (for list rendering and dismissal)\n        const notificationWithId = {\n            ...notificationData, id: notificationData.id ||\n                crypto.randomUUID()\n        };\n        this.addNotification(notificationWithId);\n    }\n    onLeave() {\n        super.onLeave();\n        // Unsubscribe from events to prevent memory leaks\n        this.unsubscribe(INotificationComponentInterfaces_1.NOTIFICATION_EVENT_NAME, this.handleNewNotification.bind(this), this.properties.id);\n        console.log(`[${this.properties.id}] NotificationComponent unsubscribed from events.`);\n    }\n}\nexports.NotificationComponent = NotificationComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Notifications/NotificationComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Search/SearchContainerComponent.js":
/*!***********************************************************************!*\
  !*** ./dist/ExampleApp/Components/Search/SearchContainerComponent.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SearchContainerComponent = void 0;\nconst ServiceLocator_1 = __webpack_require__(/*! ../../../UI/Service/ServiceLocator */ \"./dist/UI/Service/ServiceLocator.js\");\nconst UIComponent_1 = __webpack_require__(/*! ../../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\nconst SearchInputComponent_1 = __webpack_require__(/*! ./SearchInputComponent */ \"./dist/ExampleApp/Components/Search/SearchInputComponent.js\");\nconst SearchResultCompoent_1 = __webpack_require__(/*! ./SearchResultCompoent */ \"./dist/ExampleApp/Components/Search/SearchResultCompoent.js\");\nclass SearchContainerComponent extends UIComponent_1.UIComponentBase {\n    router;\n    searchInputComponent = null;\n    searchResultsComponent = null;\n    constructor(properties, router) {\n        super({\n            ...properties,\n            state: {},\n            template: (component) => /*html*/ `\r\n                <div id=\"${component.properties.id}\" class=\"search-container-component p-4 bg-white shadow-md rounded-lg\">\r\n                    <div id=\"${component.properties.id}-input-container\" class=\"mb-4\">\r\n                    </div>\r\n                    <div id=\"${component.properties.id}-results-container\">\r\n                    </div>\r\n                </div>\r\n            `\n        });\n        this.router = router;\n        console.log(`[${this.properties.name || this.properties.id}] SearchContainerComponent initialized.`);\n    }\n    async onEnter() {\n        await super.onEnter();\n        console.log(`[${this.properties.id}] SearchContainerComponent onEnter.`);\n        if (!this._element) {\n            console.error(`[${this.properties.id}] Main element not available for child component rendering.`);\n            return;\n        }\n        // Instantiate and render SearchInputComponent\n        if (!this.searchInputComponent) {\n            this.searchInputComponent = new SearchInputComponent_1.SearchInputComponent({\n                id: `${this.properties.id}-input`,\n                name: 'Search Input',\n                onSearch: (term) => this.handleSearch(term)\n            });\n            this.addChild(this.searchInputComponent);\n            const inputContainer = this._element.querySelector(`#${this.properties.id}-input-container`);\n            if (inputContainer) {\n                const renderResult = await this.searchInputComponent.render();\n                if (renderResult.result) {\n                    inputContainer.innerHTML = '';\n                    inputContainer.appendChild(renderResult.result);\n                    await this.searchInputComponent.onEnter();\n                    console.log(`[${this.properties.id}] SearchInputComponent mounted.`);\n                }\n            }\n        }\n        // Instantiate and render SearchResultsComponent\n        if (!this.searchResultsComponent) {\n            this.searchResultsComponent = new SearchResultCompoent_1.SearchResultsComponent({\n                id: `${this.properties.id}-results`,\n                name: 'Search Results'\n            });\n            this.addChild(this.searchResultsComponent);\n            const resultsContainer = this._element.querySelector(`#${this.properties.id}-results-container`);\n            if (resultsContainer) {\n                const renderResult = await this.searchResultsComponent.render();\n                if (renderResult.result) {\n                    resultsContainer.innerHTML = '';\n                    resultsContainer.appendChild(renderResult.result);\n                    await this.searchResultsComponent.onEnter();\n                    console.log(`[${this.properties.id}] SearchResultsComponent mounted.`);\n                }\n            }\n        }\n    }\n    onLeave() {\n        super.onLeave();\n        console.log(`[${this.properties.id}] SearchContainerComponent onLeave.`);\n    }\n    async handleSearch(query) {\n        if (query.length > 2 && query != \"\") {\n            const movieApiService = ServiceLocator_1.serviceLocator.get(\"MovieApiService\");\n            this.searchResultsComponent?.setState({\n                results: await movieApiService.searchMovies(query)\n            });\n        }\n        else {\n            this.searchResultsComponent?.setState({\n                results: []\n            });\n        }\n    }\n}\nexports.SearchContainerComponent = SearchContainerComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Search/SearchContainerComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Search/SearchInputComponent.js":
/*!*******************************************************************!*\
  !*** ./dist/ExampleApp/Components/Search/SearchInputComponent.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// src/components/Search/SearchInputComponent.ts\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SearchInputComponent = void 0;\nconst all_1 = __importDefault(__webpack_require__(/*! ../../../helpers/all */ \"./dist/helpers/all.js\"));\nconst UIComponent_1 = __webpack_require__(/*! ../../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\nclass SearchInputComponent extends UIComponent_1.UIComponentBase {\n    searchTimeout = null;\n    debounceTime;\n    constructor(properties) {\n        super({\n            ...properties,\n            state: {\n                currentInputValue: properties.initialValue || '',\n            },\n            template: (component) => {\n                const state = component.getState();\n                return /*html*/ `\r\n                    <div class=\"flex space-x-2\">\r\n                        <input\r\n                            type=\"search\"\r\n                            placeholder=\"Search movies...\"\r\n                            class=\"flex-grow p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                            value=\"${state.currentInputValue}\"\r\n                            data-action=\"input-search-term\"\r\n                        />\r\n                        <button\r\n                            class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200\"\r\n                            data-action=\"perform-search\"\r\n                        >\r\n                            Search\r\n                        </button>\r\n                    </div>\r\n                `;\n            },\n            eventHandlers: {\n                input: (event) => {\n                    const target = event.target;\n                    if (target.dataset.action === 'input-search-term') {\n                        this.handleInputChange(target.value);\n                    }\n                },\n                click: (event) => {\n                    const target = event.target;\n                    if (target.dataset.action === 'perform-search') {\n                        const query = all_1.default.get(\"input\", this._element).value;\n                        this.triggerSearch(query || \"\");\n                    }\n                },\n                keydown: (event) => {\n                    const keyboardEvent = event;\n                    const target = event.target;\n                    if (target.dataset.action === 'input-search-term' && keyboardEvent.key === 'Enter') {\n                        this.triggerSearch(target.value);\n                    }\n                }\n            }\n        });\n        this.debounceTime = properties.debounceTime ?? 500; // Default debounce to 500ms\n        console.log(`[${this.properties.name || this.properties.id}] SearchInputComponent initialized.`);\n    }\n    onLeave() {\n        super.onLeave();\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n            this.searchTimeout = null;\n        }\n    }\n    handleInputChange(value) {\n        // Debounce actual search trigger if onSearch is meant for live updates\n        if (this.debounceTime > 0) {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n            this.searchTimeout = window.setTimeout(() => {\n                // Trigger search if value length is > 2 characters OR if it's empty\n                if (value.trim().length > 2 || value.trim().length === 0) {\n                    console.log(`[${this.properties.id}] Debounced search triggered for: '${value}'`);\n                    this.triggerSearch(value);\n                }\n                else {\n                    console.log(`[${this.properties.id}] Debounced search skipped (length <= 2 and not empty). Current value: '${value}'`);\n                }\n                this.searchTimeout = null;\n            }, this.debounceTime);\n        }\n        else {\n            // If no debounce, trigger search immediately (e.g., for debounceTime = 0)\n            if (value.trim().length > 2 || value.trim().length === 0) {\n                console.log(`[${this.properties.id}] Immediate search triggered for: '${value}'`);\n                this.triggerSearch(value);\n            }\n        }\n    }\n    triggerSearch(value) {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n            this.searchTimeout = null;\n        }\n        this.properties.onSearch(value);\n    }\n}\nexports.SearchInputComponent = SearchInputComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Search/SearchInputComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Components/Search/SearchResultCompoent.js":
/*!*******************************************************************!*\
  !*** ./dist/ExampleApp/Components/Search/SearchResultCompoent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// src/components/Search/SearchResultsComponent.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SearchResultsComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../../UI/UIComponent */ \"./dist/UI/UIComponent.js\");\nclass SearchResultsComponent extends UIComponent_1.UIComponentBase {\n    constructor(properties) {\n        super({\n            ...properties,\n            state: { results: [], isLoading: false, error: null, searchTerm: '' },\n            template: (component) => {\n                const { results, isLoading, error } = component.getState(); // Get data from properties state\n                if (isLoading) {\n                    return /*html*/ `<div class=\"text-center py-4\"><div class=\"animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900 inline-block\"></div> Loading...</div>`;\n                }\n                if (error) {\n                    return /*html*/ `<div class=\"text-center py-4 text-red-600\">${error}</div>`;\n                }\n                if (results.length === 0 && !isLoading && !error) {\n                    return /*html*/ `<div class=\"text-center py-4 text-gray-500\">No results to display. Try searching!</div>`;\n                }\n                if (results.length > 0) {\n                    return /*html*/ `\r\n                        <ul class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4\">\r\n                            ${results.map(result => `\r\n                                <li class=\"bg-gray-50 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 cursor-pointer\" \r\n                                    data-movie-id=\"${result.id}\">\r\n                                    <a href=\"#/movies/${result.id}\">\r\n                                    <img src=\"${result.poster}\" alt=\"${result.title} poster\" \r\n                                    class=\"w-full h-48 object-cover rounded-t-lg\">\r\n                                    <div class=\"p-3\">\r\n                                        <h3 class=\"font-bold text-gray-800 truncate\">${result.title}</h3>\r\n                                        <p class=\"text-sm text-gray-500\">${result.year}</p>\r\n                                    </div>\r\n                                </li>\r\n                            `).join('')}\r\n                        </ul>\r\n                    `;\n                }\n                return '';\n            },\n            eventHandlers: {}\n        });\n        console.log(`[${this.properties.name || this.properties.id}] SearchResultsComponent initialized.`);\n    }\n}\nexports.SearchResultsComponent = SearchResultsComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Components/Search/SearchResultCompoent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Interfaces/INotificationComponentInterfaces.js":
/*!************************************************************************!*\
  !*** ./dist/ExampleApp/Interfaces/INotificationComponentInterfaces.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// src/components/Interfaces/INotificationComponentInterfaces.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NOTIFICATION_EVENT_NAME = void 0;\n// Define an event name for the NotificationService\nexports.NOTIFICATION_EVENT_NAME = 'newNotification';\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Interfaces/INotificationComponentInterfaces.js?");

/***/ }),

/***/ "./dist/ExampleApp/MyApp.js":
/*!**********************************!*\
  !*** ./dist/ExampleApp/MyApp.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MyApp = void 0;\nconst ApplicationManager_1 = __webpack_require__(/*! ../UI/Application/ApplicationManager */ \"./dist/UI/Application/ApplicationManager.js\");\nconst EventBus_1 = __webpack_require__(/*! ../UI/Application/EventBus */ \"./dist/UI/Application/EventBus.js\");\nconst RootUIComponent_1 = __webpack_require__(/*! ../UI/Component/Core/RootUIComponent */ \"./dist/UI/Component/Core/RootUIComponent.js\");\nconst Router_1 = __webpack_require__(/*! ../UI/Router/Router */ \"./dist/UI/Router/Router.js\");\nconst ServiceLocator_1 = __webpack_require__(/*! ../UI/Service/ServiceLocator */ \"./dist/UI/Service/ServiceLocator.js\");\nconst FooterComponent_1 = __webpack_require__(/*! ./Components/Footer/FooterComponent */ \"./dist/ExampleApp/Components/Footer/FooterComponent.js\");\nconst HomePageComponent_1 = __webpack_require__(/*! ./Pages/HomePageComponent */ \"./dist/ExampleApp/Pages/HomePageComponent.js\");\nconst MovieDetailComponent_1 = __webpack_require__(/*! ./Pages/MovieDetailComponent */ \"./dist/ExampleApp/Pages/MovieDetailComponent.js\");\nconst NotificationComponent_1 = __webpack_require__(/*! ./Components/Notifications/NotificationComponent */ \"./dist/ExampleApp/Components/Notifications/NotificationComponent.js\");\nconst MovieService_1 = __webpack_require__(/*! ./Services/MovieService */ \"./dist/ExampleApp/Services/MovieService.js\");\nconst NotificationService_1 = __webpack_require__(/*! ./Services/NotificationService */ \"./dist/ExampleApp/Services/NotificationService.js\");\nconst MovieListComponent_1 = __webpack_require__(/*! ./Pages/MovieListComponent */ \"./dist/ExampleApp/Pages/MovieListComponent.js\");\nconst HeaderComponent_1 = __webpack_require__(/*! ./Components/Header/HeaderComponent */ \"./dist/ExampleApp/Components/Header/HeaderComponent.js\");\nfunction bootstrapServices() {\n    const movieApiService = new MovieService_1.MovieApiService();\n    const eventBusInstance = EventBus_1.EventBus.getInstance();\n    const notificationService = new NotificationService_1.NotificationService();\n    ServiceLocator_1.serviceLocator.register(\"MovieApiService\", movieApiService);\n    ServiceLocator_1.serviceLocator.register(\"EventBus\", eventBusInstance);\n    ServiceLocator_1.serviceLocator.register(\"NotificationService\", notificationService);\n    console.log('All core services bootstrapped and registered.');\n}\nclass MyApp {\n    appManager;\n    router;\n    constructor() {\n        bootstrapServices();\n        const appRoutes = [\n            {\n                path: '/',\n                component: HomePageComponent_1.HomePageComponent,\n                defaultProps: { id: 'home-page', path: '/', router: null }\n            },\n            {\n                path: '/movies/:id',\n                component: MovieDetailComponent_1.MovieDetailComponent,\n                defaultProps: { id: 'movies-detail-page', path: '/movies/:id', router: null }\n            },\n            {\n                path: \"/movies/\",\n                component: MovieListComponent_1.MovieListComponent,\n                defaultProps: { id: \"movie-list-page\", path: \"/movies/\", router: null }\n            }\n        ];\n        this.router = new Router_1.Router(appRoutes, '#main-content');\n        ServiceLocator_1.serviceLocator.register('Router', this.router);\n        appRoutes.forEach(route => {\n            if (route.defaultProps) {\n                route.defaultProps.router = this.router;\n            }\n            else {\n                route.defaultProps = { router: this.router, id: 'auto-id-' + Math.random().toString(36).substring(2, 9), path: route.path };\n            }\n        });\n        const appRootComponent = new RootUIComponent_1.RootUIComponent({ id: 'app-root' });\n        const notificationComponent = new NotificationComponent_1.NotificationComponent({\n            id: 'global-notifications',\n            name: \"notification-component\",\n            targetSelector: \"#notifications-container\"\n        });\n        appRootComponent.addChild(notificationComponent);\n        appRootComponent.addChild(new HeaderComponent_1.HeaderComponent({\n            id: `app-root-header`,\n            targetSelector: `#app-root-header-container`,\n            router: this.router\n        }));\n        // Add FooterComponent as a child\n        appRootComponent.addChild(new FooterComponent_1.FooterComponent({\n            id: `app-root-footer`,\n            targetSelector: `#app-root-footer-container`\n        }));\n        this.appManager = new ApplicationManager_1.ApplicationManager(appRootComponent, this.router, 'body');\n    }\n    /**\n     * Runs the application by starting the ApplicationManager.\n     * The ApplicationManager will handle rendering the root component and starting the router.\n     */\n    async run() {\n        await this.appManager.start();\n        console.log(\"Application is fully started.\");\n    }\n}\nexports.MyApp = MyApp;\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n    console.log(\"DOM Content Loaded. Initializing MyApp...\");\n    const app = new MyApp();\n    await app.run();\n});\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/MyApp.js?");

/***/ }),

/***/ "./dist/ExampleApp/Pages/HomePageComponent.js":
/*!****************************************************!*\
  !*** ./dist/ExampleApp/Pages/HomePageComponent.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HomePageComponent = void 0;\nconst PageComponent_1 = __webpack_require__(/*! ../../UI/Component/Core/PageComponent */ \"./dist/UI/Component/Core/PageComponent.js\");\nconst ServiceLocator_1 = __webpack_require__(/*! ../../UI/Service/ServiceLocator */ \"./dist/UI/Service/ServiceLocator.js\");\nconst INotificationComponentInterfaces_1 = __webpack_require__(/*! ../Interfaces/INotificationComponentInterfaces */ \"./dist/ExampleApp/Interfaces/INotificationComponentInterfaces.js\");\nconst SearchContainerComponent_1 = __webpack_require__(/*! ../Components/Search/SearchContainerComponent */ \"./dist/ExampleApp/Components/Search/SearchContainerComponent.js\");\nclass HomePageComponent extends PageComponent_1.PageComponent {\n    searchContainerComponent = null;\n    constructor(properties) {\n        super({\n            ...properties,\n            template: (component) => {\n                const state = component.getState();\n                return `\r\n                    <div id=\"${component.properties.id}\" class=\"home-page p-6 bg-white shadow rounded-lg mb-6\">\r\n                        <h1 class=\"text-3xl font-bold text-gray-900 mb-4\">${state.welcomeMessage}</h1>\r\n                        <p class=\"text-gray-700 mb-4\">\r\n                            Welcome to your single-page application built with a custom framework!\r\n                            This is the home page.\r\n                        </p>\r\n                        \r\n                      \r\n\r\n                        <p class=\"text-gray-700 mb-4\">\r\n                            You have clicked the button <span class=\"font-bold text-blue-600\">${state.clickCount}</span> times.\r\n                        </p>\r\n                        <button class=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200\"\r\n                                data-event-click=\"handleClick\">\r\n                            Click Me!\r\n                        </button>\r\n                    \r\n                        \r\n\r\n                         <button class=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200\"\r\n                                data-event-click=\"sendNotification\">\r\n                            Send message\r\n                        </button>\r\n                       \r\n\r\n                        <div class=\"mt-8\">\r\n                            <h2 class=\"text-xl font-semibold mb-3 text-gray-800\">Explore Further:</h2>\r\n                            <ul class=\"list-disc list-inside text-blue-600 space-y-2\">\r\n                                <li>\r\n                                    <a href=\"#/movies/123\" class=\"hover:underline\">Go to Movie 123 (via hash link)</a>\r\n                                </li>\r\n                                <li>\r\n                                    <button class=\"text-blue-600 hover:underline cursor-pointer focus:outline-none\" \r\n                                            data-event-click=\"goToMoviePage\">\r\n                                        Go to Movie 100 (programmatic)\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#/about\" class=\"hover:underline\">Go to About Us (will show 404 if not defined)</a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                          <div id=\"movie-search-container\" class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\r\n                            </div>\r\n                    </div>\r\n                `;\n            },\n            state: {\n                welcomeMessage: properties.state?.welcomeMessage || \"Imdb Favorites Example App!\",\n                clickCount: properties.state?.clickCount || 0\n            },\n            eventHandlers: {\n                click: (event) => {\n                    const target = event.target;\n                    if (target.dataset.eventClick === 'handleClick') {\n                        this.handleClick(event);\n                    }\n                    else if (target.dataset.eventClick === 'goToMoviePage') {\n                        this.goToMoviePage(event);\n                    }\n                    else if (target.dataset.eventClick === \"sendNotification\") {\n                        this.sendNotication(event);\n                    }\n                }\n            }\n        });\n        console.log(`[${this.properties.name || this.properties.id}] HomePageComponent initialized.`);\n    }\n    handleClick(event) {\n        console.log('Home Page Button clicked!', event);\n        this.setState({ clickCount: (this.getState().clickCount || 0) + 1 });\n    }\n    sendNotication(event) {\n        const messageTypes = ['info', 'success', 'warning', 'error'];\n        const randomType = messageTypes[Math.floor(Math.random() * messageTypes.length)];\n        const notification = {\n            id: crypto.randomUUID(),\n            message: `This is a message - ${Date.now().toString()}`,\n            type: randomType,\n            dismissible: true,\n            duration: 5000\n        };\n        this.eventBus.publish(INotificationComponentInterfaces_1.NOTIFICATION_EVENT_NAME, notification);\n    }\n    goToMoviePage(event) {\n        event.preventDefault();\n        console.log('Navigating programmatically to Movies 100...');\n        this.properties.router.navigate('/movies/100');\n    }\n    async onEnter(prevProps) {\n        await super.onEnter(prevProps);\n        console.log(`[HomePageComponent] onEnter: current path is ${this.properties.path}`);\n        if (!this.searchContainerComponent) {\n            const movieApiService = ServiceLocator_1.serviceLocator.get(\"MovieApiService\");\n            const router = ServiceLocator_1.serviceLocator.get('Router');\n            this.searchContainerComponent = new SearchContainerComponent_1.SearchContainerComponent({\n                id: `${this.properties.id}-search-container`,\n                name: 'Movie Search Container',\n            }, router);\n            this.addChild(this.searchContainerComponent);\n        }\n        if (this._element) {\n            const container = this._element.querySelector('#movie-search-container');\n            if (container) {\n                const renderResult = await this.searchContainerComponent.render();\n                if (renderResult.result) {\n                    container.innerHTML = '';\n                    container.appendChild(renderResult.result);\n                    await this.searchContainerComponent.onEnter();\n                    console.log(`[${this.properties.id}] SearchContainerComponent mounted.`);\n                }\n            }\n            else {\n                console.error(`[${this.properties.id}] #movie-search-container not found in template.`);\n            }\n        }\n    }\n    onLeave() {\n        super.onLeave();\n        console.log(`[HomePageComponent] onLeave: path was ${this.properties.path}`);\n    }\n}\nexports.HomePageComponent = HomePageComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Pages/HomePageComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Pages/MovieDetailComponent.js":
/*!*******************************************************!*\
  !*** ./dist/ExampleApp/Pages/MovieDetailComponent.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MovieDetailComponent = void 0;\nconst PageComponent_1 = __webpack_require__(/*! ../../UI/Component/Core/PageComponent */ \"./dist/UI/Component/Core/PageComponent.js\");\nconst AddToFavoritesAction_1 = __webpack_require__(/*! ../Actions/AddToFavoritesAction */ \"./dist/ExampleApp/Actions/AddToFavoritesAction.js\");\nconst ServiceLocator_1 = __webpack_require__(/*! ../../UI/Service/ServiceLocator */ \"./dist/UI/Service/ServiceLocator.js\");\nclass MovieDetailComponent extends PageComponent_1.PageComponent {\n    // Declare a private property to hold the instance of the AddToCartAction component\n    _addToCartComponent = null;\n    constructor(properties) {\n        super({\n            ...properties, // Inherit base properties like id, path, router, routeParams\n            // Provide the template function directly in properties\n            template: (component) => {\n                // Safely access state properties using non-null assertion as state is initialized\n                const { movieId: movieId, title: title, plot: plot, year: year, loading, error } = component.properties.state;\n                const router = component.properties.router;\n                if (loading) {\n                    return /*html*/ `\r\n                        <div class=\"product-detail-page p-6 bg-white shadow rounded-lg text-center\">\r\n                            <p class=\"text-gray-600 text-lg\">Loading product details for ID: ${movieId}...</p>\r\n                            <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mt-4\"></div>\r\n                        </div>\r\n                    `;\n                }\n                if (error) {\n                    return /*html*/ `\r\n                        <div class=\"product-detail-page p-6 bg-white shadow rounded-lg text-center text-red-600\">\r\n                            <h1 class=\"text-2xl font-bold mb-4\">Error Loading Product</h1>\r\n                            <p>${error}</p>\r\n                            <button class=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200\"\r\n                                    data-event-click=\"goBack\">\r\n                                Go Back\r\n                            </button>\r\n                        </div>\r\n                    `;\n                }\n                if (!movieId) {\n                    return /*html*/ `\r\n                        <div class=\"product-detail-page p-6 bg-white shadow rounded-lg text-center\">\r\n                            <h1 class=\"text-2xl font-bold text-gray-900 mb-4\">Movie Not Found</h1>\r\n                            <p class=\"text-gray-700\">No ID was provided or found in the URL.</p>\r\n                            <button class=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200\"\r\n                                    data-event-click=\"goBack\">\r\n                                Go Back\r\n                            </button>\r\n                        </div>\r\n                    `;\n                }\n                return /*html*/ `\r\n                    <div id=\"${component.properties.id}\" class=\"product-detail-page p-6 bg-white shadow rounded-lg mb-6\">\r\n                        <h1 class=\"text-3xl font-bold text-gray-900 mb-4\">Product Details for ID: ${movieId}</h1>\r\n                        <h2 class=\"text-2xl font-semibold text-gray-800 mb-2\">${title}</h2>\r\n                        <p class=\"text-gray-700 mb-4\">${plot}</p>\r\n\r\n                        <div id=\"add-to-cart-container-${movieId}\" class=\"my-6\">\r\n                            </div>\r\n                        \r\n                        <button class=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded transition-colors duration-200\"\r\n                                data-event-click=\"goBack\">\r\n                            Go Back\r\n                        </button>\r\n                    </div>\r\n                `;\n            },\n            state: {\n                movieId: null,\n                title: '',\n                plot: '',\n                loading: true, // Start in a loading state\n                error: undefined\n            }, // Assert initial state type\n            // Define event handlers for elements within this component's template\n            eventHandlers: {\n                click: (event) => {\n                    const target = event.target;\n                    if (target.dataset.eventClick === 'goBack') {\n                        this.goBack();\n                    }\n                }\n            }\n        });\n    }\n    // Lifecycle method called when the page component is entered\n    async onEnter(prevProps) {\n        await super.onEnter(prevProps); // Call base class onEnter\n        console.log(`[MovieDetailComponent] onEnter: current path is ${this.properties?.path}`);\n        const movieId = this.properties.routeParams.id || null;\n        console.log(`[MovieDetailComponent] Product ID from URL parameters: ${movieId}`);\n        this.updateState({ movieId: movieId, loading: true, error: undefined });\n        if (movieId) {\n            try {\n                const movieData = await this.fetchMovieData(movieId);\n                this.updateState({\n                    title: movieData.title,\n                    plot: movieData.plot,\n                    loading: false,\n                    error: undefined\n                });\n                this.createAddToCartComponent(movieId);\n            }\n            catch (err) {\n                console.error(\"Failed to fetch product data:\", err);\n                this.updateState({\n                    error: `Could not load product with ID: ${movieId}. ${err instanceof Error ? err.message : String(err)}`,\n                    loading: false\n                });\n            }\n        }\n        else {\n            this.updateState({ loading: false, error: \"No product ID found in URL for details.\" });\n        }\n    }\n    // Lifecycle method called when the page component is left\n    onLeave() {\n        super.onLeave();\n        console.log(`[MovieDetailComponent] onLeave: path was ${this.properties?.path}`);\n        // --- CRITICAL STEP: Dispose of the child component when the parent leaves ---\n        if (this._addToCartComponent) {\n            this._addToCartComponent.dispose();\n            this._addToCartComponent = null; // Clear reference\n        }\n    }\n    async fetchMovieData(id) {\n        return new Promise(async (resolve, reject) => {\n            setTimeout(async () => {\n                const service = ServiceLocator_1.serviceLocator.get(\"MovieApiService\");\n                const movieDetails = await service.getMovieDetails(id);\n                if (movieDetails === null) {\n                    reject(new Error(`Movie with ID ${id} not found.`));\n                }\n                else {\n                    resolve(movieDetails);\n                }\n            }, 700); // 700ms delay\n        });\n    }\n    /**\n     * Creates, adds, and renders the AddToCartAction component.\n     * @param id The ID of the product to associate with the AddToCart button.\n     */\n    async createAddToCartComponent(id) {\n        // Ensure the main component's element exists and is rendered\n        if (!this._element) {\n            console.error(`[MovieDetailComponent] Cannot create AddToCartAction: Main component element not found.`);\n            return;\n        }\n        // Find the specific container div within this component's rendered HTML\n        const containerElement = this._element.querySelector(`#add-to-cart-container-${id}`);\n        if (containerElement) {\n            // Dispose of any existing AddToCartComponent instance if this is a re-render\n            if (this._addToCartComponent) {\n                this._addToCartComponent.dispose();\n            }\n            this._addToCartComponent = new AddToFavoritesAction_1.AddToFavoritesAction({\n                id: `add-to-favorites-button-${id}`, // Unique ID for the button instance\n                movieId: id,\n                rating: 1, // Default quantity\n                label: `Add ${id} to Favorites`,\n                componentInstance: this // Pass current component for context in event handlers\n            });\n            // Add the AddToCartAction as a child component of MovieDetailComponent.\n            // This ensures it benefits from the parent's lifecycle management (e.g., disposal).\n            this.addChild(this._addToCartComponent);\n            // Render the AddToCartAction component and append its result to the container\n            const renderResult = await this._addToCartComponent.render();\n            if (renderResult.result) {\n                // Clear the container before appending, just in case\n                containerElement.innerHTML = '';\n                containerElement.appendChild(renderResult.result);\n                console.log(`[MovieDetailComponent] AddToCartAction component mounted for product ${id}.`);\n            }\n            else {\n                console.warn(`[MovieDetailComponent] AddToCartAction render resulted in no element.`);\n            }\n        }\n        else {\n            console.error(`[MovieDetailComponent] Container #add-to-cart-container-${id} not found for AddToCartAction.`);\n        }\n    }\n    // Method to navigate back using the router\n    goBack() {\n        this.properties.router.goBack(); // Assumes your Router class has a `goBack` method\n    }\n}\nexports.MovieDetailComponent = MovieDetailComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Pages/MovieDetailComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/Pages/MovieListComponent.js":
/*!*****************************************************!*\
  !*** ./dist/ExampleApp/Pages/MovieListComponent.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MovieListComponent = void 0;\nconst PageComponent_1 = __webpack_require__(/*! ../../UI/Component/Core/PageComponent */ \"./dist/UI/Component/Core/PageComponent.js\");\nconst RepeaterComponent_1 = __webpack_require__(/*! ../../UI/Component/Core/RepeaterComponent */ \"./dist/UI/Component/Core/RepeaterComponent.js\");\nconst ServiceLocator_1 = __webpack_require__(/*! ../../UI/Service/ServiceLocator */ \"./dist/UI/Service/ServiceLocator.js\");\nconst MovieCardComponent_1 = __webpack_require__(/*! ../Components/Movie/MovieCardComponent */ \"./dist/ExampleApp/Components/Movie/MovieCardComponent.js\");\nconst Templates_1 = __webpack_require__(/*! ../Templates/Templates */ \"./dist/ExampleApp/Templates/Templates.js\");\nclass MovieListComponent extends PageComponent_1.PageComponent {\n    router;\n    movieService;\n    repeaterComponent = null;\n    constructor(properties) {\n        super({\n            ...properties,\n            state: {\n                loading: false,\n                error: undefined,\n                movies: []\n            },\n            template: (component) => {\n                const { loading, error } = component.getState();\n                const pageTitle = \"Movie List\";\n                return `\r\n                    <div id=\"${component.properties.id}-container\" class=\"movie-list-page p-4\">\r\n                        <h1 class=\"text-3xl font-bold text-gray-800 mb-6\">${pageTitle}</h1>\r\n\r\n                        ${loading ? (0, Templates_1.pageLoading)(\"Movie page loading...\") : ''}\r\n                        ${error ? (0, Templates_1.pageErrorMessage)(component.properties, error) : ''}\r\n\r\n                        <div id=\"${component.properties.id}-repeater-container\"></div>\r\n\r\n                        ${!loading && !error && component.getState().movies.length === 0 ? /*html*/ `\r\n                            <div class=\"text-center py-8 text-gray-600\">\r\n                                <p>No movies found.</p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\n            }\n        });\n        this.router = ServiceLocator_1.serviceLocator.get(\"Router\");\n        this.movieService = ServiceLocator_1.serviceLocator.get(\"MovieApiService\");\n        console.log(`[${this.properties.id}] MovieListComponent initialized.`);\n    }\n    async onEnter() {\n        await super.onEnter();\n        console.log(`[${this.properties.id}] MovieListComponent onEnter: Fetching movies...`);\n        await this.fetchAndRenderMovies();\n    }\n    /**\n     * Fetches movies and then triggers the rendering of the RepeaterComponent.\n     */\n    async fetchAndRenderMovies() {\n        try {\n            const allMovies = await this.movieService.all();\n            this.setState({ movies: allMovies, loading: false });\n            console.log(`[${this.properties.id}] Movies fetched successfully:`, allMovies);\n            this.renderRepeaterComponent(allMovies);\n        }\n        catch (error) {\n            console.error(`[${this.properties.id}] Error fetching movies:`, error);\n            this.disposeRepeaterComponent();\n        }\n    }\n    /**\n     * This is the crucial renderer function passed to the RepeaterComponent.\n     * It defines how each individual IMovie item should be turned into a UIComponent.\n     */\n    movieItemRenderer = async (movie, containerElement, componentId, context) => {\n        const movieCardComponent = new MovieCardComponent_1.MovieCardComponent({\n            id: componentId,\n            movie: movie,\n            router: context.router\n        });\n        const { result } = await movieCardComponent.render();\n        if (result) {\n            containerElement.appendChild(result);\n            return movieCardComponent;\n        }\n        else {\n            console.error(`[${this.properties.id}] Failed to render MovieCardComponent for movie ${movie.id}.`);\n            return null;\n        }\n    };\n    /**\n     * Instantiates and renders the RepeaterComponent into its designated container.\n     */\n    renderRepeaterComponent(movies) {\n        this.disposeRepeaterComponent();\n        const repeaterContainerElement = this._element?.querySelector(`#${this.properties.id}-repeater-container`);\n        if (repeaterContainerElement) {\n            this.repeaterComponent = new RepeaterComponent_1.RepeaterComponent({\n                id: `${this.properties.id}-repeater`,\n                items: movies,\n                itemComponentRenderer: this.movieItemRenderer,\n                uniqueIdField: 'id',\n                cssClasses: 'grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4',\n                itemContainerTag: 'div',\n                context: { router: this.router }\n            });\n            this.repeaterComponent.render().then(({ result }) => {\n                if (result) {\n                    repeaterContainerElement.appendChild(result);\n                    this.repeaterComponent?.onEnter();\n                }\n                else {\n                    console.error(`[${this.properties.id}] Failed to render RepeaterComponent.`);\n                }\n            });\n        }\n    }\n    /**\n     * Disposes of the RepeaterComponent instance and clears its reference.\n     */\n    disposeRepeaterComponent() {\n        if (this.repeaterComponent) {\n            this.repeaterComponent.dispose();\n            this.repeaterComponent = null;\n        }\n    }\n    /**\n     * Overrides the PageComponent's onLeave to ensure proper cleanup of the repeater.\n     */\n    onLeave() {\n        super.onLeave();\n        this.disposeRepeaterComponent();\n        console.log(`[${this.properties.id}] MovieListComponent left, repeater disposed.`);\n    }\n}\nexports.MovieListComponent = MovieListComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Pages/MovieListComponent.js?");

/***/ }),

/***/ "./dist/ExampleApp/SeedMovies.js":
/*!***************************************!*\
  !*** ./dist/ExampleApp/SeedMovies.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.globalSeededMovies = exports.SeedMovies = void 0;\nconst unique_names_generator_1 = __webpack_require__(/*! unique-names-generator */ \"./node_modules/unique-names-generator/dist/index.m.js\");\nclass SeedMovies {\n    static seed(numberOfMovies) {\n        const config = {\n            dictionaries: [unique_names_generator_1.adjectives, unique_names_generator_1.colors, unique_names_generator_1.animals],\n            separator: \" \",\n            length: 2,\n        };\n        let result = new Array();\n        for (let i = 0; i < numberOfMovies; i++) {\n            const movieName = (0, unique_names_generator_1.uniqueNamesGenerator)(config);\n            const year = Math.floor(Math.random() * (2025 - 1930 + 1) + 1930);\n            result.push({\n                id: i + 1, // Start IDs from 1 for better simulation\n                title: movieName,\n                year: year,\n                plot: `A captivating story about a ${(0, unique_names_generator_1.uniqueNamesGenerator)({ dictionaries: [unique_names_generator_1.adjectives] })} ${(0, unique_names_generator_1.uniqueNamesGenerator)({ dictionaries: [unique_names_generator_1.animals] })} in a ${(0, unique_names_generator_1.uniqueNamesGenerator)({ dictionaries: [unique_names_generator_1.colors] })} world set in ${year}.`,\n                poster: `https://place-hold.it/300x450?text=${encodeURIComponent(movieName)}` // Placeholder image\n            });\n        }\n        console.log(`[SeedMovies] Seeded ${numberOfMovies} movies.`);\n        return result;\n    }\n}\nexports.SeedMovies = SeedMovies;\nexports.globalSeededMovies = SeedMovies.seed(200);\nconsole.log(`[Global Data] Generated ${exports.globalSeededMovies.length} movies into globalSeededMovies.`);\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/SeedMovies.js?");

/***/ }),

/***/ "./dist/ExampleApp/Services/MovieService.js":
/*!**************************************************!*\
  !*** ./dist/ExampleApp/Services/MovieService.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MovieApiService = void 0;\n// services/MovieApiService.ts\nconst QueryableArray_1 = __webpack_require__(/*! ../../helpers/QueryableArray */ \"./dist/helpers/QueryableArray.js\");\nconst SeedMovies_1 = __webpack_require__(/*! ../SeedMovies */ \"./dist/ExampleApp/SeedMovies.js\");\nclass MovieApiService {\n    movies = SeedMovies_1.globalSeededMovies;\n    constructor() {\n        console.log(`[MovieApiService] Initialized with ${this.movies.length} seeded movies.`);\n    }\n    /**\n     * Retrieves movie details by its ID from the seeded data.\n     * @param movieIdString The ID of the movie as a string (will be parsed to number).\n     * @returns A Promise resolving to IMovieDetails or null if not found.\n     */\n    async getMovieDetails(movieIdString) {\n        console.log(`[MovieApiService] Retrieving details for movie ID: ${movieIdString}...`);\n        const movieId = parseInt(movieIdString, 10);\n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 300));\n        const movie = this.movies.find(m => m.id === movieId);\n        if (movie) {\n            console.log(`[MovieApiService] Found movie: \"${movie.title}\" (ID: ${movie.id})`);\n            return movie;\n        }\n        else {\n            console.warn(`[MovieApiService] Movie with ID: ${movieIdString} not found.`);\n            return null;\n        }\n    }\n    /**\n     * Searches for movies by title from the seeded data.\n     * @param query The search query string.\n     * @returns A Promise resolving to an array of ISearchResult.\n     */\n    async searchMovies(query) {\n        console.log(`[MovieApiService] Searching for movies with query: \"${query}\"...`);\n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 200));\n        const lowerCaseQuery = query.toLowerCase();\n        const results = this.movies.filter(movie => movie.title.toLowerCase().includes(lowerCaseQuery)).map(movie => ({\n            id: movie.id,\n            title: movie.title,\n            year: movie.year,\n            poster: \"https://place-hold.it/300x450\",\n            plot: movie.plot // Include plot for search results if desired\n        })); // Cast to ISearchResult\n        console.log(`[MovieApiService] Found ${results.length} search results for \"${query}\".`);\n        return results;\n    }\n    all() {\n        return new Promise((resolve, reject) => {\n            resolve(this.movies);\n        });\n    }\n    take(skip, take) {\n        return new Promise((resolve, reject) => {\n            const result = QueryableArray_1.QueryableArray.from(this.movies).skip(skip).take(take);\n            resolve(result);\n        });\n    }\n}\nexports.MovieApiService = MovieApiService;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Services/MovieService.js?");

/***/ }),

/***/ "./dist/ExampleApp/Services/NotificationService.js":
/*!*********************************************************!*\
  !*** ./dist/ExampleApp/Services/NotificationService.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NotificationService = void 0;\nconst ServiceLocator_1 = __webpack_require__(/*! ../../UI/Service/ServiceLocator */ \"./dist/UI/Service/ServiceLocator.js\");\nconst INotificationComponentInterfaces_1 = __webpack_require__(/*! ../Interfaces/INotificationComponentInterfaces */ \"./dist/ExampleApp/Interfaces/INotificationComponentInterfaces.js\");\nclass NotificationService {\n    constructor() {\n        console.log(\"[NotificationService] initialized.\");\n    }\n    /**\n     * Shows a new notification/toast message.\n     * @param message The message to display.\n     * @param type The type of notification ('success', 'error', 'info', 'warning'). Defaults to 'info'.\n     * @param duration How long the notification should stay visible in milliseconds. Defaults to 5000ms.\n     * @param dismissible Whether the user can dismiss the notification manually. Defaults to true.\n     * @param id An optional unique ID for the notification. If not provided, one will be generated.\n     */\n    showNotification(message, type = 'info', duration = 5000, dismissible = true, id) {\n        const notification = {\n            id: id || crypto.randomUUID(),\n            message,\n            type,\n            duration,\n            dismissible\n        };\n        console.log(\"[NotificationService] Publishing new notification:\", notification);\n        ServiceLocator_1.serviceLocator.get(\"EventBus\").publish(INotificationComponentInterfaces_1.NOTIFICATION_EVENT_NAME, notification);\n    }\n    // You can add more specific helper methods if desired\n    showSuccess(message, duration, dismissible) {\n        this.showNotification(message, 'success', duration, dismissible);\n    }\n    showError(message, duration, dismissible) {\n        this.showNotification(message, 'error', duration, dismissible);\n    }\n    showInfo(message, duration, dismissible) {\n        this.showNotification(message, 'info', duration, dismissible);\n    }\n    showWarning(message, duration, dismissible) {\n        this.showNotification(message, 'warning', duration, dismissible);\n    }\n}\nexports.NotificationService = NotificationService;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Services/NotificationService.js?");

/***/ }),

/***/ "./dist/ExampleApp/Templates/Templates.js":
/*!************************************************!*\
  !*** ./dist/ExampleApp/Templates/Templates.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pageLoading = exports.pageErrorMessage = void 0;\nconst pageErrorMessage = (properties, error) => {\n    return /*html*/ `\r\n            <div class=\"product-detail-page p-6 bg-white shadow rounded-lg text-center text-red-600\">\r\n                <h1 class=\"text-2xl font-bold mb-4\">Error Loading ${properties.name}</h1>\r\n                <p>${error}</p>\r\n                <button class=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200\"\r\n                        data-event-click=\"goBack\">\r\n                    Go Back\r\n                </button>\r\n            </div>`;\n};\nexports.pageErrorMessage = pageErrorMessage;\nconst pageLoading = (message) => {\n    return /*html*/ `\r\n    <div class=\"product-detail-page p-6 bg-white shadow rounded-lg text-center\">\r\n        <p class=\"text-gray-600 text-lg\">${message}</p>\r\n        <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mt-4\"></div>\r\n    </div>`;\n};\nexports.pageLoading = pageLoading;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/ExampleApp/Templates/Templates.js?");

/***/ }),

/***/ "./dist/UI/Application/ApplicationManager.js":
/*!***************************************************!*\
  !*** ./dist/UI/Application/ApplicationManager.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApplicationManager = exports.globalState = exports.eventBus = void 0;\nconst all_1 = __webpack_require__(/*! ../../helpers/all */ \"./dist/helpers/all.js\");\nconst EventBus_1 = __webpack_require__(/*! ./EventBus */ \"./dist/UI/Application/EventBus.js\");\nconst GlobalStateStore_1 = __webpack_require__(/*! ./GlobalStateStore */ \"./dist/UI/Application/GlobalStateStore.js\");\nexports.eventBus = EventBus_1.EventBus.getInstance();\nexports.globalState = new GlobalStateStore_1.GlobalStateStore({});\nclass ApplicationManager {\n    rootComponent;\n    targetElement;\n    router;\n    /**\n     * @param rootComponent The top-level UI component of your application.\n     * @param router The Router instance responsible for navigation.\n     * @param targetSelector The CSS selector for the DOM element where the app should be mounted.\n     */\n    constructor(rootComponent, router, targetSelector = 'body') {\n        this.rootComponent = rootComponent;\n        this.router = router;\n        const target = all_1.$D.get(targetSelector);\n        if (!target) {\n            throw new Error(`Target element with selector '${targetSelector}' not found in the DOM.`);\n        }\n        this.targetElement = target;\n    }\n    /**\n     * Renders the root component, mounts it to the target DOM element, and then starts the router.\n     */\n    async start() {\n        if (!this.rootComponent.render) {\n            console.error(\"Application Manager: Root component does not have a render method defined.\");\n            return;\n        }\n        try {\n            console.log(\"Application Manager: Starting render process for root component...\");\n            const renderResult = await this.rootComponent.render();\n            if (renderResult.result) {\n                this.targetElement.innerHTML = '';\n                this.targetElement.appendChild(renderResult.result);\n                console.log(\"Application Manager: Root component rendered and mounted to DOM.\");\n                console.log(\"Application Manager: Starting router...\");\n                this.router.start();\n                console.log(\"Application Manager: Router started successfully.\");\n            }\n            else {\n                console.warn(\"Application Manager: Root component render result was undefined. Nothing mounted.\");\n            }\n        }\n        catch (error) {\n            console.error(\"Application Manager: Error during rendering or router startup:\", error);\n        }\n    }\n}\nexports.ApplicationManager = ApplicationManager;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Application/ApplicationManager.js?");

/***/ }),

/***/ "./dist/UI/Application/EventBus.js":
/*!*****************************************!*\
  !*** ./dist/UI/Application/EventBus.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// core/EventBus.ts (Your Updated Code)\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventBus = void 0;\nclass EventBus {\n    // A map where the key is the topic name (string)\n    // and the value is an array of SubscriberInfo objects for that topic.\n    subscribers = new Map();\n    // Singleton instance\n    static instance;\n    // Private constructor to enforce singleton pattern\n    constructor() {\n        console.log(\"[EventBus] Initialized (Singleton)\");\n    }\n    // Static method to get the singleton instance\n    static getInstance() {\n        if (!EventBus.instance) {\n            EventBus.instance = new EventBus();\n        }\n        return EventBus.instance;\n    }\n    /**\n     * Subscribes a callback function to a specific topic.\n     * The `subscriberId` is now required to enable targeted messages and proper unsubscription.\n     * @param topic The name of the event topic.\n     * @param callback The function to be called when the event is published.\n     * @param subscriberId The ID of the component/entity that is subscribing.\n     */\n    subscribe(topic, callback, subscriberId) {\n        if (!this.subscribers.has(topic)) {\n            this.subscribers.set(topic, []);\n        }\n        // Check if this specific subscriber/callback combination already exists for this topic\n        const existingSubscribers = this.subscribers.get(topic);\n        if (existingSubscribers?.some(sub => sub.id === subscriberId && sub.callback === callback)) {\n            console.warn(`[EventBus] Subscriber \"${subscriberId}\" already has this callback subscribed to topic: \"${topic}\". Skipping.`);\n            return; // Prevent duplicate subscriptions\n        }\n        // Add the subscriber with their ID to the list for this topic\n        existingSubscribers?.push({ id: subscriberId, callback });\n        console.log(`[EventBus] Component \"${subscriberId}\" subscribed to topic: \"${topic}\"`);\n    }\n    /**\n     * Unsubscribes a specific callback from a topic for a given subscriber ID.\n     * @param topic The name of the event topic.\n     * @param callback The original callback function to remove.\n     * @param subscriberId The ID of the component/entity that subscribed.\n     */\n    unsubscribe(topic, callback, subscriberId) {\n        const topicSubscribers = this.subscribers.get(topic);\n        if (topicSubscribers) {\n            const initialLength = topicSubscribers.length;\n            // Filter out the specific subscription by matching both callback and ID\n            const newSubscribers = topicSubscribers.filter(sub => !(sub.callback === callback && sub.id === subscriberId));\n            if (newSubscribers.length < initialLength) {\n                this.subscribers.set(topic, newSubscribers);\n                console.log(`[EventBus] Component \"${subscriberId}\" unsubscribed from topic: \"${topic}\".`);\n            }\n            else {\n                console.warn(`[EventBus] No matching subscription found for ID \"${subscriberId}\" and topic \"${topic}\" to unsubscribe.`);\n            }\n        }\n        else {\n            console.warn(`[EventBus] No subscribers found for topic \"${topic}\" to unsubscribe from.`);\n        }\n    }\n    /**\n     * Unsubscribes ALL callbacks for a given subscriber ID from a specific topic.\n     * This is useful for components to clean up all their subscriptions on a topic when they leave.\n     * @param topic The name of the event topic.\n     * @param subscriberId The ID of the component/entity to unsubscribe.\n     */\n    unsubscribeAllForId(topic, subscriberId) {\n        const topicSubscribers = this.subscribers.get(topic);\n        if (topicSubscribers) {\n            const initialLength = topicSubscribers.length;\n            const newSubscribers = topicSubscribers.filter(sub => sub.id !== subscriberId);\n            if (newSubscribers.length < initialLength) {\n                this.subscribers.set(topic, newSubscribers);\n                console.log(`[EventBus] Unsubscribed all callbacks for component \"${subscriberId}\" from topic: \"${topic}\".`);\n            }\n            else {\n                console.warn(`[EventBus] No subscriptions found for ID \"${subscriberId}\" on topic \"${topic}\" to unsubscribe.`);\n            }\n        }\n    }\n    /**\n     * Publishes data to a specific topic for ALL subscribers of that topic.\n     * This is your existing broadcast functionality.\n     * @param topic The name of the event topic.\n     * @param data The data to be passed to the subscribers.\n     */\n    publish(topic, data) {\n        const topicSubscribers = this.subscribers.get(topic);\n        if (topicSubscribers) {\n            console.log(`[EventBus] Publishing (broadcast) to topic: \"${topic}\"`, data);\n            // Iterate over a copy to prevent issues if subscribers unsubscribe themselves during iteration\n            [...topicSubscribers].forEach(sub => {\n                try {\n                    sub.callback(data);\n                }\n                catch (e) {\n                    console.error(`[EventBus] Error in subscriber for topic \"${topic}\" (ID: ${sub.id}):`, e);\n                }\n            });\n        }\n        else {\n            console.warn(`[EventBus] No subscribers for topic \"${topic}\". Broadcast ignored.`);\n        }\n    }\n    /**\n     * Publishes data to a specific topic, targeting ONLY a component with the given ID.\n     * @param targetComponentId The ID of the component that should receive the message.\n     * @param topic The name of the event topic.\n     * @param data The data to be passed to the target component's subscriber.\n     */\n    publishTo(targetComponentId, topic, data) {\n        const topicSubscribers = this.subscribers.get(topic);\n        if (topicSubscribers) {\n            console.log(`[EventBus] Publishing (targeted) to topic: \"${topic}\" for component: \"${targetComponentId}\"`, data);\n            // Filter subscribers to find only those matching the targetComponentId\n            const targetSubscribers = topicSubscribers.filter(sub => sub.id === targetComponentId);\n            if (targetSubscribers.length === 0) {\n                console.warn(`[EventBus] No subscriber found for topic \"${topic}\" with target ID \"${targetComponentId}\". Targeted publish ignored.`);\n            }\n            // Execute callbacks for the targeted subscribers\n            [...targetSubscribers].forEach(sub => {\n                try {\n                    sub.callback(data);\n                }\n                catch (e) {\n                    console.error(`[EventBus] Error in targeted subscriber for topic \"${topic}\" (ID: ${sub.id}):`, e);\n                }\n            });\n        }\n        else {\n            console.warn(`[EventBus] Topic \"${topic}\" has no subscribers at all. Targeted publish ignored.`);\n        }\n    }\n}\nexports.EventBus = EventBus;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Application/EventBus.js?");

/***/ }),

/***/ "./dist/UI/Application/GlobalStateStore.js":
/*!*************************************************!*\
  !*** ./dist/UI/Application/GlobalStateStore.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GlobalStateStore = void 0;\nconst all_1 = __importDefault(__webpack_require__(/*! ../../helpers/all */ \"./dist/helpers/all.js\"));\nconst ApplicationManager_1 = __webpack_require__(/*! ./ApplicationManager */ \"./dist/UI/Application/ApplicationManager.js\");\nclass GlobalStateStore {\n    _state;\n    observedState;\n    constructor(initialState) {\n        this._state = initialState;\n        // Make the entire global state object observable\n        this.observedState = all_1.default.observeAll(this._state, this.handleStateChange.bind(this));\n    }\n    handleStateChange() {\n        console.log(\"Global State Changed:\", this._state);\n        ApplicationManager_1.eventBus.publish('globalStateChanged', this._state);\n    }\n}\nexports.GlobalStateStore = GlobalStateStore;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Application/GlobalStateStore.js?");

/***/ }),

/***/ "./dist/UI/Component/Core/PageComponent.js":
/*!*************************************************!*\
  !*** ./dist/UI/Component/Core/PageComponent.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../UIComponent */ \"./dist/UI/UIComponent.js\");\n/**\n * Abstract base class for all application page components.\n * Provides common lifecycle methods and ensures correct property typing for pages.\n *\n * @template TState The specific state type for this page. Must extend IPageState.\n */\nclass PageComponent extends UIComponent_1.UIComponentBase {\n    /**\n     * Initializes a new instance of the PageComponent.\n     *\n     * @param properties The properties bag for this page component, including router details.\n     */\n    constructor(properties) {\n        super(properties);\n        if (!this.properties.path) {\n            console.warn(`[${this.properties.id}] PageComponent initialized without a 'path' property.`);\n        }\n        if (!this.properties.router) {\n            console.error(`[${this.properties.id}] PageComponent initialized without a 'router' instance.`);\n        }\n    }\n    async onEnter(prevProps) {\n        console.log(`[${this.properties.id}] Page entered. Path: ${this.properties.path}`);\n    }\n    onLeave() {\n        console.log(`[${this.properties.id}] Page left.`);\n        this.dispose();\n    }\n}\nexports.PageComponent = PageComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Component/Core/PageComponent.js?");

/***/ }),

/***/ "./dist/UI/Component/Core/RepeaterComponent.js":
/*!*****************************************************!*\
  !*** ./dist/UI/Component/Core/RepeaterComponent.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RepeaterComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../UIComponent */ \"./dist/UI/UIComponent.js\");\n/**\n * A generic component that renders a list of items using a provided component renderer for each item.\n * It manages the lifecycle (onEnter, onLeave, dispose) of its dynamically created child components.\n *\n * @template T The type of the items in the list.\n */\nclass RepeaterComponent extends UIComponent_1.UIComponentBase {\n    renderedChildComponents = new Map();\n    constructor(properties) {\n        super({\n            ...properties,\n            state: {},\n            template: (component) => {\n                const { cssClasses = '', itemContainerTag = 'div' } = component.properties;\n                console.log(\"Hitting the itemContainerTag\");\n                return `\r\n                    <${itemContainerTag} id=\"${component.properties.id}-items-container\" class=\"${cssClasses}\">\r\n                        </${itemContainerTag}>\r\n                `;\n            }\n        });\n        console.log(`[${this.properties.id || 'RepeaterComponent'}] Initialized with ${properties.items.length} items.`);\n    }\n    /**\n     * Called when the RepeaterComponent is mounted to the DOM.\n     * This is where it initiates the rendering of its child item components.\n     */\n    async onEnter() {\n        await super.onEnter();\n        console.log(`[${this.properties.id || 'RepeaterComponent'}] onEnter: Rendering items as child components.`);\n        await this.renderItemsAsComponents();\n    }\n    /**\n     * Handles the dynamic creation and rendering of each item as a child component.\n     * It also manages the disposal of child components that are no longer present in the items list.\n     */\n    async renderItemsAsComponents() {\n        const itemsContainer = this._element;\n        if (!itemsContainer) {\n            console.error(`[${this.properties.id || 'RepeaterComponent'}] Items container not found for rendering children!`);\n            return;\n        }\n        const currentItemIds = new Set();\n        for (const item of this.properties.items) {\n            const itemId = item[this.properties.uniqueIdField];\n            currentItemIds.add(itemId);\n            if (!this.renderedChildComponents.has(itemId)) {\n                const itemWrapper = document.createElement(this.properties.itemContainerTag || 'div');\n                itemWrapper.id = `${this.properties.id}-item-wrapper-${itemId}`;\n                itemsContainer.appendChild(itemWrapper);\n                try {\n                    const childComponent = await this.properties.itemComponentRenderer(item, itemWrapper, `${this.properties.id}-child-${itemId}`, this.properties.context);\n                    if (childComponent) {\n                        this.renderedChildComponents.set(itemId, childComponent);\n                        childComponent.onEnter();\n                    }\n                }\n                catch (error) {\n                    console.error(`[${this.properties.id || 'RepeaterComponent'}] Error rendering child for item ${itemId}:`, error);\n                }\n            }\n            else {\n            }\n        }\n        for (const [existingItemId, childComponent] of this.renderedChildComponents.entries()) {\n            if (!currentItemIds.has(existingItemId)) {\n                console.log(`[${this.properties.id || 'RepeaterComponent'}] Disposing orphaned child component for item ID: ${existingItemId}.`);\n                childComponent.dispose();\n                this.renderedChildComponents.delete(existingItemId);\n            }\n        }\n    }\n    /**\n     * Called when the RepeaterComponent is removed from the DOM or disposed.\n     * Ensures all managed child components are properly disposed of to prevent memory leaks.\n     */\n    onLeave() {\n        super.onLeave();\n        console.log(`[${this.properties.id || 'RepeaterComponent'}] onLeave: Disposing all managed child components.`);\n        for (const childComponent of this.renderedChildComponents.values()) {\n            childComponent.dispose();\n        }\n        this.renderedChildComponents.clear();\n    }\n    /**\n     * The dispose method should also ensure onLeave is called for proper cleanup.\n     */\n    dispose() {\n        this.onLeave();\n        super.dispose();\n        console.log(`[${this.properties.id || 'RepeaterComponent'}] Disposed.`);\n    }\n}\nexports.RepeaterComponent = RepeaterComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Component/Core/RepeaterComponent.js?");

/***/ }),

/***/ "./dist/UI/Component/Core/RootUIComponent.js":
/*!***************************************************!*\
  !*** ./dist/UI/Component/Core/RootUIComponent.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RootUIComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../UIComponent */ \"./dist/UI/UIComponent.js\");\nconst RouterOutletComponent_1 = __webpack_require__(/*! ./RouterOutletComponent */ \"./dist/UI/Component/Core/RouterOutletComponent.js\");\nconst RootUIComponentTemplate = (component) => /*html*/ `\r\n    <div class=\"app-container min-h-screen flex flex-col\">\r\n        <div id=\"${component.properties.id}-header-container\"></div>         \r\n        <main id=\"main-content\" class=\"flex-grow container mx-auto p-4\">\r\n        </main>    \r\n        <div id=\"notifications-container\"></div> \r\n        <div id=\"${component.properties.id}-footer-container\"></div>\r\n    </div>\r\n`;\nclass RootUIComponent extends UIComponent_1.UIComponentBase {\n    _isRendered = false;\n    _onRenderedCallbacks = [];\n    constructor(properties) {\n        super({\n            ...properties,\n            template: RootUIComponentTemplate\n        });\n        this.childComponents.push(new RouterOutletComponent_1.RouterOutletComponent({\n            id: 'main-router-outlet',\n            targetSelector: '#main-content',\n            outletId: \"#main-content\"\n        }));\n        console.log(`[${this.properties.id}] RootUIComponent initialized.`);\n    }\n    async render() {\n        const renderResult = await super.render();\n        if (renderResult.result) {\n            this._isRendered = true;\n            this._onRenderedCallbacks.forEach(callback => callback());\n            this._onRenderedCallbacks = [];\n        }\n        return renderResult;\n    }\n    onRendered(callback) {\n        if (this._isRendered) {\n            callback();\n        }\n        else {\n            this._onRenderedCallbacks.push(callback);\n        }\n    }\n}\nexports.RootUIComponent = RootUIComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Component/Core/RootUIComponent.js?");

/***/ }),

/***/ "./dist/UI/Component/Core/RouterOutletComponent.js":
/*!*********************************************************!*\
  !*** ./dist/UI/Component/Core/RouterOutletComponent.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RouterOutletComponent = void 0;\nconst UIComponent_1 = __webpack_require__(/*! ../../UIComponent */ \"./dist/UI/UIComponent.js\");\nclass RouterOutletComponent extends UIComponent_1.UIComponentBase {\n    _activePageComponent = null;\n    _outletElement = null;\n    constructor(properties) {\n        super(properties);\n        if (!this.properties.targetSelector) {\n            throw new Error(\"RouterOutletComponent requires an 'targetSelector' property.\");\n        }\n    }\n    async render() {\n        return new Promise(resolve => {\n            const html = `\r\n                <div id=\"${this.properties.outletId}\" class=\"router-outlet\">\r\n                </div>\r\n            `;\n            const element = this.toHTMLElement(html);\n            this._applyCommonElementProperties(element);\n            this._outletElement = element;\n            resolve({ result: element });\n        });\n    }\n    /**\n     * Loads and displays a new page component in the router outlet.\n     * This method assumes `newPageComponent` is an instance of `PageComponent` (or something that implements `IPageComponent`).\n     *\n     * @param newPageComponent The new page component instance to load.\n     * @param prevPageComponent The previous page component instance (optional, for onLeave/onEnter logic).\n     */\n    async loadPageComponent(newPageComponent, prevPageComponent) {\n        if (this._activePageComponent) {\n            if (this._activePageComponent.onLeave) {\n                this._activePageComponent.onLeave();\n            }\n            this._activePageComponent.dispose();\n            if (this._outletElement) {\n                this._outletElement.innerHTML = '';\n            }\n        }\n        this._activePageComponent = newPageComponent;\n        if (this._outletElement) {\n            try {\n                const renderResult = await newPageComponent.render();\n                if (renderResult.result) {\n                    this._outletElement.appendChild(renderResult.result);\n                }\n            }\n            catch (error) {\n                console.error(`Error rendering new page component ${newPageComponent.properties.id}:`, error);\n                return;\n            }\n        }\n        else {\n            console.error(`RouterOutletComponent: Outlet element with ID \"${this.properties.outletId}\" not found for rendering.`);\n            return;\n        }\n        if (newPageComponent.onEnter) {\n            const router = newPageComponent.properties.router;\n            console.log(`RouterOutlet: Navigating to page ${newPageComponent.properties.path}. Router instance:`, router);\n            await newPageComponent.onEnter(prevPageComponent?.properties);\n        }\n        else {\n            console.warn(`PageComponent ${newPageComponent.properties.id} does not have an onEnter method.`);\n        }\n    }\n}\nexports.RouterOutletComponent = RouterOutletComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Component/Core/RouterOutletComponent.js?");

/***/ }),

/***/ "./dist/UI/Router/Router.js":
/*!**********************************!*\
  !*** ./dist/UI/Router/Router.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Core/Router.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Router = void 0;\nclass Router {\n    outletSelector;\n    routes;\n    outletElement = null;\n    currentComponent = null; // Track current page component\n    isStarted = false; // Flag to ensure router only starts once\n    constructor(routes, outletSelector) {\n        this.outletSelector = outletSelector;\n        this.routes = routes;\n    }\n    component;\n    defaultProps;\n    start() {\n        if (this.isStarted) {\n            console.warn(\"Router has already been started.\");\n            return;\n        }\n        this.outletElement = document.querySelector(this.outletSelector);\n        if (!this.outletElement) {\n            console.error(`Router outlet element not found: ${this.outletSelector}`);\n            return;\n        }\n        // Listen for hash changes\n        window.addEventListener('hashchange', this.handleHashChange.bind(this));\n        // Handle the initial route load\n        this.handleHashChange();\n        this.isStarted = true;\n        console.log(\"Router started successfully.\");\n    }\n    stop() {\n        if (!this.isStarted) {\n            console.warn(\"Router is not running, cannot stop.\");\n            return;\n        }\n        window.removeEventListener('hashchange', this.handleHashChange.bind(this));\n        // Dispose current component if it exists\n        if (this.currentComponent) {\n            this.currentComponent.dispose();\n            this.currentComponent = null;\n        }\n        this.outletElement = null;\n        this.isStarted = false;\n        console.log(\"Router stopped.\");\n    }\n    // NEW: Method to navigate to a specific path\n    navigate(path) {\n        // Ensure the path starts with '#' for hash routing\n        const targetPath = path.startsWith('#') ? path : `#${path}`;\n        if (window.location.hash !== targetPath) {\n            window.location.hash = targetPath; // This will trigger 'hashchange' event\n        }\n        else {\n            // If the hash is the same, manually trigger route handling\n            // This is important for navigating to the same route with different params (e.g., /products/1 -> /products/2)\n            this.handleHashChange();\n        }\n    }\n    // NEW: Method to navigate back in browser history\n    goBack() {\n        console.log('Router: Navigating back in history.');\n        window.history.back();\n    }\n    async handleHashChange() {\n        const path = window.location.hash.slice(1) || '/';\n        console.log(`Router: Handling hash change to: ${path}`);\n        let matchedRoute;\n        let routeParams = {};\n        // Find a matching route and extract parameters\n        for (const route of this.routes) {\n            const routeRegex = new RegExp(`^${route.path.replace(/:([a-zA-Z0-9_]+)/g, '([a-zA-Z0-9_\\\\-]+)')}$`);\n            const match = path.match(routeRegex);\n            if (match) {\n                matchedRoute = route;\n                const paramNames = (route.path.match(/:([a-zA-Z0-9_]+)/g) || []).map(p => p.slice(1));\n                paramNames.forEach((name, index) => {\n                    routeParams[name] = match[index + 1];\n                });\n                break;\n            }\n        }\n        if (matchedRoute && this.outletElement) {\n            if (this.currentComponent) {\n                this.currentComponent.onLeave();\n                this.currentComponent.dispose();\n                this.currentComponent = null;\n            }\n            const ComponentClass = matchedRoute.component;\n            const propsFromRoute = matchedRoute.defaultProps || {};\n            const { id = 'generated-id-' + Math.random().toString(36).substring(2, 10), ...restDefaultProps } = propsFromRoute;\n            const componentProps = {\n                ...restDefaultProps, // Includes all other properties from defaultProps\n                id: id, // Assign the now guaranteed string 'id'\n                path: matchedRoute.path,\n                router: this,\n                routeParams: routeParams\n            };\n            this.currentComponent = new ComponentClass(componentProps);\n            try {\n                const renderResult = await this.currentComponent.render();\n                if (renderResult.result) {\n                    this.outletElement.innerHTML = '';\n                    this.outletElement.appendChild(renderResult.result);\n                    console.log(`Router: Rendered component for path \"${path}\"`);\n                    await this.currentComponent.onEnter();\n                }\n                else {\n                    console.error(`Router: Render result for path \"${path}\" was empty.`);\n                }\n            }\n            catch (error) {\n                console.error(`Router: Error rendering component for path \"${path}\":`, error);\n                this.navigate('/error');\n            }\n        }\n        else if (this.outletElement) {\n            console.warn(`Router: No route found for path: ${path}. Showing 404.`);\n            if (this.currentComponent) {\n                this.currentComponent.onLeave();\n                this.currentComponent.dispose();\n                this.currentComponent = null;\n            }\n            this.outletElement.innerHTML = `<div class=\"p-6 text-center text-red-500\">\r\n                                                <h1 class=\"text-4xl font-bold mb-4\">404 - Not Found</h1>\r\n                                                <p>The page <code>${path}</code> you are looking for does not exist.</p>\r\n                                                <button class=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\" onclick=\"window.location.hash = '/'\">Go to Home</button>\r\n                                            </div>`;\n        }\n    }\n}\nexports.Router = Router;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Router/Router.js?");

/***/ }),

/***/ "./dist/UI/Service/ServiceLocator.js":
/*!*******************************************!*\
  !*** ./dist/UI/Service/ServiceLocator.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serviceLocator = exports.ServiceLocator = void 0;\nclass ServiceLocator {\n    services = new Map();\n    /**\n     * Registers a service instance with a unique name.\n     * This is typically done during your application's bootstrapping phase.\n     * @param name The unique name (identifier) for the service.\n     * @param serviceInstance The actual instance of the service to register.\n     * @template T The type of the service instance, for type safety.\n     */\n    register(name, serviceInstance) {\n        if (this.services.has(name)) {\n            console.warn(`[ServiceLocator] Service \"${name}\" already registered. Overwriting.`);\n        }\n        this.services.set(name, serviceInstance);\n        console.log(`[ServiceLocator] Service \"${name}\" registered.`);\n    }\n    /**\n     * Retrieves a registered service instance by its name.\n     * Components will call this method when they need a service.\n     * @param name The name of the service to retrieve.\n     * @returns The registered service instance.\n     * @template T The expected type of the service instance, for type safety.\n     * @throws {Error} If the service with the given name is not found.\n     */\n    get(name) {\n        const service = this.services.get(name);\n        if (!service) {\n            // It's crucial to handle cases where a service isn't found.\n            // Throwing an error here prevents silent failures.\n            throw new Error(`[ServiceLocator] Service \"${name}\" not found.`);\n        }\n        return service;\n    }\n    /**\n     * Checks if a service is already registered.\n     * Useful for conditional logic or preventing re-registration warnings.\n     * @param name The name of the service.\n     * @returns `true` if registered, `false` otherwise.\n     */\n    has(name) {\n        return this.services.has(name);\n    }\n}\nexports.ServiceLocator = ServiceLocator;\n// Export a singleton instance. This ensures only one ServiceLocator exists.\nexports.serviceLocator = new ServiceLocator();\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/Service/ServiceLocator.js?");

/***/ }),

/***/ "./dist/UI/UIComponent.js":
/*!********************************!*\
  !*** ./dist/UI/UIComponent.js ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UIComponentBase = void 0;\nconst all_1 = __webpack_require__(/*! ../helpers/all */ \"./dist/helpers/all.js\");\nconst ServiceLocator_1 = __webpack_require__(/*! ./Service/ServiceLocator */ \"./dist/UI/Service/ServiceLocator.js\");\nclass UIComponentBase {\n    _element = null;\n    _state;\n    properties;\n    childComponents = [];\n    _isMounted = false;\n    _activeSubscriptions = [];\n    _activeEventListeners = [];\n    eventBus;\n    constructor(properties) {\n        this.properties = properties;\n        this._state = properties.state || {};\n        console.log(`[${this.properties.name || this.properties.id}] Component initialized.`);\n        this.eventBus = ServiceLocator_1.serviceLocator.get('EventBus');\n    }\n    addChild(child) {\n        if (this.childComponents.includes(child)) {\n            console.warn(`[${this.properties.name || this.properties.id}] Child ${child.properties.name || child.properties.id} already added.`);\n            return;\n        }\n        this.childComponents.push(child);\n        console.log(`[${this.properties.name || this.properties.id}] Added child: ${child.properties.name || child.properties.id}`);\n    }\n    async render() {\n        console.log(`[${this.properties.name || this.properties.id}] Starting render process.`);\n        let htmlString = this.properties.template\n            ? this.properties.template(this)\n            : \"\";\n        if (!htmlString) {\n            console.warn(`[${this.properties.name || this.properties.id}] No template provided. Cannot render self.`);\n            return { result: undefined };\n        }\n        const tempContainer = document.createElement(\"div\");\n        tempContainer.innerHTML = htmlString.trim();\n        if (tempContainer.children.length > 1) {\n            const fragment = document.createDocumentFragment();\n            while (tempContainer.firstChild) {\n                fragment.appendChild(tempContainer.firstChild);\n            }\n            this._element = fragment;\n            console.warn(`[${this.properties.name || this.properties.id}] Template has multiple root elements. Using DocumentFragment. Child appending might be affected for direct element queries.`);\n        }\n        else if (tempContainer.firstElementChild) {\n            this._element = tempContainer.firstElementChild;\n        }\n        else {\n            console.error(`[${this.properties.name || this.properties.id}] Failed to create HTMLElement from template. Template might be empty or invalid.`);\n            return { result: undefined };\n        }\n        if (!this._element) {\n            console.error(`[${this.properties.name || this.properties.id}] Render process failed: _element is null.`);\n            return { result: undefined };\n        }\n        if (this._element instanceof HTMLElement) {\n            if (this.properties.id) {\n                this._element.id = this.properties.id;\n            }\n            console.log(`[${this.properties.name || this.properties.id}] Applying common properties to component's root HTMLElement:`, this._element);\n            this._applyCommonElementProperties(this._element);\n        }\n        await this._renderAndAppendChildren(this._element);\n        console.log(`[${this.properties.name || this.properties.id}] Render process completed. Element:`, this._element);\n        return { result: this._element };\n    }\n    async _renderAndAppendChildren(parentRenderedElement) {\n        console.log(`[${this.properties.name || this.properties.id}] Rendering and appending children.`);\n        const childRenderPromises = this.childComponents\n            .filter((child) => child.render)\n            .map((child) => child.render());\n        const childRenderResults = await Promise.all(childRenderPromises);\n        childRenderResults.forEach(async (childResult, index) => {\n            const childComponent = this.childComponents[index];\n            if (childResult?.result) {\n                this._appendChildToParentDom(parentRenderedElement, childComponent, childResult.result);\n                await childComponent.onEnter();\n            }\n            else {\n                console.warn(`[${this.properties.name || this.properties.id}] Child ${childComponent.properties.name || childComponent.properties.id} render returned no element.`);\n            }\n        });\n        console.log(`[${this.properties.name || this.properties.id}] All children rendered and appended.`);\n    }\n    _appendChildToParentDom(parentRenderedElement, childComponent, childRenderedElement) {\n        let targetElementForChild = parentRenderedElement;\n        const targetSelector = childComponent.properties.targetSelector;\n        if (targetSelector && typeof targetSelector === \"string\") {\n            if (parentRenderedElement instanceof HTMLElement) {\n                const queryResult = parentRenderedElement.querySelector(targetSelector);\n                if (queryResult) {\n                    targetElementForChild = queryResult;\n                }\n                else {\n                    console.warn(`[${this.properties.name || this.properties.id}] Target element '${targetSelector}' not found within parent for child ${childComponent.properties.name || childComponent.properties.id}. Appending to parent's root element.`);\n                }\n            }\n            else {\n                console.warn(`[${this.properties.name || this.properties.id}] Cannot query by selector within a DocumentFragment parent for child ${childComponent.properties.name || childComponent.properties.id}. Appending directly to fragment.`);\n            }\n        }\n        targetElementForChild.appendChild(childRenderedElement);\n        console.log(`[${this.properties.name || this.properties.id}] Appended child ${childComponent.properties.name || childComponent.properties.id}.`);\n    }\n    async onEnter() {\n        console.log(`[${this.properties.name || this.properties.id}] entered.`);\n        this._isMounted = true;\n    }\n    onLeave() {\n        console.log(`[${this.properties.name || this.properties.id}] left.`);\n        this._isMounted = false;\n    }\n    dispose() {\n        console.log(`[${this.properties.name || this.properties.id}] Disposing component.`);\n        if (this._isMounted) {\n            this.onLeave();\n        }\n        this.childComponents.forEach((child) => child.dispose());\n        this.childComponents = [];\n        if (this._element && this._element.parentNode) {\n            this._element.parentNode.removeChild(this._element);\n            this._element = null;\n        }\n        console.log(`[${this.properties.name || this.properties.id}] Disposed.`);\n    }\n    setState(newState) {\n        this._state = { ...this._state, ...newState };\n        console.log(`[${this.properties.name || this.properties.id}] State updated:`, this._state);\n        this.reRender();\n    }\n    getState() {\n        return this._state;\n    }\n    unsubscribe(topic, action, subscriberId) {\n        this.eventBus.unsubscribe(topic, action, subscriberId);\n    }\n    subscribe(topic, action) {\n        if (!this.properties?.id) {\n            console.warn(`[${this.constructor.name}] Cannot subscribe to topic \"${topic}\" without an ID. Subscription ignored.`);\n            return;\n        }\n        const boundAction = action.bind(this);\n        this.eventBus.subscribe(topic, boundAction, this.properties.id);\n        this._activeSubscriptions.push({ topic, action: boundAction });\n    }\n    publish(topic, data) {\n        this.eventBus.publish(topic, data);\n    }\n    publishTo(targetComponentId, topic, data) {\n        this.eventBus.publishTo(targetComponentId, topic, data);\n    }\n    toHTMLElement(html) {\n        return all_1.$D.toDOM(html);\n    }\n    querySelector(selector) {\n        if (!this.properties?.id) {\n            console.warn(`[${this.constructor.name}] querySelector: Cannot query without a component ID. Selector: \"${selector}\"`);\n            return null;\n        }\n        const componentRootElement = all_1.$D.get(`#${this.properties.id}`);\n        if (componentRootElement) {\n            return all_1.$D.get(selector, componentRootElement);\n        }\n        console.warn(`[${this.constructor.name}] querySelector: Component root element (ID: \"${this.properties.id}\") not found in DOM. Cannot query. Selector: \"${selector}\"`);\n        return null;\n    }\n    querySelectorAll(selector) {\n        if (!this.properties?.id) {\n            console.warn(`[${this.constructor.name}] querySelectorAll: Cannot query without a component ID. Selector: \"${selector}\"`);\n            return [];\n        }\n        const componentRootElement = all_1.$D.get(`#${this.properties.id}`);\n        if (componentRootElement) {\n            return all_1.$D.getAll(selector, componentRootElement);\n        }\n        console.warn(`[${this.constructor.name}] querySelectorAll: Component root element (ID: \"${this.properties.id}\") not found in DOM. Cannot query. Selector: \"${selector}\"`);\n        return [];\n    }\n    _applyCommonElementProperties(element) {\n        if (this.properties?.state) {\n            for (const key in this.properties.state) {\n                if (Object.prototype.hasOwnProperty.call(this.properties.state, key)) {\n                    element.setAttribute(`data-${key}`, String(this.properties.state[key]));\n                }\n            }\n        }\n        if (this.properties?.eventHandlers) {\n            for (const eventName in this.properties.eventHandlers) {\n                if (Object.prototype.hasOwnProperty.call(this.properties.eventHandlers, eventName)) {\n                    const handler = this.properties.eventHandlers[eventName];\n                    this._addTrackedEventListener(element, eventName, handler);\n                }\n            }\n        }\n    }\n    _addTrackedEventListener(element, eventName, handler) {\n        element.addEventListener(eventName, handler);\n        this._activeEventListeners.push({ element, eventName, handler });\n    }\n    updateState(newState) {\n        this.properties.state = {\n            ...this.properties.state,\n            ...newState,\n        };\n        console.log(`[${this.properties.id || this.constructor.name}] State updated:`, this.properties.state);\n        this.reRender();\n    }\n    async reRender() {\n        if (this._element && this._element.parentNode) {\n            const oldElement = this._element;\n            const parent = oldElement.parentNode;\n            try {\n                const renderResult = await this.render();\n                const newElement = renderResult.result;\n                if (newElement && parent) {\n                    parent.replaceChild(newElement, oldElement);\n                    if (newElement instanceof HTMLElement) {\n                        this._element = newElement;\n                    }\n                    else {\n                        this._element = null;\n                        console.warn(`[${this.properties?.id || this.constructor.name}] New element is not an HTMLElement. Internal _element set to null.`);\n                    }\n                    console.log(`[${this.properties?.id || this.constructor.name}] Component re-rendered and DOM updated.`);\n                }\n                else if (!newElement) {\n                    console.warn(`[${this.properties?.id || this.constructor.name}] Re-render failed: New element was not generated.`);\n                }\n                else {\n                    console.warn(`[${this.properties?.id || this.constructor.name}] Re-render aborted: Old element was detached from DOM.`);\n                }\n            }\n            catch (error) {\n                console.error(`[${this.properties?.id || this.constructor.name}] Error during re-render:`, error);\n            }\n        }\n        else if (this._element) {\n            console.warn(`[${this.properties.id || this.constructor.name}] Re-render called but component is not currently in the DOM. Updating internal element only.`);\n            await this.render();\n        }\n        else {\n            console.warn(`[${this.properties.id || this.constructor.name}] Re-render called before initial render or after dispose. No action taken.`);\n        }\n    }\n}\nexports.UIComponentBase = UIComponentBase;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/UIComponent.js?");

/***/ }),

/***/ "./dist/UI/UIObservedComponent.js":
/*!****************************************!*\
  !*** ./dist/UI/UIObservedComponent.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UIObservedComponent = void 0;\nconst all_1 = __importDefault(__webpack_require__(/*! ../helpers/all */ \"./dist/helpers/all.js\"));\nconst UIComponent_1 = __webpack_require__(/*! ./UIComponent */ \"./dist/UI/UIComponent.js\");\nclass UIObservedComponent extends UIComponent_1.UIComponentBase {\n    properties;\n    // Internal reference to the observed (proxied) state object\n    _observedStateInstance;\n    /**\n     * @param properties The properties bag for the component.\n     * If `properties.state` is provided, it will be made reactive.\n     */\n    constructor(properties) {\n        // Assign properties before using it\n        super(properties);\n        this.properties = properties;\n        // Ensure properties.state is an object if it's undefined\n        if (!this.properties.state) {\n            this.properties.state = {}; // Initialize an empty object if no state was given\n        }\n        this._observedStateInstance = all_1.default.observeAll(this.properties.state, this.handleStateChange.bind(this));\n        this.properties.state = this._observedStateInstance;\n        this.subscribe('globalStateChanged', this.handleGlobalStateChange.bind(this));\n        // Perform an initial re-render after the state is observed\n        // This ensures the UI reflects the initial state immediately.\n        // We use a microtask to ensure the DOM is ready for the first render.\n        // Alternatively, if you're sure render will only be called once by ApplicationManager,\n        // you can skip this immediate render here.\n        //this.handleStateChange(); \n        this.render();\n    }\n    handleGlobalStateChange(newData) {\n        console.log(`[${this.properties?.id}] Global state updated:`, newData);\n        // This component's own state doesn't need to be updated.\n        // Its render method will directly read from `globalState.observedState`.\n        // Trigger a re-render of THIS component\n        // Since it's a UIObservedComponent, it already calls render on its own state change.\n        // But if its *own* state isn't changing, and it depends on global state,\n        // you explicitly need to re-render it.\n        // This could be a good use case for Effects.reRender if its own state hasn't changed.\n        // If you are relying on UIObservedComponent's built-in re-render, you might need to\n        // make a dummy change to this.properties.state (e.g., `this.properties.state.lastGlobalUpdate = Date.now()`)\n        // or ensure the global state change is reflected in its own state.\n        // For simplicity, let's just trigger a re-render directly for this example:\n        this.handleStateChange(); // Call the UIObservedComponent's re-render trigger\n    }\n    /**\n     * Callback triggered by the state observer when the component's state (or any nested part) changes.\n     * Initiates a re-render of the component.\n     * This method is protected as it's an internal lifecycle handler for state changes.\n     */\n    async handleStateChange() {\n        console.log(`[${this.properties?.id || this.constructor.name}] State changed. Triggering re-render...`);\n        await this.reRender();\n    }\n    /**\n     * Overrides the dispose method to also clean up the observed state.\n     */\n    dispose() {\n        console.log(`Disposing UIObservedComponent: ${this.properties?.id || 'Unnamed'}`);\n        // Clean up: Dereference the observed state proxy to aid garbage collection.\n        // Setting it to null allows the Proxy and its target object to be garbage collected\n        // when the component itself is no longer referenced.\n        this._observedStateInstance = null; // Cast to any to allow null assignment\n        // Call the base class's dispose method for standard cleanup\n        super.dispose();\n    }\n}\nexports.UIObservedComponent = UIObservedComponent;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/UI/UIObservedComponent.js?");

/***/ }),

/***/ "./dist/helpers/QueryableArray.js":
/*!****************************************!*\
  !*** ./dist/helpers/QueryableArray.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryableArray = void 0;\n/**\n * A custom array class that provides additional query-like methods for filtering, mapping, and manipulating arrays.\n * @template T - The type of elements in the array.\n */\nclass QueryableArray extends Array {\n    /**\n     * Skips the specified number of elements and returns the remaining elements.\n     * @param count - The number of elements to skip.\n     * @returns A new QueryableArray containing the remaining elements.\n     */\n    skip(count) {\n        const result = QueryableArray.from(this.slice(count));\n        return result;\n    }\n    /**\n     * Takes the specified number of elements from the start of the array.\n     * @param count - The number of elements to take.\n     * @returns A new QueryableArray containing the taken elements.\n     */\n    take(count) {\n        const result = QueryableArray.from(this.slice(0, count));\n        return result;\n    }\n    /**\n     * Filters the array based on a predicate function.\n     * @param predicate - A function to test each element.\n     * @returns A new QueryableArray containing the elements that satisfy the predicate.\n     */\n    where(predicate) {\n        const result = QueryableArray.from(this.filter(predicate));\n        return result;\n    }\n    /**\n     * Projects each element of the array into a new form.\n     * @template U - The type of the projected elements.\n     * @param selector - A function to transform each element.\n     * @returns A new QueryableArray containing the transformed elements.\n     */\n    select(selector) {\n        const result = QueryableArray.from(this.map(selector));\n        return result;\n    }\n    /**\n     * Returns the first element that satisfies the predicate or the first element if no predicate is provided.\n     * @param predicate - A function to test each element (optional).\n     * @returns The first matching element.\n     * @throws An error if no matching element is found.\n     */\n    first(predicate) {\n        const item = predicate ? this.find(predicate) : this[0];\n        if (item === undefined) {\n            throw new Error('Sequence contains no matching element');\n        }\n        return item;\n    }\n    /**\n     * Returns the first element that satisfies the predicate or undefined if no matching element is found.\n     * @param predicate - A function to test each element (optional).\n     * @returns The first matching element or undefined.\n     */\n    firstOrDefault(predicate) {\n        return predicate ? this.find(predicate) : this[0];\n    }\n    /**\n     * Returns the last element that satisfies the predicate or the last element if no predicate is provided.\n     * @param predicate - A function to test each element (optional).\n     * @returns The last matching element.\n     * @throws An error if no matching element is found.\n     */\n    last(predicate) {\n        const items = predicate ? this.filter(predicate) : this;\n        if (items.length === 0) {\n            throw new Error('Sequence contains no matching element');\n        }\n        return items[items.length - 1];\n    }\n    /**\n     * Returns the last element that satisfies the predicate or undefined if no matching element is found.\n     * @param predicate - A function to test each element (optional).\n     * @returns The last matching element or undefined.\n     */\n    lastOrDefault(predicate) {\n        const items = predicate ? this.filter(predicate) : this;\n        return items.length > 0 ? items[items.length - 1] : undefined;\n    }\n    /**\n     * Returns the only element that satisfies the predicate or the only element if no predicate is provided.\n     * @param predicate - A function to test each element (optional).\n     * @returns The single matching element.\n     * @throws An error if there is not exactly one matching element.\n     */\n    single(predicate) {\n        const items = predicate ? this.filter(predicate) : this;\n        if (items.length !== 1) {\n            throw new Error('Sequence contains more than one matching element');\n        }\n        return items[0];\n    }\n    /**\n     * Returns the only element that satisfies the predicate or undefined if no matching element is found.\n     * @param predicate - A function to test each element (optional).\n     * @returns The single matching element or undefined.\n     */\n    singleOrDefault(predicate) {\n        const items = predicate ? this.filter(predicate) : this;\n        return items.length === 1 ? items[0] : undefined;\n    }\n    /**\n     * Determines whether any elements satisfy the predicate or whether the array contains any elements if no predicate is provided.\n     * @param predicate - A function to test each element (optional).\n     * @returns True if any elements satisfy the predicate or if the array contains any elements.\n     */\n    any(predicate) {\n        return predicate ? this.some(predicate) : this.length > 0;\n    }\n    /**\n     * Determines whether all elements satisfy the predicate.\n     * @param predicate - A function to test each element.\n     * @returns True if all elements satisfy the predicate.\n     */\n    all(predicate) {\n        return this.every(predicate);\n    }\n    /**\n     * Counts the number of elements that satisfy the predicate or the total number of elements if no predicate is provided.\n     * @param predicate - A function to test each element (optional).\n     * @returns The count of matching elements.\n     */\n    count(predicate) {\n        return predicate ? this.filter(predicate).length : this.length;\n    }\n    /**\n     * Sorts the elements in ascending order based on a key.\n     * @template K - The type of the key.\n     * @param keySelector - A function to extract the key for each element.\n     * @returns A new QueryableArray containing the sorted elements.\n     */\n    orderBy(keySelector) {\n        const result = new QueryableArray(...this.sort((a, b) => {\n            if (keySelector(a) < keySelector(b))\n                return -1;\n            if (keySelector(a) > keySelector(b))\n                return 1;\n            return 0;\n        }));\n        return result;\n    }\n    /**\n     * Sorts the elements in descending order based on a key.\n     * @template K - The type of the key.\n     * @param keySelector - A function to extract the key for each element.\n     * @returns A new QueryableArray containing the sorted elements.\n     */\n    orderByDescending(keySelector) {\n        const result = new QueryableArray(...this.sort((a, b) => {\n            if (keySelector(a) > keySelector(b))\n                return -1;\n            if (keySelector(a) < keySelector(b))\n                return 1;\n            return 0;\n        }));\n        return result;\n    }\n    /**\n     * Groups the elements of the array based on a key.\n     * @template K - The type of the key.\n     * @param keySelector - A function to extract the key for each element.\n     * @returns A Map where the keys are the group keys and the values are QueryableArrays of grouped elements.\n     */\n    groupBy(keySelector) {\n        const map = new Map();\n        this.forEach(item => {\n            const key = keySelector(item);\n            if (!map.has(key)) {\n                map.set(key, new QueryableArray());\n            }\n            map.get(key).push(item);\n        });\n        return map;\n    }\n    /**\n     * Removes duplicate elements from the array.\n     * @returns A new QueryableArray containing only distinct elements.\n     */\n    distinct() {\n        const set = new Set(this);\n        return new QueryableArray(...set);\n    }\n    orderByAsc(keySelector) {\n        const result = new QueryableArray(...this.sort((a, b) => {\n            const keyA = keySelector(a);\n            const keyB = keySelector(b);\n            if (keyA < keyB)\n                return -1;\n            if (keyA > keyB)\n                return 1;\n            return 0;\n        }));\n        return result;\n    }\n    /**\n     * Sorts the elements in descending order based on a key.\n     * @template K - The type of the key.\n     * @param keySelector - A function to extract the key for each element.\n     * @returns A new QueryableArray containing the sorted elements.\n     */\n    orderByDesc(keySelector) {\n        const result = new QueryableArray(...this.sort((a, b) => {\n            const keyA = keySelector(a);\n            const keyB = keySelector(b);\n            if (keyA > keyB)\n                return -1;\n            if (keyA < keyB)\n                return 1;\n            return 0;\n        }));\n        return result;\n    }\n    /**\n    * Creates a new QueryableArray instance from an array-like or iterable object.\n    * @template T - The type of the elements in the source array.\n    * @param arrayLike - An array-like or iterable object to convert to a QueryableArray.\n    * @returns A new QueryableArray instance.\n    */\n    static from(arrayLike) {\n        return new QueryableArray(...Array.from(arrayLike));\n    }\n}\nexports.QueryableArray = QueryableArray;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/helpers/QueryableArray.js?");

/***/ }),

/***/ "./dist/helpers/all.js":
/*!*****************************!*\
  !*** ./dist/helpers/all.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.$D = exports.DathorHelpers = exports.TaskScheduler = void 0;\nclass TaskScheduler {\n    tasks = [];\n    animationFrameId = null;\n    startTime = null;\n    nextTaskId = 0;\n    isPaused = false;\n    pauseStartTime = null;\n    idleTime = 0;\n    /**\n     * Adds a new task to the task list with a specified delay.\n     *\n     * @param callback - The function to be executed when the task is triggered.\n     * @param delay - The delay in milliseconds after which the task should be executed.\n     * @returns The unique identifier for the added task.\n     */\n    addTask(callback, delay) {\n        const taskId = this.nextTaskId++;\n        this.tasks.push({ id: taskId, time: delay + this.idleTime, callback });\n        this.tasks.sort((a, b) => a.time - b.time);\n        this.start();\n        return taskId;\n    }\n    /**\n     * Removes a task from the task list by its ID.\n     * If the task is found and removed, it checks if the task list is empty and stops the process if it is.\n     *\n     * @param {number} taskId - The ID of the task to be removed.\n     * @returns {boolean} - Returns true if the task was found and removed, otherwise returns false.\n     */\n    removeTask(taskId) {\n        const index = this.tasks.findIndex(task => task.id === taskId);\n        if (index !== -1) {\n            this.tasks.splice(index, 1);\n            if (this.tasks.length === 0) {\n                this.stop();\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Reschedules a task by updating its delay time and re-sorting the task list.\n     *\n     * @param taskId - The ID of the task to be rescheduled.\n     * @param newDelay - The new delay time to be set for the task.\n     * @returns A boolean indicating whether the task was successfully rescheduled.\n     */\n    rescheduleTask(taskId, newDelay) {\n        const task = this.tasks.find(task => task.id === taskId);\n        if (task) {\n            task.time = newDelay + this.idleTime;\n            this.tasks.sort((a, b) => a.time - b.time);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Starts the task scheduler. If the scheduler is paused, it will resume from where it left off.\n     * It calculates the idle time during the pause and adjusts the task times accordingly.\n     * The tasks are executed in order based on their scheduled time.\n     * If there are no tasks left, the scheduler stops automatically.\n     *\n     * @remarks\n     * - If the scheduler is already running, this method does nothing.\n     * - The tasks are sorted by their scheduled time before execution.\n     *\n     * @returns {void}\n     */\n    start() {\n        if (this.animationFrameId !== null)\n            return;\n        if (this.isPaused && this.pauseStartTime) {\n            this.idleTime += performance.now() - this.pauseStartTime;\n            this.pauseStartTime = null;\n            this.isPaused = false;\n            this.tasks.forEach(task => task.time += this.idleTime);\n            this.tasks.sort((a, b) => a.time - b.time);\n        }\n        this.startTime = performance.now();\n        const executeTasks = (currentTime) => {\n            if (this.startTime === null)\n                return;\n            const elapsed = currentTime - this.startTime;\n            while (this.tasks.length > 0 && this.tasks[0].time <= elapsed) {\n                const task = this.tasks.shift();\n                if (task) {\n                    task.callback();\n                }\n            }\n            if (this.tasks.length > 0) {\n                this.animationFrameId = requestAnimationFrame(executeTasks);\n            }\n            else {\n                this.stop();\n            }\n        };\n        this.animationFrameId = requestAnimationFrame(executeTasks);\n    }\n    /**\n     * Stops the animation by canceling the current animation frame request.\n     * If an animation frame is currently active, it will be canceled and the\n     * animation frame ID and start time will be reset to null.\n     */\n    stop() {\n        if (this.animationFrameId !== null) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n            this.startTime = null;\n        }\n    }\n    /**\n     * Clears the current tasks, stops any ongoing processes, and resets the idle time to zero.\n     */\n    clear() {\n        this.tasks = [];\n        this.stop();\n        this.idleTime = 0;\n    }\n    /**\n     * Pauses the animation if it is currently running.\n     *\n     * This method cancels the current animation frame request and sets the\n     * `animationFrameId` to `null`. It also records the time at which the\n     * pause occurred and sets the `isPaused` flag to `true`.\n     *\n     * @remarks\n     * This method has no effect if the animation is already paused or if\n     * there is no animation frame request pending.\n     */\n    pause() {\n        if (this.animationFrameId !== null && !this.isPaused) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n            this.pauseStartTime = performance.now();\n            this.isPaused = true;\n        }\n    }\n}\nexports.TaskScheduler = TaskScheduler;\nclass DathorHelpers {\n    /**\n     * Sets or gets the value of an HTML input element selected by the given selector.\n     *\n     * @template T - The type of the value to be returned.\n     * @param {string} selector - The CSS selector to find the HTML input element.\n     * @param {any} [value] - The value to set for the input element. If not provided, the current value of the input element will be returned.\n     * @returns {T | null} - The value of the input element cast to type T, or null if the element is not found.\n     */\n    static value(selector, value) {\n        const element = DathorHelpers.get(selector);\n        if (value && element)\n            element.value = value;\n        return element ? element.value : null;\n    }\n    /**\n     * Creates and returns a new instance of `TaskScheduler`.\n     *\n     * @returns {TaskScheduler} A new `TaskScheduler` instance.\n     */\n    static createTaskScheduler() {\n        return new TaskScheduler();\n    }\n    /**\n     * Retrieves an element from the DOM based on the provided selector.\n     *\n     * @template T - The type of the HTMLElement to be returned.\n     * @param {string} selector - The CSS selector to match the desired element.\n     * @param {Element | DocumentFragment | null} [parent] - The parent element or document fragment to search within. If not provided, the document is used as the parent.\n     * @returns {T | null} - The matched element of type T, or null if no element is found.\n     */\n    static get(selector, parent) {\n        if (!parent) {\n            return document.querySelector(selector); // Handle null parent\n        }\n        return parent.querySelector(selector); // Handle null parent\n    }\n    /**\n   * Filters elements based on a selector within a set of parent elements.\n   *\n   * @param {string} filterSelector - The CSS selector to filter elements.\n   * @param {HTMLElement | HTMLElement[]} parents - The parent element(s) to search within.\n   * @returns {HTMLElement[]} - An array of filtered elements.\n   */\n    static filter(filterSelector, parents) {\n        if (!parents) {\n            return []; // Return empty array if no parents are provided.\n        }\n        if (Array.isArray(parents)) {\n            return parents.flatMap(parent => Array.from(parent.querySelectorAll(filterSelector)));\n        }\n        else {\n            return Array.from(parents.querySelectorAll(filterSelector));\n        }\n    }\n    /**\n     * Retrieves all elements that match the specified CSS selector within the given parent element or document fragment.\n     * If no parent is provided, it searches within the entire document.\n     *\n     * @param selector - The CSS selector to match elements against.\n     * @param parent - Optional. The parent element or document fragment to search within. Defaults to the entire document.\n     * @returns An array of elements that match the specified selector.\n     */\n    static getAll(selector, parent) {\n        const queryResult = parent ? parent.querySelectorAll(selector) : document.querySelectorAll(selector);\n        return Array.from(queryResult);\n    }\n    /**\n     * Replaces an old HTML element with a new HTML element.\n     *\n     * @param oldElement - The existing HTML element to be replaced.\n     * @param newElement - The new HTML element to replace the old element with.\n     */\n    static replace(oldElement, newElement) {\n        oldElement.replaceWith(newElement);\n    }\n    /**\n     * Adds an event listener to multiple elements specified by a selector or a list of elements.\n     *\n     * @template T - The type of the elements, extending HTMLElement.\n     * @param {string} event - The event type to listen for (e.g., 'click', 'mouseover').\n     * @param {string | NodeListOf<T> | T[]} selectorOrElements - A CSS selector string, a NodeList of elements, or an array of elements to attach the event listener to.\n     * @param {(event?: Event, el?: T) => void} fn - The callback function to execute when the event is triggered. Receives the event object and the element as arguments.\n     * @param {AddEventListenerOptions} [options] - Optional. An options object that specifies characteristics about the event listener.\n     * @param {HTMLElement | DocumentFragment | null} [parentEl] - Optional. The parent element or document fragment to query the selector within. Defaults to the document if not provided.\n     * @returns {void}\n     */\n    static onAll(event, selectorOrElements, fn, options, parentEl) {\n        let elements;\n        if (typeof selectorOrElements === \"string\") {\n            elements = parentEl\n                ? parentEl.querySelectorAll(selectorOrElements)\n                : document.querySelectorAll(selectorOrElements);\n        }\n        else {\n            elements = selectorOrElements;\n        }\n        elements.forEach((el) => {\n            el.addEventListener(event, (e) => {\n                fn(e, el);\n            }, options);\n        });\n    }\n    /**\n     * Creates a debounced function that delays invoking the provided function until after the specified delay has elapsed since the last time the debounced function was invoked.\n     *\n     * @param func - The function to debounce.\n     * @param delay - The number of milliseconds to delay.\n     * @returns A new debounced function.\n     */\n    static debounce(func, delay) {\n        let timeoutId;\n        return function (...args) {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => func.apply(this, args), delay);\n        };\n    }\n    /**\n     * Retrieves the FormData object from a given HTML form element.\n     *\n     * @param form - The HTML form element or a string selector to identify the form.\n     * @returns The FormData object containing the form's data, or null if the form element is not found.\n     */\n    static getFormData(form) {\n        const formElement = typeof form === \"string\" ? exports.$D.get(form) : form;\n        if (!formElement)\n            return null;\n        return new FormData(formElement);\n    }\n    /**\n     * Serializes an HTML form into an object, with optional keys to omit or pick.\n     *\n     * @template T - The type of the resulting object.\n     * @template K - The keys of T to omit.\n     * @param {HTMLFormElement} form - The form element to serialize.\n     * @param {K[]} [omit] - An optional array of keys to omit from the resulting object.\n     * @param {(keyof T)[]} [pick] - An optional array of keys to pick from the resulting object.\n     * @returns {Omit<T, K> | Pick<T, keyof Pick<T, keyof T>>} - The serialized form data as an object, with omitted or picked keys.\n     */\n    static serializeForm(form, omit, pick) {\n        const formData = new FormData(form);\n        const serialized = {};\n        formData.forEach((value, key) => {\n            if (serialized[key]) {\n                if (Array.isArray(serialized[key])) {\n                    serialized[key].push(value);\n                }\n                else {\n                    serialized[key] = [serialized[key], value];\n                }\n            }\n            else {\n                serialized[key] = value;\n            }\n        });\n        let result = serialized;\n        if (pick) {\n            result = pick.reduce((acc, key) => {\n                if (result[key]) {\n                    acc[key] = result[key];\n                }\n                return acc;\n            }, {});\n        }\n        if (omit) {\n            result = Object.keys(result).reduce((acc, key) => {\n                if (!omit.includes(key)) {\n                    acc[key] = result[key];\n                }\n                return acc;\n            }, {});\n        }\n        return result;\n    }\n    /**\n     * Creates a throttled version of the provided function that will only execute\n     * the function at most once every specified limit of milliseconds.\n     *\n     * @param func - The function to throttle.\n     * @param limit - The number of milliseconds to wait before allowing the function to be called again.\n     * @returns A throttled version of the provided function.\n     */\n    static throttle(func, limit) {\n        let inThrottle;\n        return function (...args) {\n            if (!inThrottle) {\n                func.apply(this, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n    /**\n     * Sets or gets the CSS property value of a given HTML element.\n     *\n     * @param element - The target HTML element or a string selector to identify the element.\n     * @param property - The CSS property name to set or get.\n     * @param value - The value to set for the CSS property. If omitted, the current value of the property will be returned.\n     * @returns The current value of the CSS property if `value` is not provided; otherwise, returns `void`.\n     */\n    static css(element, property, value) {\n        const el = typeof element === \"string\" ? exports.$D.get(element) : element;\n        if (!el)\n            return;\n        if (value === undefined) {\n            return getComputedStyle(el).getPropertyValue(property);\n        }\n        else {\n            el.style.setProperty(property, value);\n        }\n    }\n    /**\n     * Executes an array of tasks, which can be either synchronous functions or functions returning promises,\n     * and returns a promise that resolves when all tasks have completed.\n     *\n     * @param tasks - An array of functions that return either a value or a promise.\n     * @returns A promise that resolves to an array of results when all tasks have completed.\n     *          If any task throws an error or returns a rejected promise, the returned promise will be rejected with that error.\n     */\n    static awaitAll(tasks) {\n        const promises = tasks.map(task => {\n            try {\n                const result = task();\n                if (result instanceof Promise) {\n                    return result; // If it's a promise, return it\n                }\n                else {\n                    return Promise.resolve(result); // If it's sync, wrap it in a promise\n                }\n            }\n            catch (error) {\n                return Promise.reject(error); // Handle errors\n            }\n        });\n        return Promise.all(promises);\n    }\n    /**\n     * Attaches an event listener to elements that match the specified selector, including elements\n     * that are added to the DOM after the initial call. The event listener is reapplied whenever\n     * the DOM changes.\n     *\n     * @template T - The type of the HTMLElement.\n     * @param {string} event - The event type to listen for (e.g., 'click', 'mouseover').\n     * @param {string} selector - The CSS selector to match the elements.\n     * @param {(event?: Event, el?: T) => void} fn - The event handler function to be called when the event is triggered.\n     * @param {AddEventListenerOptions} [options] - Optional options for the event listener (e.g., { capture: true }).\n     * @param {HTMLElement | DocumentFragment | null} [parentEl=document.body] - The parent element to observe for DOM changes. Defaults to document.body.\n     */\n    static live(event, selector, fn, options, parentEl = document.body // Default to document.body\n    ) {\n        const applyListeners = () => {\n            exports.$D.onAll(event, selector, fn, options, parentEl);\n        };\n        applyListeners(); // Apply listeners initially\n        const observer = new MutationObserver((mutationsList) => {\n            for (const mutation of mutationsList) {\n                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n                    applyListeners(); // Reapply listeners on DOM changes\n                    break; // No need to check other mutations if childList changed\n                }\n            }\n        });\n        observer.observe(parentEl instanceof DocumentFragment ? parentEl : parentEl, {\n            childList: true,\n            subtree: true,\n        });\n    }\n    /**\n     * Attaches an event listener to a specified element or elements.\n     *\n     * @template T - The type of the HTMLElement.\n     * @param {string} event - The event type to listen for (e.g., 'click', 'mouseover').\n     * @param {string | HTMLElement | Element | DocumentFragment} selector - The CSS selector string, HTMLElement, Element, or DocumentFragment to attach the event listener to.\n     * @param {(event?: Event, el?: T) => void} fn - The callback function to execute when the event is triggered.\n     * @param {AddEventListenerOptions} [options] - Optional options object that specifies characteristics about the event listener.\n     * @param {HTMLElement | DocumentFragment | null} [parentEl] - Optional parent element to scope the selector query within.\n     * @returns {T | null} - The element to which the event listener was attached, or null if multiple elements were handled or no element was found.\n     */\n    static on(event, selector, fn, options, parentEl) {\n        if (typeof selector === \"string\") {\n            const elements = parentEl\n                ? parentEl.querySelectorAll(selector)\n                : document.querySelectorAll(selector);\n            if (elements.length > 1) {\n                // Delegate to onAll if multiple elements match\n                DathorHelpers.onAll(event, elements, fn, options);\n                return null; // Return null since multiple elements were handled\n            }\n            const target = elements[0];\n            if (target) {\n                target.addEventListener(event, (e) => {\n                    fn(e, target);\n                }, options);\n                return target;\n            }\n            else {\n                return null;\n            }\n        }\n        else if (selector instanceof Element || selector instanceof HTMLElement) {\n            selector.addEventListener(event, (e) => {\n                fn(e, selector);\n            }, options);\n            return selector;\n        }\n        else if (selector instanceof DocumentFragment) {\n            // Handle DocumentFragment: Find the first matching element within.\n            const target = selector.querySelector(selector); // Query inside it\n            if (target) {\n                target.addEventListener(event, (e) => {\n                    fn(e, target);\n                }, options);\n            }\n            return target;\n        }\n        return null;\n    }\n    /**\n     * Removes all child nodes from the specified parent element.\n     *\n     * @param selector - A string representing a CSS selector or an HTMLElement.\n     *                   If a string is provided, the element will be selected using `DOMUtils.get`.\n     *                   If an HTMLElement is provided, it will be used directly.\n     *\n     * @remarks\n     * If the parent element is not found, the function will return without performing any action.\n     */\n    static removeChilds(selector) {\n        const parent = typeof (selector) === \"string\" ? DathorHelpers.get(selector) : selector;\n        if (!parent)\n            return;\n        while (parent.firstChild) {\n            parent.firstChild.remove();\n        }\n    }\n    /**\n     * Creates an HTML element or uses an existing one, and optionally sets its text content.\n     *\n     * @template T - The type of the HTML element.\n     * @param {string | T} p - The tag name of the element to create, or an existing HTML element.\n     * @param {string} [textContent] - Optional text content to set for the element.\n     * @returns {T} The created or provided HTML element with the optional text content set.\n     */\n    static create(p, textContent) {\n        let node;\n        typeof (p) === \"string\" ? node = document.createElement(p) : node = p;\n        if (textContent)\n            node.textContent = textContent;\n        return node;\n    }\n    /**\n     * Converts an HTML string into a DOM element or a DocumentFragment.\n     *\n     * If the provided HTML string contains a single root element, returns that element as an `HTMLElement`.\n     * If the HTML string contains multiple root elements, returns a `DocumentFragment` containing all elements.\n     *\n     * @param html - The HTML string to convert into DOM nodes.\n     * @returns The resulting `HTMLElement` if a single root element is present, or a `DocumentFragment` if multiple elements are present.\n     */\n    static toDOM(html) {\n        const template = document.createElement('template');\n        template.innerHTML = html.trim();\n        if (template.content.childElementCount === 1) {\n            return template.content.firstElementChild;\n        }\n        else {\n            return template.content;\n        }\n    }\n    /**\n     * Traverses up the DOM tree from the given element until it finds an ancestor that matches the specified selector.\n     *\n     * @param element - The starting element from which to begin the traversal.\n     * @param selector - The CSS selector to match the ancestor elements against.\n     * @returns The first ancestor element that matches the selector, or `null` if no matching ancestor is found.\n     */\n    static parentUntil(element, selector) {\n        let currentElement = element;\n        while (currentElement) {\n            if (currentElement.matches(selector)) {\n                return currentElement;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return null;\n    }\n    /**\n     * Converts an HTMLElement or Element to a CSS selector string.\n     *\n     * @param el - The HTMLElement or Element to convert.\n     * @returns The CSS selector string representing the element's path.\n     * @throws {Error} If the provided argument is not an HTMLElement.\n     */\n    static ElementToSelector(el) {\n        if (!(el instanceof HTMLElement)) {\n            throw new Error('Invalid argument: el must be an HTMLElement');\n        }\n        let path = [];\n        while (el.nodeType === Node.ELEMENT_NODE) {\n            let selector = el.nodeName.toLowerCase();\n            if (el.id) {\n                selector += '#' + el.id;\n                path.unshift(selector);\n                break;\n            }\n            else {\n                let sib = el, nth = 1;\n                while (sib.previousElementSibling) {\n                    sib = sib.previousElementSibling;\n                    nth++;\n                }\n                if (nth !== 1) {\n                    selector += ':nth-child(' + nth + ')';\n                }\n                path.unshift(selector);\n            }\n            el = el.parentNode;\n        }\n        return path.join(' > ');\n    }\n    /**\n     * Retrieves the next sibling element of the given element.\n     *\n     * @param el - The element or a string representing the element's ID.\n     * @returns The next sibling element if it exists and is an HTMLElement, otherwise null.\n     */\n    static nextSibling(el) {\n        const element = typeof el === \"string\" ? DathorHelpers.get(el) : el;\n        return element && element.nextElementSibling instanceof HTMLElement ? element.nextElementSibling : null;\n    }\n    /**\n     * Retrieves the previous sibling of a given HTML element.\n     *\n     * @param el - The target element or a string representing the element's ID.\n     * @returns The previous sibling element if it exists and is an HTMLElement, otherwise null.\n     */\n    static previousSibling(el) {\n        const element = typeof el === \"string\" ? DathorHelpers.get(el) : el;\n        return element && element.previousElementSibling instanceof HTMLElement ? element.previousElementSibling : null;\n    }\n    /**\n     * Gets or sets a data attribute on an HTML element.\n     *\n     * @param el - The target element or a selector string to find the element.\n     * @param key - The data attribute key (without the \"data-\" prefix).\n     * @param value - The value to set for the data attribute. If undefined, the current value is returned. If null, the data attribute is removed.\n     * @returns The current value of the data attribute if getting, or the set value if setting, or undefined if the element is not found.\n     */\n    static data(el, key, value) {\n        const element = typeof el === \"string\" ? DathorHelpers.get(el) : el;\n        if (!element)\n            return undefined;\n        if (value === undefined) {\n            return element.dataset[key];\n        }\n        else if (value === null) {\n            delete element.dataset[key];\n        }\n        else {\n            element.dataset[key] = value;\n        }\n        return value;\n    }\n    /**\n     * Finds the closest ancestor of the given element that matches the specified selector.\n     *\n     * @template T - The type of the HTMLElement.\n     * @param {HTMLElement | string} el - The element or a selector string to start the search from.\n     * @param {string} selector - The selector to match the ancestor against.\n     * @returns {T | null} - The closest matching ancestor element, or null if no match is found.\n     */\n    static closest(el, selector) {\n        const element = typeof el === \"string\" ? DathorHelpers.get(el) : el;\n        return element ? element.closest(selector) : null;\n    }\n    /**\n     * Retrieves the parent element of the given HTML element or element identified by a selector string.\n     *\n     * @param el - The target element or a selector string to identify the element.\n     * @returns The parent HTMLElement of the given element, or null if the element has no parent or does not exist.\n     */\n    static parent(el) {\n        const element = typeof el === \"string\" ? DathorHelpers.get(el) : el;\n        return element ? element.parentElement : null;\n    }\n    /**\n     * Inserts a new HTML element before a reference element in the DOM.\n     *\n     * @param newElement - The new HTML element to be inserted.\n     * @param referenceElement - The reference element before which the new element will be inserted.\n     *                           This can be either an HTMLElement or a string representing the ID of the element.\n     *\n     * @remarks\n     * If the reference element is provided as a string, it will be resolved using `DOMUtils.get`.\n     * If the reference element or its parent node is not found, the new element will not be inserted.\n     */\n    static insertBefore(newElement, referenceElement) {\n        const refEl = typeof referenceElement === \"string\" ? DathorHelpers.get(referenceElement) : referenceElement;\n        if (refEl && refEl.parentNode) {\n            refEl.parentNode.insertBefore(newElement, refEl);\n        }\n    }\n    /**\n     * Inserts a new HTML element immediately after a reference element in the DOM.\n     *\n     * @param newElement - The new HTML element to be inserted.\n     * @param referenceElement - The reference element after which the new element will be inserted.\n     *                           This can be either an HTMLElement or a string representing the ID of the element.\n     *\n     * @remarks\n     * If the reference element is provided as a string, it will be resolved using `DOMUtils.get`.\n     * If the reference element or its parent node is not found, the new element will not be inserted.\n     */\n    static insertAfter(newElement, referenceElement) {\n        const refEl = typeof referenceElement === \"string\" ? DathorHelpers.get(referenceElement) : referenceElement;\n        if (refEl && refEl.parentNode) {\n            refEl.parentNode.insertBefore(newElement, refEl.nextSibling);\n        }\n    }\n    /**\n     * Checks if the given HTML element has the specified class or classes.\n     *\n     * @param element - The HTML element or a string selector to find the element.\n     * @param classNames - The class name or an array of class names to check for.\n     * @returns `true` if the element has all the specified class names, otherwise `false`.\n     */\n    static hasClass(element, classNames) {\n        const el = typeof element === \"string\" ? DathorHelpers.get(element) : element;\n        if (!el)\n            return false;\n        if (typeof classNames === \"string\") {\n            return el.classList.contains(classNames);\n        }\n        else if (Array.isArray(classNames)) {\n            return classNames.every(className => el.classList.contains(className));\n        }\n        return false; // Handle invalid input (e.g., non-string, non-array)\n    }\n    /**\n     * Adds one or more class names to the specified HTML element.\n     *\n     * @param element - The target element or a selector string to get the element.\n     * @param classNames - A single class name or an array of class names to add to the element.\n     *\n     * @remarks\n     * If the `element` parameter is a string, it will be used as a selector to find the element.\n     * If the element is not found, the function will return without making any changes.\n     * If the `classNames` parameter is neither a string nor an array, the function will do nothing.\n     *\n     * @example\n     * ```typescript\n     * // Add a single class to an element by selector\n     * addClass(\"#myElement\", \"new-class\");\n     *\n     * // Add multiple classes to an element by reference\n     * const element = document.getElementById(\"myElement\");\n     * addClass(element, [\"class1\", \"class2\"]);\n     * ```\n     */\n    static addClass(element, classNames) {\n        const el = typeof element === \"string\" ? DathorHelpers.get(element) : element;\n        if (!el)\n            return;\n        if (typeof classNames === \"string\") {\n            el.classList.add(classNames);\n        }\n        else if (Array.isArray(classNames)) {\n            classNames.forEach(className => el.classList.add(className));\n        } // No else needed: handles invalid input gracefully (does nothing)\n    }\n    /**\n     * Removes one or more class names from the specified HTML element.\n     *\n     * @param element - The target element or a selector string to identify the element.\n     * @param classNames - A single class name or an array of class names to be removed from the element.\n     */\n    static removeClass(element, classNames) {\n        const el = typeof element === \"string\" ? DathorHelpers.get(element) : element;\n        if (!el)\n            return;\n        if (typeof classNames === \"string\") {\n            el.classList.remove(classNames);\n        }\n        else if (Array.isArray(classNames)) {\n            classNames.forEach(className => el.classList.remove(className));\n        } // No else needed: handles invalid input gracefully (does nothing)\n    }\n    /**\n     * Toggles one or more class names on the specified element.\n     *\n     * @param element - The target element or a selector string to find the element.\n     * @param classNames - A single class name or an array of class names to toggle.\n     *\n     * @remarks\n     * If the `element` parameter is a string, it will be used as a selector to find the element.\n     * If the `classNames` parameter is a string, it will toggle that single class name.\n     * If the `classNames` parameter is an array, it will toggle each class name in the array.\n     *\n     * @example\n     * ```typescript\n     * // Toggle a single class\n     * toggleClass(document.getElementById('myElement'), 'active');\n     *\n     * // Toggle multiple classes\n     * toggleClass(document.getElementById('myElement'), ['active', 'hidden']);\n     *\n     * // Using a selector string\n     * toggleClass('#myElement', 'active');\n     * ```\n     */\n    static toggleClass(element, classNames) {\n        const el = typeof element === \"string\" ? DathorHelpers.get(element) : element;\n        if (!el)\n            return;\n        if (typeof classNames === \"string\") {\n            el.classList.toggle(classNames);\n        }\n        else if (Array.isArray(classNames)) {\n            classNames.forEach(className => el.classList.toggle(className));\n        } // No else needed: handles invalid input gracefully (does nothing)\n    }\n    /**\n     * Sets or gets the inner HTML content of a specified HTML element.\n     *\n     * @param el - The target HTML element or a string selector to identify the element.\n     * @param htmlContent - The HTML content to set. If `undefined`, the current inner HTML is returned.\n     *                      If `null`, the inner HTML is cleared.\n     * @returns The current inner HTML if `htmlContent` is `undefined`, otherwise the new HTML content or `undefined` if the element is not found.\n     */\n    static html(el, htmlContent) {\n        const element = typeof el === \"string\" ? DathorHelpers.get(el) : el;\n        if (!element)\n            return undefined;\n        if (htmlContent === undefined) {\n            return element.innerHTML;\n        }\n        else if (htmlContent === null) {\n            element.innerHTML = '';\n        }\n        else {\n            element.innerHTML = htmlContent;\n        }\n        return htmlContent;\n    }\n    /**\n     * Repeats a template for each item in an array and optionally inserts the result into a container.\n     *\n     * @template T - The type of items in the array.\n     * @param {T[]} items - The array of items to iterate over.\n     * @param {(item: T, index: number) => string} itemTemplate - A function that returns a string template for each item.\n     * @param {HTMLElement | string | null} [container=null] - An optional container (or selector) where the generated HTML will be inserted.\n     * @param {string} [joinString=''] - A string used to join the generated templates.\n     * @returns {void | string} - Returns the generated HTML string if no container is provided or if the container is not found.\n     */\n    static repeat(items, itemTemplate, container = null, joinString = '') {\n        const html = items.map((item, index) => itemTemplate(item, index)).join(joinString);\n        if (container) {\n            const targetContainer = typeof container === \"string\" ? DathorHelpers.get(container) : container;\n            if (targetContainer) {\n                DathorHelpers.html(targetContainer, html);\n                return;\n            }\n            else {\n                return html;\n            }\n        }\n        else {\n            return html;\n        }\n    }\n    /**\n     * Generates a wrapped list of items with optional classes for the wrapper and items.\n     *\n     * @template T - The type of the items in the list.\n     * @param {T[]} items - The array of items to be wrapped.\n     * @param {(item: T, index: number) => string} itemTemplate - A function that returns the HTML string for each item.\n     * @param {string} wrapperTag - The HTML tag to use for the wrapper (e.g., 'ul', 'ol', 'div').\n     * @param {string} [wrapperClass] - Optional CSS class for the wrapper element.\n     * @param {string} [itemClass] - Optional CSS class for each item element.\n     * @returns {string} The HTML string of the wrapped list.\n     */\n    static wrappedList(items, itemTemplate, wrapperTag, wrapperClass, itemClass) {\n        let listItems = items.map((item, index) => {\n            const itemContent = itemTemplate(item, index);\n            if (itemClass) {\n                return `<${wrapperTag === 'ul' || wrapperTag === 'ol' ? 'li' : 'div'} class=\"${itemClass}\">${itemContent}</${wrapperTag === 'ul' || wrapperTag === 'ol' ? 'li' : 'div'}>`;\n            }\n            else {\n                return itemContent;\n            }\n        }).join('');\n        const wrapperClasses = wrapperClass ? ` class=\"${wrapperClass}\"` : '';\n        return `<${wrapperTag}${wrapperClasses}>${listItems}</${wrapperTag}>`;\n    }\n    /**\n     * Appends a list of items to a container element by generating HTML using a template function.\n     *\n     * @template T - The type of items in the list.\n     * @param {T[]} items - The list of items to be appended.\n     * @param {(item: T, index: number) => string} itemTemplate - A function that generates HTML for each item.\n     * @param {HTMLElement | string} container - The container element or its selector where the items will be appended.\n     * @param {string} [joinString=''] - A string used to join the generated HTML for each item.\n     * @returns {void}\n     */\n    static appendToRepeat(items, itemTemplate, container, joinString = '') {\n        const targetContainer = typeof container === \"string\" ? DathorHelpers.get(container) : container;\n        if (!targetContainer)\n            return;\n        const html = DathorHelpers.repeat(items, itemTemplate, null, joinString);\n        DathorHelpers.html(targetContainer, (targetContainer.innerHTML || '') + html);\n    }\n    /**\n     * Appends a list of items to a specified container element, wrapping each item in a specified HTML tag.\n     *\n     * @template T - The type of the items in the list.\n     * @param {T[]} items - The list of items to be appended.\n     * @param {(item: T, index: number) => string} itemTemplate - A function that returns the HTML string for each item.\n     * @param {HTMLElement | string} container - The container element or its selector where the items will be appended.\n     * @param {string} wrapperTag - The HTML tag used to wrap each item.\n     * @param {string} [wrapperClass] - Optional. The CSS class to be applied to the wrapper tag.\n     * @param {string} [itemClass] - Optional. The CSS class to be applied to each item.\n     * @returns {void}\n     */\n    static appendToWrappedList(items, itemTemplate, container, wrapperTag, wrapperClass, itemClass) {\n        const targetContainer = typeof container === \"string\" ? DathorHelpers.get(container) : container;\n        if (!targetContainer)\n            return;\n        const html = DathorHelpers.wrappedList(items, itemTemplate, wrapperTag, wrapperClass, itemClass);\n        DathorHelpers.html(targetContainer, (targetContainer.innerHTML || '') + html);\n    }\n    /**\n     * Observes changes to an object or array and triggers a callback when changes occur.\n     *\n     * @template T - The type of the data to be observed, which can be an object or an array.\n     * @param {T} data - The data to be observed.\n     * @param {(newData: T) => void} updateCallback - The callback function to be called when the data is updated.\n     * @returns {T} - A proxy object that observes changes to the original data.\n     */\n    static observe(// Allow arrays\n    data, updateCallback) {\n        const handler = {\n            set: (target, property, value) => {\n                target[property] = value;\n                updateCallback(target);\n                return true;\n            },\n        };\n        return new Proxy(data, handler);\n    }\n    /**\n     * Binds a property of a data object to the text content of an HTML element.\n     *\n     * @param data - The data object containing the property to bind.\n     * @param property - The property of the data object to bind to the element's text content.\n     * @param element - The target HTML element or a string selector to find the element.\n     * @param joinString - Optional string to join array elements if the property value is an array. Defaults to ', '.\n     *\n     * @remarks\n     * If the `element` parameter is a string, it will be used as a selector to find the target HTML element.\n     * If the property value is an array, the elements will be joined using the `joinString`.\n     * The function observes changes to the data object and updates the element's text content accordingly.\n     */\n    static bindText(data, property, element, joinString = ', ' // Optional join string for arrays\n    ) {\n        const targetElement = typeof element === \"string\" ? DathorHelpers.get(element) : element;\n        if (!targetElement)\n            return;\n        const updateText = (newData) => {\n            const value = newData[property];\n            if (Array.isArray(value)) {\n                targetElement.textContent = value.join(joinString);\n            }\n            else {\n                targetElement.textContent = value;\n            }\n        };\n        const observedData = DathorHelpers.observe(data, updateText);\n        updateText(observedData); // Initial render\n    }\n    /**\n     * Binds a property of a data object to an attribute of a DOM element.\n     *\n     * @param data - The data object containing the property to bind.\n     * @param property - The property of the data object to bind to the element's attribute.\n     * @param element - The target DOM element or a string selector to find the element.\n     * @param attribute - The attribute of the DOM element to bind the property to.\n     *\n     * @remarks\n     * This method observes changes to the specified property of the data object and updates\n     * the specified attribute of the target DOM element accordingly.\n     *\n     * @example\n     * ```typescript\n     * const data = { value: \"example\" };\n     * bindAttribute(data, \"value\", \"#myElement\", \"data-value\");\n     * ```\n     */\n    static bindAttribute(data, property, element, attribute) {\n        const targetElement = typeof element === \"string\" ? DathorHelpers.get(element) : element;\n        if (!targetElement)\n            return;\n        const updateAttribute = (newData) => {\n            targetElement.setAttribute(attribute, newData[property]);\n        };\n        const observedData = DathorHelpers.observe(data, updateAttribute);\n        updateAttribute(observedData); // Initial render\n    }\n    /**\n     * Binds a data object to a template and updates a target HTML element with the rendered template.\n     *\n     * @template T - The type of the data object.\n     * @param {T} data - The data object to bind to the template.\n     * @param {string} template - The template string containing placeholders in the format {{property}}.\n     * @param {HTMLElement | string} element - The target HTML element or a string selector for the element where the rendered template will be inserted.\n     * @param {(newData: T) => string} [updateCallback] - An optional callback function that takes the new data and returns a string. Defaults to JSON.stringify.\n     *\n     * @returns {void}\n     */\n    static bindTemplate(data, template, element, updateCallback = (data) => JSON.stringify(data)) {\n        const targetElement = typeof element === \"string\" ? DathorHelpers.get(element) : element;\n        if (!targetElement)\n            return;\n        const render = (newData) => {\n            const renderedTemplate = template.replace(/{{(.*?)}}/g, (match, prop) => {\n                return newData[prop.trim()];\n            });\n            targetElement.innerHTML = renderedTemplate;\n        };\n        const observedData = DathorHelpers.observe(data, render);\n        render(observedData); // Initial render\n    }\n    /**\n     * Observes all properties of an object, including nested objects, and triggers a callback when any property changes.\n     *\n     * @template T - The type of the object to observe.\n     * @param {T} data - The object to observe.\n     * @param {(newData: T) => void} updateCallback - The callback function to trigger when the object or any nested object changes.\n     * @returns {T} - The observed object with all properties being watched for changes.\n     */\n    static observeAll(data, updateCallback) {\n        const observedData = this.observe(data, updateCallback);\n        const observeNested = (obj) => {\n            if (typeof obj === 'object' && obj !== null) {\n                for (const key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        if (typeof obj[key] === 'object' && obj[key] !== null) {\n                            obj[key] = DathorHelpers.observe(obj[key], updateCallback);\n                            observeNested(obj[key]);\n                        }\n                    }\n                }\n            }\n        };\n        observeNested(observedData);\n        return observedData;\n    }\n}\nexports.DathorHelpers = DathorHelpers;\nexports.$D = DathorHelpers;\nexports[\"default\"] = DathorHelpers;\n\n\n//# sourceURL=webpack://dathor-helpers/./dist/helpers/all.js?");

/***/ }),

/***/ "./node_modules/unique-names-generator/dist/index.m.js":
/*!*************************************************************!*\
  !*** ./node_modules/unique-names-generator/dist/index.m.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumberDictionary: () => (/* binding */ h),\n/* harmony export */   adjectives: () => (/* binding */ l),\n/* harmony export */   animals: () => (/* binding */ r),\n/* harmony export */   colors: () => (/* binding */ t),\n/* harmony export */   countries: () => (/* binding */ o),\n/* harmony export */   languages: () => (/* binding */ s),\n/* harmony export */   names: () => (/* binding */ d),\n/* harmony export */   starWars: () => (/* binding */ y),\n/* harmony export */   uniqueNamesGenerator: () => (/* binding */ n)\n/* harmony export */ });\nconst a=a=>{a=1831565813+(a|=0)|0;let e=Math.imul(a^a>>>15,1|a);return e=e+Math.imul(e^e>>>7,61|e)^e,((e^e>>>14)>>>0)/4294967296};class e{constructor(a){this.dictionaries=void 0,this.length=void 0,this.separator=void 0,this.style=void 0,this.seed=void 0;const{length:e,separator:i,dictionaries:n,style:l,seed:r}=a;this.dictionaries=n,this.separator=i,this.length=e,this.style=l,this.seed=r}generate(){if(!this.dictionaries)throw new Error('Cannot find any dictionary. Please provide at least one, or leave the \"dictionary\" field empty in the config object');if(this.length<=0)throw new Error(\"Invalid length provided\");if(this.length>this.dictionaries.length)throw new Error(`The length cannot be bigger than the number of dictionaries.\\nLength provided: ${this.length}. Number of dictionaries provided: ${this.dictionaries.length}`);let e=this.seed;return this.dictionaries.slice(0,this.length).reduce((i,n)=>{let l;e?(l=(e=>{if(\"string\"==typeof e){const i=e.split(\"\").map(a=>a.charCodeAt(0)).reduce((a,e)=>a+e,1),n=Math.floor(Number(i));return a(n)}return a(e)})(e),e=4294967296*l):l=Math.random();let r=n[Math.floor(l*n.length)]||\"\";if(\"lowerCase\"===this.style)r=r.toLowerCase();else if(\"capital\"===this.style){const[a,...e]=r.split(\"\");r=a.toUpperCase()+e.join(\"\")}else\"upperCase\"===this.style&&(r=r.toUpperCase());return i?`${i}${this.separator}${r}`:`${r}`},\"\")}}const i={separator:\"_\",dictionaries:[]},n=a=>{const n=[...a&&a.dictionaries||i.dictionaries],l={...i,...a,length:a&&a.length||n.length,dictionaries:n};if(!a||!a.dictionaries||!a.dictionaries.length)throw new Error('A \"dictionaries\" array must be provided. This is a breaking change introduced starting from Unique Name Generator v4. Read more about the breaking change here: https://github.com/andreasonny83/unique-names-generator#migration-guide');return new e(l).generate()};var l=[\"able\",\"above\",\"absent\",\"absolute\",\"abstract\",\"abundant\",\"academic\",\"acceptable\",\"accepted\",\"accessible\",\"accurate\",\"accused\",\"active\",\"actual\",\"acute\",\"added\",\"additional\",\"adequate\",\"adjacent\",\"administrative\",\"adorable\",\"advanced\",\"adverse\",\"advisory\",\"aesthetic\",\"afraid\",\"aggregate\",\"aggressive\",\"agreeable\",\"agreed\",\"agricultural\",\"alert\",\"alive\",\"alleged\",\"allied\",\"alone\",\"alright\",\"alternative\",\"amateur\",\"amazing\",\"ambitious\",\"amused\",\"ancient\",\"angry\",\"annoyed\",\"annual\",\"anonymous\",\"anxious\",\"appalling\",\"apparent\",\"applicable\",\"appropriate\",\"arbitrary\",\"architectural\",\"armed\",\"arrogant\",\"artificial\",\"artistic\",\"ashamed\",\"asleep\",\"assistant\",\"associated\",\"atomic\",\"attractive\",\"automatic\",\"autonomous\",\"available\",\"average\",\"awake\",\"aware\",\"awful\",\"awkward\",\"back\",\"bad\",\"balanced\",\"bare\",\"basic\",\"beautiful\",\"beneficial\",\"better\",\"bewildered\",\"big\",\"binding\",\"biological\",\"bitter\",\"bizarre\",\"blank\",\"blind\",\"blonde\",\"bloody\",\"blushing\",\"boiling\",\"bold\",\"bored\",\"boring\",\"bottom\",\"brainy\",\"brave\",\"breakable\",\"breezy\",\"brief\",\"bright\",\"brilliant\",\"broad\",\"broken\",\"bumpy\",\"burning\",\"busy\",\"calm\",\"capable\",\"capitalist\",\"careful\",\"casual\",\"causal\",\"cautious\",\"central\",\"certain\",\"changing\",\"characteristic\",\"charming\",\"cheap\",\"cheerful\",\"chemical\",\"chief\",\"chilly\",\"chosen\",\"christian\",\"chronic\",\"chubby\",\"circular\",\"civic\",\"civil\",\"civilian\",\"classic\",\"classical\",\"clean\",\"clear\",\"clever\",\"clinical\",\"close\",\"closed\",\"cloudy\",\"clumsy\",\"coastal\",\"cognitive\",\"coherent\",\"cold\",\"collective\",\"colonial\",\"colorful\",\"colossal\",\"coloured\",\"colourful\",\"combative\",\"combined\",\"comfortable\",\"coming\",\"commercial\",\"common\",\"communist\",\"compact\",\"comparable\",\"comparative\",\"compatible\",\"competent\",\"competitive\",\"complete\",\"complex\",\"complicated\",\"comprehensive\",\"compulsory\",\"conceptual\",\"concerned\",\"concrete\",\"condemned\",\"confident\",\"confidential\",\"confused\",\"conscious\",\"conservation\",\"conservative\",\"considerable\",\"consistent\",\"constant\",\"constitutional\",\"contemporary\",\"content\",\"continental\",\"continued\",\"continuing\",\"continuous\",\"controlled\",\"controversial\",\"convenient\",\"conventional\",\"convinced\",\"convincing\",\"cooing\",\"cool\",\"cooperative\",\"corporate\",\"correct\",\"corresponding\",\"costly\",\"courageous\",\"crazy\",\"creative\",\"creepy\",\"criminal\",\"critical\",\"crooked\",\"crowded\",\"crucial\",\"crude\",\"cruel\",\"cuddly\",\"cultural\",\"curious\",\"curly\",\"current\",\"curved\",\"cute\",\"daily\",\"damaged\",\"damp\",\"dangerous\",\"dark\",\"dead\",\"deaf\",\"deafening\",\"dear\",\"decent\",\"decisive\",\"deep\",\"defeated\",\"defensive\",\"defiant\",\"definite\",\"deliberate\",\"delicate\",\"delicious\",\"delighted\",\"delightful\",\"democratic\",\"dependent\",\"depressed\",\"desirable\",\"desperate\",\"detailed\",\"determined\",\"developed\",\"developing\",\"devoted\",\"different\",\"difficult\",\"digital\",\"diplomatic\",\"direct\",\"dirty\",\"disabled\",\"disappointed\",\"disastrous\",\"disciplinary\",\"disgusted\",\"distant\",\"distinct\",\"distinctive\",\"distinguished\",\"disturbed\",\"disturbing\",\"diverse\",\"divine\",\"dizzy\",\"domestic\",\"dominant\",\"double\",\"doubtful\",\"drab\",\"dramatic\",\"dreadful\",\"driving\",\"drunk\",\"dry\",\"dual\",\"due\",\"dull\",\"dusty\",\"dutch\",\"dying\",\"dynamic\",\"eager\",\"early\",\"eastern\",\"easy\",\"economic\",\"educational\",\"eerie\",\"effective\",\"efficient\",\"elaborate\",\"elated\",\"elderly\",\"eldest\",\"electoral\",\"electric\",\"electrical\",\"electronic\",\"elegant\",\"eligible\",\"embarrassed\",\"embarrassing\",\"emotional\",\"empirical\",\"empty\",\"enchanting\",\"encouraging\",\"endless\",\"energetic\",\"enormous\",\"enthusiastic\",\"entire\",\"entitled\",\"envious\",\"environmental\",\"equal\",\"equivalent\",\"essential\",\"established\",\"estimated\",\"ethical\",\"ethnic\",\"eventual\",\"everyday\",\"evident\",\"evil\",\"evolutionary\",\"exact\",\"excellent\",\"exceptional\",\"excess\",\"excessive\",\"excited\",\"exciting\",\"exclusive\",\"existing\",\"exotic\",\"expected\",\"expensive\",\"experienced\",\"experimental\",\"explicit\",\"extended\",\"extensive\",\"external\",\"extra\",\"extraordinary\",\"extreme\",\"exuberant\",\"faint\",\"fair\",\"faithful\",\"familiar\",\"famous\",\"fancy\",\"fantastic\",\"far\",\"fascinating\",\"fashionable\",\"fast\",\"fat\",\"fatal\",\"favourable\",\"favourite\",\"federal\",\"fellow\",\"female\",\"feminist\",\"few\",\"fierce\",\"filthy\",\"final\",\"financial\",\"fine\",\"firm\",\"fiscal\",\"fit\",\"fixed\",\"flaky\",\"flat\",\"flexible\",\"fluffy\",\"fluttering\",\"flying\",\"following\",\"fond\",\"foolish\",\"foreign\",\"formal\",\"formidable\",\"forthcoming\",\"fortunate\",\"forward\",\"fragile\",\"frail\",\"frantic\",\"free\",\"frequent\",\"fresh\",\"friendly\",\"frightened\",\"front\",\"frozen\",\"full\",\"fun\",\"functional\",\"fundamental\",\"funny\",\"furious\",\"future\",\"fuzzy\",\"gastric\",\"gay\",\"general\",\"generous\",\"genetic\",\"gentle\",\"genuine\",\"geographical\",\"giant\",\"gigantic\",\"given\",\"glad\",\"glamorous\",\"gleaming\",\"global\",\"glorious\",\"golden\",\"good\",\"gorgeous\",\"gothic\",\"governing\",\"graceful\",\"gradual\",\"grand\",\"grateful\",\"greasy\",\"great\",\"grieving\",\"grim\",\"gross\",\"grotesque\",\"growing\",\"grubby\",\"grumpy\",\"guilty\",\"handicapped\",\"handsome\",\"happy\",\"hard\",\"harsh\",\"head\",\"healthy\",\"heavy\",\"helpful\",\"helpless\",\"hidden\",\"high\",\"hilarious\",\"hissing\",\"historic\",\"historical\",\"hollow\",\"holy\",\"homeless\",\"homely\",\"hon\",\"honest\",\"horizontal\",\"horrible\",\"hostile\",\"hot\",\"huge\",\"human\",\"hungry\",\"hurt\",\"hushed\",\"husky\",\"icy\",\"ideal\",\"identical\",\"ideological\",\"ill\",\"illegal\",\"imaginative\",\"immediate\",\"immense\",\"imperial\",\"implicit\",\"important\",\"impossible\",\"impressed\",\"impressive\",\"improved\",\"inadequate\",\"inappropriate\",\"inc\",\"inclined\",\"increased\",\"increasing\",\"incredible\",\"independent\",\"indirect\",\"individual\",\"industrial\",\"inevitable\",\"influential\",\"informal\",\"inherent\",\"initial\",\"injured\",\"inland\",\"inner\",\"innocent\",\"innovative\",\"inquisitive\",\"instant\",\"institutional\",\"insufficient\",\"intact\",\"integral\",\"integrated\",\"intellectual\",\"intelligent\",\"intense\",\"intensive\",\"interested\",\"interesting\",\"interim\",\"interior\",\"intermediate\",\"internal\",\"international\",\"intimate\",\"invisible\",\"involved\",\"irrelevant\",\"isolated\",\"itchy\",\"jealous\",\"jittery\",\"joint\",\"jolly\",\"joyous\",\"judicial\",\"juicy\",\"junior\",\"just\",\"keen\",\"key\",\"kind\",\"known\",\"labour\",\"large\",\"late\",\"latin\",\"lazy\",\"leading\",\"left\",\"legal\",\"legislative\",\"legitimate\",\"lengthy\",\"lesser\",\"level\",\"lexical\",\"liable\",\"liberal\",\"light\",\"like\",\"likely\",\"limited\",\"linear\",\"linguistic\",\"liquid\",\"literary\",\"little\",\"live\",\"lively\",\"living\",\"local\",\"logical\",\"lonely\",\"long\",\"loose\",\"lost\",\"loud\",\"lovely\",\"low\",\"loyal\",\"ltd\",\"lucky\",\"mad\",\"magic\",\"magnetic\",\"magnificent\",\"main\",\"major\",\"male\",\"mammoth\",\"managerial\",\"managing\",\"manual\",\"many\",\"marginal\",\"marine\",\"marked\",\"married\",\"marvellous\",\"marxist\",\"mass\",\"massive\",\"mathematical\",\"mature\",\"maximum\",\"mean\",\"meaningful\",\"mechanical\",\"medical\",\"medieval\",\"melodic\",\"melted\",\"mental\",\"mere\",\"metropolitan\",\"mid\",\"middle\",\"mighty\",\"mild\",\"military\",\"miniature\",\"minimal\",\"minimum\",\"ministerial\",\"minor\",\"miserable\",\"misleading\",\"missing\",\"misty\",\"mixed\",\"moaning\",\"mobile\",\"moderate\",\"modern\",\"modest\",\"molecular\",\"monetary\",\"monthly\",\"moral\",\"motionless\",\"muddy\",\"multiple\",\"mushy\",\"musical\",\"mute\",\"mutual\",\"mysterious\",\"naked\",\"narrow\",\"nasty\",\"national\",\"native\",\"natural\",\"naughty\",\"naval\",\"near\",\"nearby\",\"neat\",\"necessary\",\"negative\",\"neighbouring\",\"nervous\",\"net\",\"neutral\",\"new\",\"nice\",\"noble\",\"noisy\",\"normal\",\"northern\",\"nosy\",\"notable\",\"novel\",\"nuclear\",\"numerous\",\"nursing\",\"nutritious\",\"nutty\",\"obedient\",\"objective\",\"obliged\",\"obnoxious\",\"obvious\",\"occasional\",\"occupational\",\"odd\",\"official\",\"ok\",\"okay\",\"old\",\"olympic\",\"only\",\"open\",\"operational\",\"opposite\",\"optimistic\",\"oral\",\"ordinary\",\"organic\",\"organisational\",\"original\",\"orthodox\",\"other\",\"outdoor\",\"outer\",\"outrageous\",\"outside\",\"outstanding\",\"overall\",\"overseas\",\"overwhelming\",\"painful\",\"pale\",\"panicky\",\"parallel\",\"parental\",\"parliamentary\",\"partial\",\"particular\",\"passing\",\"passive\",\"past\",\"patient\",\"payable\",\"peaceful\",\"peculiar\",\"perfect\",\"permanent\",\"persistent\",\"personal\",\"petite\",\"philosophical\",\"physical\",\"plain\",\"planned\",\"plastic\",\"pleasant\",\"pleased\",\"poised\",\"polite\",\"political\",\"poor\",\"popular\",\"positive\",\"possible\",\"potential\",\"powerful\",\"practical\",\"precious\",\"precise\",\"preferred\",\"pregnant\",\"preliminary\",\"premier\",\"prepared\",\"present\",\"presidential\",\"pretty\",\"previous\",\"prickly\",\"primary\",\"prime\",\"primitive\",\"principal\",\"printed\",\"prior\",\"private\",\"probable\",\"productive\",\"professional\",\"profitable\",\"profound\",\"progressive\",\"prominent\",\"promising\",\"proper\",\"proposed\",\"prospective\",\"protective\",\"protestant\",\"proud\",\"provincial\",\"psychiatric\",\"psychological\",\"public\",\"puny\",\"pure\",\"purring\",\"puzzled\",\"quaint\",\"qualified\",\"quarrelsome\",\"querulous\",\"quick\",\"quickest\",\"quiet\",\"quintessential\",\"quixotic\",\"racial\",\"radical\",\"rainy\",\"random\",\"rapid\",\"rare\",\"raspy\",\"rational\",\"ratty\",\"raw\",\"ready\",\"real\",\"realistic\",\"rear\",\"reasonable\",\"recent\",\"reduced\",\"redundant\",\"regional\",\"registered\",\"regular\",\"regulatory\",\"related\",\"relative\",\"relaxed\",\"relevant\",\"reliable\",\"relieved\",\"religious\",\"reluctant\",\"remaining\",\"remarkable\",\"remote\",\"renewed\",\"representative\",\"repulsive\",\"required\",\"resident\",\"residential\",\"resonant\",\"respectable\",\"respective\",\"responsible\",\"resulting\",\"retail\",\"retired\",\"revolutionary\",\"rich\",\"ridiculous\",\"right\",\"rigid\",\"ripe\",\"rising\",\"rival\",\"roasted\",\"robust\",\"rolling\",\"romantic\",\"rotten\",\"rough\",\"round\",\"royal\",\"rubber\",\"rude\",\"ruling\",\"running\",\"rural\",\"sacred\",\"sad\",\"safe\",\"salty\",\"satisfactory\",\"satisfied\",\"scared\",\"scary\",\"scattered\",\"scientific\",\"scornful\",\"scrawny\",\"screeching\",\"secondary\",\"secret\",\"secure\",\"select\",\"selected\",\"selective\",\"selfish\",\"semantic\",\"senior\",\"sensible\",\"sensitive\",\"separate\",\"serious\",\"severe\",\"sexual\",\"shaggy\",\"shaky\",\"shallow\",\"shared\",\"sharp\",\"sheer\",\"shiny\",\"shivering\",\"shocked\",\"short\",\"shrill\",\"shy\",\"sick\",\"significant\",\"silent\",\"silky\",\"silly\",\"similar\",\"simple\",\"single\",\"skilled\",\"skinny\",\"sleepy\",\"slight\",\"slim\",\"slimy\",\"slippery\",\"slow\",\"small\",\"smart\",\"smiling\",\"smoggy\",\"smooth\",\"social\",\"socialist\",\"soft\",\"solar\",\"sole\",\"solid\",\"sophisticated\",\"sore\",\"sorry\",\"sound\",\"sour\",\"southern\",\"soviet\",\"spare\",\"sparkling\",\"spatial\",\"special\",\"specific\",\"specified\",\"spectacular\",\"spicy\",\"spiritual\",\"splendid\",\"spontaneous\",\"sporting\",\"spotless\",\"spotty\",\"square\",\"squealing\",\"stable\",\"stale\",\"standard\",\"static\",\"statistical\",\"statutory\",\"steady\",\"steep\",\"sticky\",\"stiff\",\"still\",\"stingy\",\"stormy\",\"straight\",\"straightforward\",\"strange\",\"strategic\",\"strict\",\"striking\",\"striped\",\"strong\",\"structural\",\"stuck\",\"stupid\",\"subjective\",\"subsequent\",\"substantial\",\"subtle\",\"successful\",\"successive\",\"sudden\",\"sufficient\",\"suitable\",\"sunny\",\"super\",\"superb\",\"superior\",\"supporting\",\"supposed\",\"supreme\",\"sure\",\"surprised\",\"surprising\",\"surrounding\",\"surviving\",\"suspicious\",\"sweet\",\"swift\",\"symbolic\",\"sympathetic\",\"systematic\",\"tall\",\"tame\",\"tart\",\"tasteless\",\"tasty\",\"technical\",\"technological\",\"teenage\",\"temporary\",\"tender\",\"tense\",\"terrible\",\"territorial\",\"testy\",\"then\",\"theoretical\",\"thick\",\"thin\",\"thirsty\",\"thorough\",\"thoughtful\",\"thoughtless\",\"thundering\",\"tight\",\"tiny\",\"tired\",\"top\",\"tory\",\"total\",\"tough\",\"toxic\",\"traditional\",\"tragic\",\"tremendous\",\"tricky\",\"tropical\",\"troubled\",\"typical\",\"ugliest\",\"ugly\",\"ultimate\",\"unable\",\"unacceptable\",\"unaware\",\"uncertain\",\"unchanged\",\"uncomfortable\",\"unconscious\",\"underground\",\"underlying\",\"unemployed\",\"uneven\",\"unexpected\",\"unfair\",\"unfortunate\",\"unhappy\",\"uniform\",\"uninterested\",\"unique\",\"united\",\"universal\",\"unknown\",\"unlikely\",\"unnecessary\",\"unpleasant\",\"unsightly\",\"unusual\",\"unwilling\",\"upper\",\"upset\",\"uptight\",\"urban\",\"urgent\",\"used\",\"useful\",\"useless\",\"usual\",\"vague\",\"valid\",\"valuable\",\"variable\",\"varied\",\"various\",\"varying\",\"vast\",\"verbal\",\"vertical\",\"very\",\"vicarious\",\"vicious\",\"victorious\",\"violent\",\"visible\",\"visiting\",\"visual\",\"vital\",\"vitreous\",\"vivacious\",\"vivid\",\"vocal\",\"vocational\",\"voiceless\",\"voluminous\",\"voluntary\",\"vulnerable\",\"wandering\",\"warm\",\"wasteful\",\"watery\",\"weak\",\"wealthy\",\"weary\",\"wee\",\"weekly\",\"weird\",\"welcome\",\"well\",\"western\",\"wet\",\"whispering\",\"whole\",\"wicked\",\"wide\",\"widespread\",\"wild\",\"wilful\",\"willing\",\"willowy\",\"wily\",\"wise\",\"wispy\",\"wittering\",\"witty\",\"wonderful\",\"wooden\",\"working\",\"worldwide\",\"worried\",\"worrying\",\"worthwhile\",\"worthy\",\"written\",\"wrong\",\"xenacious\",\"xenial\",\"xenogeneic\",\"xenophobic\",\"xeric\",\"xerothermic\",\"yabbering\",\"yammering\",\"yappiest\",\"yappy\",\"yawning\",\"yearling\",\"yearning\",\"yeasty\",\"yelling\",\"yelping\",\"yielding\",\"yodelling\",\"young\",\"youngest\",\"youthful\",\"ytterbic\",\"yucky\",\"yummy\",\"zany\",\"zealous\",\"zeroth\",\"zestful\",\"zesty\",\"zippy\",\"zonal\",\"zoophagous\",\"zygomorphic\",\"zygotic\"],r=[\"aardvark\",\"aardwolf\",\"albatross\",\"alligator\",\"alpaca\",\"amphibian\",\"anaconda\",\"angelfish\",\"anglerfish\",\"ant\",\"anteater\",\"antelope\",\"antlion\",\"ape\",\"aphid\",\"armadillo\",\"asp\",\"baboon\",\"badger\",\"bandicoot\",\"barnacle\",\"barracuda\",\"basilisk\",\"bass\",\"bat\",\"bear\",\"beaver\",\"bedbug\",\"bee\",\"beetle\",\"bird\",\"bison\",\"blackbird\",\"boa\",\"boar\",\"bobcat\",\"bobolink\",\"bonobo\",\"booby\",\"bovid\",\"bug\",\"butterfly\",\"buzzard\",\"camel\",\"canid\",\"canidae\",\"capybara\",\"cardinal\",\"caribou\",\"carp\",\"cat\",\"caterpillar\",\"catfish\",\"catshark\",\"cattle\",\"centipede\",\"cephalopod\",\"chameleon\",\"cheetah\",\"chickadee\",\"chicken\",\"chimpanzee\",\"chinchilla\",\"chipmunk\",\"cicada\",\"clam\",\"clownfish\",\"cobra\",\"cockroach\",\"cod\",\"condor\",\"constrictor\",\"coral\",\"cougar\",\"cow\",\"coyote\",\"crab\",\"crane\",\"crawdad\",\"crayfish\",\"cricket\",\"crocodile\",\"crow\",\"cuckoo\",\"damselfly\",\"deer\",\"dingo\",\"dinosaur\",\"dog\",\"dolphin\",\"donkey\",\"dormouse\",\"dove\",\"dragon\",\"dragonfly\",\"duck\",\"eagle\",\"earthworm\",\"earwig\",\"echidna\",\"eel\",\"egret\",\"elephant\",\"elk\",\"emu\",\"ermine\",\"falcon\",\"felidae\",\"ferret\",\"finch\",\"firefly\",\"fish\",\"flamingo\",\"flea\",\"fly\",\"flyingfish\",\"fowl\",\"fox\",\"frog\",\"galliform\",\"gamefowl\",\"gayal\",\"gazelle\",\"gecko\",\"gerbil\",\"gibbon\",\"giraffe\",\"goat\",\"goldfish\",\"goose\",\"gopher\",\"gorilla\",\"grasshopper\",\"grouse\",\"guan\",\"guanaco\",\"guineafowl\",\"gull\",\"guppy\",\"haddock\",\"halibut\",\"hamster\",\"hare\",\"harrier\",\"hawk\",\"hedgehog\",\"heron\",\"herring\",\"hippopotamus\",\"hookworm\",\"hornet\",\"horse\",\"hoverfly\",\"hummingbird\",\"hyena\",\"iguana\",\"impala\",\"jackal\",\"jaguar\",\"jay\",\"jellyfish\",\"junglefowl\",\"kangaroo\",\"kingfisher\",\"kite\",\"kiwi\",\"koala\",\"koi\",\"krill\",\"ladybug\",\"lamprey\",\"landfowl\",\"lark\",\"leech\",\"lemming\",\"lemur\",\"leopard\",\"leopon\",\"limpet\",\"lion\",\"lizard\",\"llama\",\"lobster\",\"locust\",\"loon\",\"louse\",\"lungfish\",\"lynx\",\"macaw\",\"mackerel\",\"magpie\",\"mammal\",\"manatee\",\"mandrill\",\"marlin\",\"marmoset\",\"marmot\",\"marsupial\",\"marten\",\"mastodon\",\"meadowlark\",\"meerkat\",\"mink\",\"minnow\",\"mite\",\"mockingbird\",\"mole\",\"mollusk\",\"mongoose\",\"monkey\",\"moose\",\"mosquito\",\"moth\",\"mouse\",\"mule\",\"muskox\",\"narwhal\",\"newt\",\"nightingale\",\"ocelot\",\"octopus\",\"opossum\",\"orangutan\",\"orca\",\"ostrich\",\"otter\",\"owl\",\"ox\",\"panda\",\"panther\",\"parakeet\",\"parrot\",\"parrotfish\",\"partridge\",\"peacock\",\"peafowl\",\"pelican\",\"penguin\",\"perch\",\"pheasant\",\"pig\",\"pigeon\",\"pike\",\"pinniped\",\"piranha\",\"planarian\",\"platypus\",\"pony\",\"porcupine\",\"porpoise\",\"possum\",\"prawn\",\"primate\",\"ptarmigan\",\"puffin\",\"puma\",\"python\",\"quail\",\"quelea\",\"quokka\",\"rabbit\",\"raccoon\",\"rat\",\"rattlesnake\",\"raven\",\"reindeer\",\"reptile\",\"rhinoceros\",\"roadrunner\",\"rodent\",\"rook\",\"rooster\",\"roundworm\",\"sailfish\",\"salamander\",\"salmon\",\"sawfish\",\"scallop\",\"scorpion\",\"seahorse\",\"shark\",\"sheep\",\"shrew\",\"shrimp\",\"silkworm\",\"silverfish\",\"skink\",\"skunk\",\"sloth\",\"slug\",\"smelt\",\"snail\",\"snake\",\"snipe\",\"sole\",\"sparrow\",\"spider\",\"spoonbill\",\"squid\",\"squirrel\",\"starfish\",\"stingray\",\"stoat\",\"stork\",\"sturgeon\",\"swallow\",\"swan\",\"swift\",\"swordfish\",\"swordtail\",\"tahr\",\"takin\",\"tapir\",\"tarantula\",\"tarsier\",\"termite\",\"tern\",\"thrush\",\"tick\",\"tiger\",\"tiglon\",\"toad\",\"tortoise\",\"toucan\",\"trout\",\"tuna\",\"turkey\",\"turtle\",\"tyrannosaurus\",\"unicorn\",\"urial\",\"vicuna\",\"viper\",\"vole\",\"vulture\",\"wallaby\",\"walrus\",\"warbler\",\"wasp\",\"weasel\",\"whale\",\"whippet\",\"whitefish\",\"wildcat\",\"wildebeest\",\"wildfowl\",\"wolf\",\"wolverine\",\"wombat\",\"woodpecker\",\"worm\",\"wren\",\"xerinae\",\"yak\",\"zebra\"],t=[\"amaranth\",\"amber\",\"amethyst\",\"apricot\",\"aqua\",\"aquamarine\",\"azure\",\"beige\",\"black\",\"blue\",\"blush\",\"bronze\",\"brown\",\"chocolate\",\"coffee\",\"copper\",\"coral\",\"crimson\",\"cyan\",\"emerald\",\"fuchsia\",\"gold\",\"gray\",\"green\",\"harlequin\",\"indigo\",\"ivory\",\"jade\",\"lavender\",\"lime\",\"magenta\",\"maroon\",\"moccasin\",\"olive\",\"orange\",\"peach\",\"pink\",\"plum\",\"purple\",\"red\",\"rose\",\"salmon\",\"sapphire\",\"scarlet\",\"silver\",\"tan\",\"teal\",\"tomato\",\"turquoise\",\"violet\",\"white\",\"yellow\"],o=[\"Afghanistan\",\"Åland Islands\",\"Albania\",\"Algeria\",\"American Samoa\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antarctica\",\"Antigua & Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Ascension Island\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia & Herzegovina\",\"Botswana\",\"Brazil\",\"British Indian Ocean Territory\",\"British Virgin Islands\",\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Canary Islands\",\"Cape Verde\",\"Caribbean Netherlands\",\"Cayman Islands\",\"Central African Republic\",\"Ceuta & Melilla\",\"Chad\",\"Chile\",\"China\",\"Christmas Island\",\"Cocos Islands\",\"Colombia\",\"Comoros\",\"Congo\",\"Cook Islands\",\"Costa Rica\",\"Côte d'Ivoire\",\"Croatia\",\"Cuba\",\"Curaçao\",\"Cyprus\",\"Czechia\",\"Denmark\",\"Diego Garcia\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Ethiopia\",\"Eurozone\",\"Falkland Islands\",\"Faroe Islands\",\"Fiji\",\"Finland\",\"France\",\"French Guiana\",\"French Polynesia\",\"French Southern Territories\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guadeloupe\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea-Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong SAR China\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macau SAR China\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Martinique\",\"Mauritania\",\"Mauritius\",\"Mayotte\",\"Mexico\",\"Micronesia\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nauru\",\"Nepal\",\"Netherlands\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"Niue\",\"Norfolk Island\",\"North Korea\",\"Northern Mariana Islands\",\"Norway\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestinian Territories\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Pitcairn Islands\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Qatar\",\"Réunion\",\"Romania\",\"Russia\",\"Rwanda\",\"Samoa\",\"San Marino\",\"São Tomé & Príncipe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Sint Maarten\",\"Slovakia\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"South Georgia & South Sandwich Islands\",\"South Korea\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"St. Barthélemy\",\"St. Helena\",\"St. Kitts & Nevis\",\"St. Lucia\",\"St. Martin\",\"St. Pierre & Miquelon\",\"St. Vincent & Grenadines\",\"Sudan\",\"Suriname\",\"Svalbard & Jan Mayen\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Timor-Leste\",\"Togo\",\"Tokelau\",\"Tonga\",\"Trinidad & Tobago\",\"Tristan da Cunha\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks & Caicos Islands\",\"Tuvalu\",\"U.S. Outlying Islands\",\"U.S. Virgin Islands\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\"United Nations\",\"United States\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Vatican City\",\"Venezuela\",\"Vietnam\",\"Wallis & Futuna\",\"Western Sahara\",\"Yemen\",\"Zambia\",\"Zimbabwe\"],s=[\"Akan\",\"Amharic\",\"Arabic\",\"Assamese\",\"Awadhi\",\"Azerbaijani\",\"Balochi\",\"Belarusian\",\"Bengali\",\"Bhojpuri\",\"Burmese\",\"Cebuano\",\"Chewa\",\"Chhattisgarhi\",\"Chittagonian\",\"Czech\",\"Deccan\",\"Dhundhari\",\"Dutch\",\"English\",\"French\",\"Fula\",\"Gan\",\"German\",\"Greek\",\"Gujarati\",\"Hakka\",\"Haryanvi\",\"Hausa\",\"Hiligaynon\",\"Hindi\",\"Hmong\",\"Hungarian\",\"Igbo\",\"Ilocano\",\"Italian\",\"Japanese\",\"Javanese\",\"Jin\",\"Kannada\",\"Kazakh\",\"Khmer\",\"Kinyarwanda\",\"Kirundi\",\"Konkani\",\"Korean\",\"Kurdish\",\"Madurese\",\"Magahi\",\"Maithili\",\"Malagasy\",\"Malay\",\"Malayalam\",\"Mandarin\",\"Marathi\",\"Marwari\",\"Min\",\"Mossi\",\"Nepali\",\"Odia\",\"Oromo\",\"Pashto\",\"Persian\",\"Polish\",\"Portuguese\",\"Punjabi\",\"Quechua\",\"Romanian\",\"Russian\",\"Saraiki\",\"Shona\",\"Sindhi\",\"Sinhala\",\"Somali\",\"Spanish\",\"Sundanese\",\"Swedish\",\"Sylheti\",\"Tagalog\",\"Tamil\",\"Telugu\",\"Thai\",\"Turkish\",\"Turkmen\",\"Ukrainian\",\"Urdu\",\"Uyghur\",\"Uzbek\",\"Vietnamese\",\"Wu\",\"Xhosa\",\"Xiang\",\"Yoruba\",\"Yue\",\"Zhuang\",\"Zulu\"],d=[\"Aaren\",\"Aarika\",\"Abagael\",\"Abagail\",\"Abbe\",\"Abbey\",\"Abbi\",\"Abbie\",\"Abby\",\"Abbye\",\"Abigael\",\"Abigail\",\"Abigale\",\"Abra\",\"Ada\",\"Adah\",\"Adaline\",\"Adan\",\"Adara\",\"Adda\",\"Addi\",\"Addia\",\"Addie\",\"Addy\",\"Adel\",\"Adela\",\"Adelaida\",\"Adelaide\",\"Adele\",\"Adelheid\",\"Adelice\",\"Adelina\",\"Adelind\",\"Adeline\",\"Adella\",\"Adelle\",\"Adena\",\"Adey\",\"Adi\",\"Adiana\",\"Adina\",\"Adora\",\"Adore\",\"Adoree\",\"Adorne\",\"Adrea\",\"Adria\",\"Adriaens\",\"Adrian\",\"Adriana\",\"Adriane\",\"Adrianna\",\"Adrianne\",\"Adriena\",\"Adrienne\",\"Aeriel\",\"Aeriela\",\"Aeriell\",\"Afton\",\"Ag\",\"Agace\",\"Agata\",\"Agatha\",\"Agathe\",\"Aggi\",\"Aggie\",\"Aggy\",\"Agna\",\"Agnella\",\"Agnes\",\"Agnese\",\"Agnesse\",\"Agneta\",\"Agnola\",\"Agretha\",\"Aida\",\"Aidan\",\"Aigneis\",\"Aila\",\"Aile\",\"Ailee\",\"Aileen\",\"Ailene\",\"Ailey\",\"Aili\",\"Ailina\",\"Ailis\",\"Ailsun\",\"Ailyn\",\"Aime\",\"Aimee\",\"Aimil\",\"Aindrea\",\"Ainslee\",\"Ainsley\",\"Ainslie\",\"Ajay\",\"Alaine\",\"Alameda\",\"Alana\",\"Alanah\",\"Alane\",\"Alanna\",\"Alayne\",\"Alberta\",\"Albertina\",\"Albertine\",\"Albina\",\"Alecia\",\"Aleda\",\"Aleece\",\"Aleen\",\"Alejandra\",\"Alejandrina\",\"Alena\",\"Alene\",\"Alessandra\",\"Aleta\",\"Alethea\",\"Alex\",\"Alexa\",\"Alexandra\",\"Alexandrina\",\"Alexi\",\"Alexia\",\"Alexina\",\"Alexine\",\"Alexis\",\"Alfi\",\"Alfie\",\"Alfreda\",\"Alfy\",\"Ali\",\"Alia\",\"Alica\",\"Alice\",\"Alicea\",\"Alicia\",\"Alida\",\"Alidia\",\"Alie\",\"Alika\",\"Alikee\",\"Alina\",\"Aline\",\"Alis\",\"Alisa\",\"Alisha\",\"Alison\",\"Alissa\",\"Alisun\",\"Alix\",\"Aliza\",\"Alla\",\"Alleen\",\"Allegra\",\"Allene\",\"Alli\",\"Allianora\",\"Allie\",\"Allina\",\"Allis\",\"Allison\",\"Allissa\",\"Allix\",\"Allsun\",\"Allx\",\"Ally\",\"Allyce\",\"Allyn\",\"Allys\",\"Allyson\",\"Alma\",\"Almeda\",\"Almeria\",\"Almeta\",\"Almira\",\"Almire\",\"Aloise\",\"Aloisia\",\"Aloysia\",\"Alta\",\"Althea\",\"Alvera\",\"Alverta\",\"Alvina\",\"Alvinia\",\"Alvira\",\"Alyce\",\"Alyda\",\"Alys\",\"Alysa\",\"Alyse\",\"Alysia\",\"Alyson\",\"Alyss\",\"Alyssa\",\"Amabel\",\"Amabelle\",\"Amalea\",\"Amalee\",\"Amaleta\",\"Amalia\",\"Amalie\",\"Amalita\",\"Amalle\",\"Amanda\",\"Amandi\",\"Amandie\",\"Amandy\",\"Amara\",\"Amargo\",\"Amata\",\"Amber\",\"Amberly\",\"Ambur\",\"Ame\",\"Amelia\",\"Amelie\",\"Amelina\",\"Ameline\",\"Amelita\",\"Ami\",\"Amie\",\"Amii\",\"Amil\",\"Amitie\",\"Amity\",\"Ammamaria\",\"Amy\",\"Amye\",\"Ana\",\"Anabal\",\"Anabel\",\"Anabella\",\"Anabelle\",\"Analiese\",\"Analise\",\"Anallese\",\"Anallise\",\"Anastasia\",\"Anastasie\",\"Anastassia\",\"Anatola\",\"Andee\",\"Andeee\",\"Anderea\",\"Andi\",\"Andie\",\"Andra\",\"Andrea\",\"Andreana\",\"Andree\",\"Andrei\",\"Andria\",\"Andriana\",\"Andriette\",\"Andromache\",\"Andy\",\"Anestassia\",\"Anet\",\"Anett\",\"Anetta\",\"Anette\",\"Ange\",\"Angel\",\"Angela\",\"Angele\",\"Angelia\",\"Angelica\",\"Angelika\",\"Angelina\",\"Angeline\",\"Angelique\",\"Angelita\",\"Angelle\",\"Angie\",\"Angil\",\"Angy\",\"Ania\",\"Anica\",\"Anissa\",\"Anita\",\"Anitra\",\"Anjanette\",\"Anjela\",\"Ann\",\"Ann-marie\",\"Anna\",\"Anna-diana\",\"Anna-diane\",\"Anna-maria\",\"Annabal\",\"Annabel\",\"Annabela\",\"Annabell\",\"Annabella\",\"Annabelle\",\"Annadiana\",\"Annadiane\",\"Annalee\",\"Annaliese\",\"Annalise\",\"Annamaria\",\"Annamarie\",\"Anne\",\"Anne-corinne\",\"Anne-marie\",\"Annecorinne\",\"Anneliese\",\"Annelise\",\"Annemarie\",\"Annetta\",\"Annette\",\"Anni\",\"Annice\",\"Annie\",\"Annis\",\"Annissa\",\"Annmaria\",\"Annmarie\",\"Annnora\",\"Annora\",\"Anny\",\"Anselma\",\"Ansley\",\"Anstice\",\"Anthe\",\"Anthea\",\"Anthia\",\"Anthiathia\",\"Antoinette\",\"Antonella\",\"Antonetta\",\"Antonia\",\"Antonie\",\"Antonietta\",\"Antonina\",\"Anya\",\"Appolonia\",\"April\",\"Aprilette\",\"Ara\",\"Arabel\",\"Arabela\",\"Arabele\",\"Arabella\",\"Arabelle\",\"Arda\",\"Ardath\",\"Ardeen\",\"Ardelia\",\"Ardelis\",\"Ardella\",\"Ardelle\",\"Arden\",\"Ardene\",\"Ardenia\",\"Ardine\",\"Ardis\",\"Ardisj\",\"Ardith\",\"Ardra\",\"Ardyce\",\"Ardys\",\"Ardyth\",\"Aretha\",\"Ariadne\",\"Ariana\",\"Aridatha\",\"Ariel\",\"Ariela\",\"Ariella\",\"Arielle\",\"Arlana\",\"Arlee\",\"Arleen\",\"Arlen\",\"Arlena\",\"Arlene\",\"Arleta\",\"Arlette\",\"Arleyne\",\"Arlie\",\"Arliene\",\"Arlina\",\"Arlinda\",\"Arline\",\"Arluene\",\"Arly\",\"Arlyn\",\"Arlyne\",\"Aryn\",\"Ashely\",\"Ashia\",\"Ashien\",\"Ashil\",\"Ashla\",\"Ashlan\",\"Ashlee\",\"Ashleigh\",\"Ashlen\",\"Ashley\",\"Ashli\",\"Ashlie\",\"Ashly\",\"Asia\",\"Astra\",\"Astrid\",\"Astrix\",\"Atalanta\",\"Athena\",\"Athene\",\"Atlanta\",\"Atlante\",\"Auberta\",\"Aubine\",\"Aubree\",\"Aubrette\",\"Aubrey\",\"Aubrie\",\"Aubry\",\"Audi\",\"Audie\",\"Audra\",\"Audre\",\"Audrey\",\"Audrie\",\"Audry\",\"Audrye\",\"Audy\",\"Augusta\",\"Auguste\",\"Augustina\",\"Augustine\",\"Aundrea\",\"Aura\",\"Aurea\",\"Aurel\",\"Aurelea\",\"Aurelia\",\"Aurelie\",\"Auria\",\"Aurie\",\"Aurilia\",\"Aurlie\",\"Auroora\",\"Aurora\",\"Aurore\",\"Austin\",\"Austina\",\"Austine\",\"Ava\",\"Aveline\",\"Averil\",\"Averyl\",\"Avie\",\"Avis\",\"Aviva\",\"Avivah\",\"Avril\",\"Avrit\",\"Ayn\",\"Bab\",\"Babara\",\"Babb\",\"Babbette\",\"Babbie\",\"Babette\",\"Babita\",\"Babs\",\"Bambi\",\"Bambie\",\"Bamby\",\"Barb\",\"Barbabra\",\"Barbara\",\"Barbara-anne\",\"Barbaraanne\",\"Barbe\",\"Barbee\",\"Barbette\",\"Barbey\",\"Barbi\",\"Barbie\",\"Barbra\",\"Barby\",\"Bari\",\"Barrie\",\"Barry\",\"Basia\",\"Bathsheba\",\"Batsheva\",\"Bea\",\"Beatrice\",\"Beatrisa\",\"Beatrix\",\"Beatriz\",\"Bebe\",\"Becca\",\"Becka\",\"Becki\",\"Beckie\",\"Becky\",\"Bee\",\"Beilul\",\"Beitris\",\"Bekki\",\"Bel\",\"Belia\",\"Belicia\",\"Belinda\",\"Belita\",\"Bell\",\"Bella\",\"Bellanca\",\"Belle\",\"Bellina\",\"Belva\",\"Belvia\",\"Bendite\",\"Benedetta\",\"Benedicta\",\"Benedikta\",\"Benetta\",\"Benita\",\"Benni\",\"Bennie\",\"Benny\",\"Benoite\",\"Berenice\",\"Beret\",\"Berget\",\"Berna\",\"Bernadene\",\"Bernadette\",\"Bernadina\",\"Bernadine\",\"Bernardina\",\"Bernardine\",\"Bernelle\",\"Bernete\",\"Bernetta\",\"Bernette\",\"Berni\",\"Bernice\",\"Bernie\",\"Bernita\",\"Berny\",\"Berri\",\"Berrie\",\"Berry\",\"Bert\",\"Berta\",\"Berte\",\"Bertha\",\"Berthe\",\"Berti\",\"Bertie\",\"Bertina\",\"Bertine\",\"Berty\",\"Beryl\",\"Beryle\",\"Bess\",\"Bessie\",\"Bessy\",\"Beth\",\"Bethanne\",\"Bethany\",\"Bethena\",\"Bethina\",\"Betsey\",\"Betsy\",\"Betta\",\"Bette\",\"Bette-ann\",\"Betteann\",\"Betteanne\",\"Betti\",\"Bettina\",\"Bettine\",\"Betty\",\"Bettye\",\"Beulah\",\"Bev\",\"Beverie\",\"Beverlee\",\"Beverley\",\"Beverlie\",\"Beverly\",\"Bevvy\",\"Bianca\",\"Bianka\",\"Bibbie\",\"Bibby\",\"Bibbye\",\"Bibi\",\"Biddie\",\"Biddy\",\"Bidget\",\"Bili\",\"Bill\",\"Billi\",\"Billie\",\"Billy\",\"Billye\",\"Binni\",\"Binnie\",\"Binny\",\"Bird\",\"Birdie\",\"Birgit\",\"Birgitta\",\"Blair\",\"Blaire\",\"Blake\",\"Blakelee\",\"Blakeley\",\"Blanca\",\"Blanch\",\"Blancha\",\"Blanche\",\"Blinni\",\"Blinnie\",\"Blinny\",\"Bliss\",\"Blisse\",\"Blithe\",\"Blondell\",\"Blondelle\",\"Blondie\",\"Blondy\",\"Blythe\",\"Bobbe\",\"Bobbee\",\"Bobbette\",\"Bobbi\",\"Bobbie\",\"Bobby\",\"Bobbye\",\"Bobette\",\"Bobina\",\"Bobine\",\"Bobinette\",\"Bonita\",\"Bonnee\",\"Bonni\",\"Bonnibelle\",\"Bonnie\",\"Bonny\",\"Brana\",\"Brandais\",\"Brande\",\"Brandea\",\"Brandi\",\"Brandice\",\"Brandie\",\"Brandise\",\"Brandy\",\"Breanne\",\"Brear\",\"Bree\",\"Breena\",\"Bren\",\"Brena\",\"Brenda\",\"Brenn\",\"Brenna\",\"Brett\",\"Bria\",\"Briana\",\"Brianna\",\"Brianne\",\"Bride\",\"Bridget\",\"Bridgette\",\"Bridie\",\"Brier\",\"Brietta\",\"Brigid\",\"Brigida\",\"Brigit\",\"Brigitta\",\"Brigitte\",\"Brina\",\"Briney\",\"Brinn\",\"Brinna\",\"Briny\",\"Brit\",\"Brita\",\"Britney\",\"Britni\",\"Britt\",\"Britta\",\"Brittan\",\"Brittaney\",\"Brittani\",\"Brittany\",\"Britte\",\"Britteny\",\"Brittne\",\"Brittney\",\"Brittni\",\"Brook\",\"Brooke\",\"Brooks\",\"Brunhilda\",\"Brunhilde\",\"Bryana\",\"Bryn\",\"Bryna\",\"Brynn\",\"Brynna\",\"Brynne\",\"Buffy\",\"Bunni\",\"Bunnie\",\"Bunny\",\"Cacilia\",\"Cacilie\",\"Cahra\",\"Cairistiona\",\"Caitlin\",\"Caitrin\",\"Cal\",\"Calida\",\"Calla\",\"Calley\",\"Calli\",\"Callida\",\"Callie\",\"Cally\",\"Calypso\",\"Cam\",\"Camala\",\"Camel\",\"Camella\",\"Camellia\",\"Cami\",\"Camila\",\"Camile\",\"Camilla\",\"Camille\",\"Cammi\",\"Cammie\",\"Cammy\",\"Candace\",\"Candi\",\"Candice\",\"Candida\",\"Candide\",\"Candie\",\"Candis\",\"Candra\",\"Candy\",\"Caprice\",\"Cara\",\"Caralie\",\"Caren\",\"Carena\",\"Caresa\",\"Caressa\",\"Caresse\",\"Carey\",\"Cari\",\"Caria\",\"Carie\",\"Caril\",\"Carilyn\",\"Carin\",\"Carina\",\"Carine\",\"Cariotta\",\"Carissa\",\"Carita\",\"Caritta\",\"Carla\",\"Carlee\",\"Carleen\",\"Carlen\",\"Carlene\",\"Carley\",\"Carlie\",\"Carlin\",\"Carlina\",\"Carline\",\"Carlita\",\"Carlota\",\"Carlotta\",\"Carly\",\"Carlye\",\"Carlyn\",\"Carlynn\",\"Carlynne\",\"Carma\",\"Carmel\",\"Carmela\",\"Carmelia\",\"Carmelina\",\"Carmelita\",\"Carmella\",\"Carmelle\",\"Carmen\",\"Carmencita\",\"Carmina\",\"Carmine\",\"Carmita\",\"Carmon\",\"Caro\",\"Carol\",\"Carol-jean\",\"Carola\",\"Carolan\",\"Carolann\",\"Carole\",\"Carolee\",\"Carolin\",\"Carolina\",\"Caroline\",\"Caroljean\",\"Carolyn\",\"Carolyne\",\"Carolynn\",\"Caron\",\"Carree\",\"Carri\",\"Carrie\",\"Carrissa\",\"Carroll\",\"Carry\",\"Cary\",\"Caryl\",\"Caryn\",\"Casandra\",\"Casey\",\"Casi\",\"Casie\",\"Cass\",\"Cassandra\",\"Cassandre\",\"Cassandry\",\"Cassaundra\",\"Cassey\",\"Cassi\",\"Cassie\",\"Cassondra\",\"Cassy\",\"Catarina\",\"Cate\",\"Caterina\",\"Catha\",\"Catharina\",\"Catharine\",\"Cathe\",\"Cathee\",\"Catherin\",\"Catherina\",\"Catherine\",\"Cathi\",\"Cathie\",\"Cathleen\",\"Cathlene\",\"Cathrin\",\"Cathrine\",\"Cathryn\",\"Cathy\",\"Cathyleen\",\"Cati\",\"Catie\",\"Catina\",\"Catlaina\",\"Catlee\",\"Catlin\",\"Catrina\",\"Catriona\",\"Caty\",\"Caye\",\"Cayla\",\"Cecelia\",\"Cecil\",\"Cecile\",\"Ceciley\",\"Cecilia\",\"Cecilla\",\"Cecily\",\"Ceil\",\"Cele\",\"Celene\",\"Celesta\",\"Celeste\",\"Celestia\",\"Celestina\",\"Celestine\",\"Celestyn\",\"Celestyna\",\"Celia\",\"Celie\",\"Celina\",\"Celinda\",\"Celine\",\"Celinka\",\"Celisse\",\"Celka\",\"Celle\",\"Cesya\",\"Chad\",\"Chanda\",\"Chandal\",\"Chandra\",\"Channa\",\"Chantal\",\"Chantalle\",\"Charil\",\"Charin\",\"Charis\",\"Charissa\",\"Charisse\",\"Charita\",\"Charity\",\"Charla\",\"Charlean\",\"Charleen\",\"Charlena\",\"Charlene\",\"Charline\",\"Charlot\",\"Charlotta\",\"Charlotte\",\"Charmain\",\"Charmaine\",\"Charmane\",\"Charmian\",\"Charmine\",\"Charmion\",\"Charo\",\"Charyl\",\"Chastity\",\"Chelsae\",\"Chelsea\",\"Chelsey\",\"Chelsie\",\"Chelsy\",\"Cher\",\"Chere\",\"Cherey\",\"Cheri\",\"Cherianne\",\"Cherice\",\"Cherida\",\"Cherie\",\"Cherilyn\",\"Cherilynn\",\"Cherin\",\"Cherise\",\"Cherish\",\"Cherlyn\",\"Cherri\",\"Cherrita\",\"Cherry\",\"Chery\",\"Cherye\",\"Cheryl\",\"Cheslie\",\"Chiarra\",\"Chickie\",\"Chicky\",\"Chiquia\",\"Chiquita\",\"Chlo\",\"Chloe\",\"Chloette\",\"Chloris\",\"Chris\",\"Chrissie\",\"Chrissy\",\"Christa\",\"Christabel\",\"Christabella\",\"Christal\",\"Christalle\",\"Christan\",\"Christean\",\"Christel\",\"Christen\",\"Christi\",\"Christian\",\"Christiana\",\"Christiane\",\"Christie\",\"Christin\",\"Christina\",\"Christine\",\"Christy\",\"Christye\",\"Christyna\",\"Chrysa\",\"Chrysler\",\"Chrystal\",\"Chryste\",\"Chrystel\",\"Cicely\",\"Cicily\",\"Ciel\",\"Cilka\",\"Cinda\",\"Cindee\",\"Cindelyn\",\"Cinderella\",\"Cindi\",\"Cindie\",\"Cindra\",\"Cindy\",\"Cinnamon\",\"Cissiee\",\"Cissy\",\"Clair\",\"Claire\",\"Clara\",\"Clarabelle\",\"Clare\",\"Claresta\",\"Clareta\",\"Claretta\",\"Clarette\",\"Clarey\",\"Clari\",\"Claribel\",\"Clarice\",\"Clarie\",\"Clarinda\",\"Clarine\",\"Clarissa\",\"Clarisse\",\"Clarita\",\"Clary\",\"Claude\",\"Claudelle\",\"Claudetta\",\"Claudette\",\"Claudia\",\"Claudie\",\"Claudina\",\"Claudine\",\"Clea\",\"Clem\",\"Clemence\",\"Clementia\",\"Clementina\",\"Clementine\",\"Clemmie\",\"Clemmy\",\"Cleo\",\"Cleopatra\",\"Clerissa\",\"Clio\",\"Clo\",\"Cloe\",\"Cloris\",\"Clotilda\",\"Clovis\",\"Codee\",\"Codi\",\"Codie\",\"Cody\",\"Coleen\",\"Colene\",\"Coletta\",\"Colette\",\"Colleen\",\"Collen\",\"Collete\",\"Collette\",\"Collie\",\"Colline\",\"Colly\",\"Con\",\"Concettina\",\"Conchita\",\"Concordia\",\"Conni\",\"Connie\",\"Conny\",\"Consolata\",\"Constance\",\"Constancia\",\"Constancy\",\"Constanta\",\"Constantia\",\"Constantina\",\"Constantine\",\"Consuela\",\"Consuelo\",\"Cookie\",\"Cora\",\"Corabel\",\"Corabella\",\"Corabelle\",\"Coral\",\"Coralie\",\"Coraline\",\"Coralyn\",\"Cordelia\",\"Cordelie\",\"Cordey\",\"Cordi\",\"Cordie\",\"Cordula\",\"Cordy\",\"Coreen\",\"Corella\",\"Corenda\",\"Corene\",\"Coretta\",\"Corette\",\"Corey\",\"Cori\",\"Corie\",\"Corilla\",\"Corina\",\"Corine\",\"Corinna\",\"Corinne\",\"Coriss\",\"Corissa\",\"Corliss\",\"Corly\",\"Cornela\",\"Cornelia\",\"Cornelle\",\"Cornie\",\"Corny\",\"Correna\",\"Correy\",\"Corri\",\"Corrianne\",\"Corrie\",\"Corrina\",\"Corrine\",\"Corrinne\",\"Corry\",\"Cortney\",\"Cory\",\"Cosetta\",\"Cosette\",\"Costanza\",\"Courtenay\",\"Courtnay\",\"Courtney\",\"Crin\",\"Cris\",\"Crissie\",\"Crissy\",\"Crista\",\"Cristabel\",\"Cristal\",\"Cristen\",\"Cristi\",\"Cristie\",\"Cristin\",\"Cristina\",\"Cristine\",\"Cristionna\",\"Cristy\",\"Crysta\",\"Crystal\",\"Crystie\",\"Cthrine\",\"Cyb\",\"Cybil\",\"Cybill\",\"Cymbre\",\"Cynde\",\"Cyndi\",\"Cyndia\",\"Cyndie\",\"Cyndy\",\"Cynthea\",\"Cynthia\",\"Cynthie\",\"Cynthy\",\"Dacey\",\"Dacia\",\"Dacie\",\"Dacy\",\"Dael\",\"Daffi\",\"Daffie\",\"Daffy\",\"Dagmar\",\"Dahlia\",\"Daile\",\"Daisey\",\"Daisi\",\"Daisie\",\"Daisy\",\"Dale\",\"Dalenna\",\"Dalia\",\"Dalila\",\"Dallas\",\"Daloris\",\"Damara\",\"Damaris\",\"Damita\",\"Dana\",\"Danell\",\"Danella\",\"Danette\",\"Dani\",\"Dania\",\"Danica\",\"Danice\",\"Daniela\",\"Daniele\",\"Daniella\",\"Danielle\",\"Danika\",\"Danila\",\"Danit\",\"Danita\",\"Danna\",\"Danni\",\"Dannie\",\"Danny\",\"Dannye\",\"Danya\",\"Danyelle\",\"Danyette\",\"Daphene\",\"Daphna\",\"Daphne\",\"Dara\",\"Darb\",\"Darbie\",\"Darby\",\"Darcee\",\"Darcey\",\"Darci\",\"Darcie\",\"Darcy\",\"Darda\",\"Dareen\",\"Darell\",\"Darelle\",\"Dari\",\"Daria\",\"Darice\",\"Darla\",\"Darleen\",\"Darlene\",\"Darline\",\"Darlleen\",\"Daron\",\"Darrelle\",\"Darryl\",\"Darsey\",\"Darsie\",\"Darya\",\"Daryl\",\"Daryn\",\"Dasha\",\"Dasi\",\"Dasie\",\"Dasya\",\"Datha\",\"Daune\",\"Daveen\",\"Daveta\",\"Davida\",\"Davina\",\"Davine\",\"Davita\",\"Dawn\",\"Dawna\",\"Dayle\",\"Dayna\",\"Ddene\",\"De\",\"Deana\",\"Deane\",\"Deanna\",\"Deanne\",\"Deb\",\"Debbi\",\"Debbie\",\"Debby\",\"Debee\",\"Debera\",\"Debi\",\"Debor\",\"Debora\",\"Deborah\",\"Debra\",\"Dede\",\"Dedie\",\"Dedra\",\"Dee\",\"Deeann\",\"Deeanne\",\"Deedee\",\"Deena\",\"Deerdre\",\"Deeyn\",\"Dehlia\",\"Deidre\",\"Deina\",\"Deirdre\",\"Del\",\"Dela\",\"Delcina\",\"Delcine\",\"Delia\",\"Delila\",\"Delilah\",\"Delinda\",\"Dell\",\"Della\",\"Delly\",\"Delora\",\"Delores\",\"Deloria\",\"Deloris\",\"Delphine\",\"Delphinia\",\"Demeter\",\"Demetra\",\"Demetria\",\"Demetris\",\"Dena\",\"Deni\",\"Denice\",\"Denise\",\"Denna\",\"Denni\",\"Dennie\",\"Denny\",\"Deny\",\"Denys\",\"Denyse\",\"Deonne\",\"Desdemona\",\"Desirae\",\"Desiree\",\"Desiri\",\"Deva\",\"Devan\",\"Devi\",\"Devin\",\"Devina\",\"Devinne\",\"Devon\",\"Devondra\",\"Devonna\",\"Devonne\",\"Devora\",\"Di\",\"Diahann\",\"Dian\",\"Diana\",\"Diandra\",\"Diane\",\"Diane-marie\",\"Dianemarie\",\"Diann\",\"Dianna\",\"Dianne\",\"Diannne\",\"Didi\",\"Dido\",\"Diena\",\"Dierdre\",\"Dina\",\"Dinah\",\"Dinnie\",\"Dinny\",\"Dion\",\"Dione\",\"Dionis\",\"Dionne\",\"Dita\",\"Dix\",\"Dixie\",\"Dniren\",\"Dode\",\"Dodi\",\"Dodie\",\"Dody\",\"Doe\",\"Doll\",\"Dolley\",\"Dolli\",\"Dollie\",\"Dolly\",\"Dolores\",\"Dolorita\",\"Doloritas\",\"Domeniga\",\"Dominga\",\"Domini\",\"Dominica\",\"Dominique\",\"Dona\",\"Donella\",\"Donelle\",\"Donetta\",\"Donia\",\"Donica\",\"Donielle\",\"Donna\",\"Donnamarie\",\"Donni\",\"Donnie\",\"Donny\",\"Dora\",\"Doralia\",\"Doralin\",\"Doralyn\",\"Doralynn\",\"Doralynne\",\"Dore\",\"Doreen\",\"Dorelia\",\"Dorella\",\"Dorelle\",\"Dorena\",\"Dorene\",\"Doretta\",\"Dorette\",\"Dorey\",\"Dori\",\"Doria\",\"Dorian\",\"Dorice\",\"Dorie\",\"Dorine\",\"Doris\",\"Dorisa\",\"Dorise\",\"Dorita\",\"Doro\",\"Dorolice\",\"Dorolisa\",\"Dorotea\",\"Doroteya\",\"Dorothea\",\"Dorothee\",\"Dorothy\",\"Dorree\",\"Dorri\",\"Dorrie\",\"Dorris\",\"Dorry\",\"Dorthea\",\"Dorthy\",\"Dory\",\"Dosi\",\"Dot\",\"Doti\",\"Dotti\",\"Dottie\",\"Dotty\",\"Dre\",\"Dreddy\",\"Dredi\",\"Drona\",\"Dru\",\"Druci\",\"Drucie\",\"Drucill\",\"Drucy\",\"Drusi\",\"Drusie\",\"Drusilla\",\"Drusy\",\"Dulce\",\"Dulcea\",\"Dulci\",\"Dulcia\",\"Dulciana\",\"Dulcie\",\"Dulcine\",\"Dulcinea\",\"Dulcy\",\"Dulsea\",\"Dusty\",\"Dyan\",\"Dyana\",\"Dyane\",\"Dyann\",\"Dyanna\",\"Dyanne\",\"Dyna\",\"Dynah\",\"Eachelle\",\"Eada\",\"Eadie\",\"Eadith\",\"Ealasaid\",\"Eartha\",\"Easter\",\"Eba\",\"Ebba\",\"Ebonee\",\"Ebony\",\"Eda\",\"Eddi\",\"Eddie\",\"Eddy\",\"Ede\",\"Edee\",\"Edeline\",\"Eden\",\"Edi\",\"Edie\",\"Edin\",\"Edita\",\"Edith\",\"Editha\",\"Edithe\",\"Ediva\",\"Edna\",\"Edwina\",\"Edy\",\"Edyth\",\"Edythe\",\"Effie\",\"Eileen\",\"Eilis\",\"Eimile\",\"Eirena\",\"Ekaterina\",\"Elaina\",\"Elaine\",\"Elana\",\"Elane\",\"Elayne\",\"Elberta\",\"Elbertina\",\"Elbertine\",\"Eleanor\",\"Eleanora\",\"Eleanore\",\"Electra\",\"Eleen\",\"Elena\",\"Elene\",\"Eleni\",\"Elenore\",\"Eleonora\",\"Eleonore\",\"Elfie\",\"Elfreda\",\"Elfrida\",\"Elfrieda\",\"Elga\",\"Elianora\",\"Elianore\",\"Elicia\",\"Elie\",\"Elinor\",\"Elinore\",\"Elisa\",\"Elisabet\",\"Elisabeth\",\"Elisabetta\",\"Elise\",\"Elisha\",\"Elissa\",\"Elita\",\"Eliza\",\"Elizabet\",\"Elizabeth\",\"Elka\",\"Elke\",\"Ella\",\"Elladine\",\"Elle\",\"Ellen\",\"Ellene\",\"Ellette\",\"Elli\",\"Ellie\",\"Ellissa\",\"Elly\",\"Ellyn\",\"Ellynn\",\"Elmira\",\"Elna\",\"Elnora\",\"Elnore\",\"Eloisa\",\"Eloise\",\"Elonore\",\"Elora\",\"Elsa\",\"Elsbeth\",\"Else\",\"Elset\",\"Elsey\",\"Elsi\",\"Elsie\",\"Elsinore\",\"Elspeth\",\"Elsy\",\"Elva\",\"Elvera\",\"Elvina\",\"Elvira\",\"Elwira\",\"Elyn\",\"Elyse\",\"Elysee\",\"Elysha\",\"Elysia\",\"Elyssa\",\"Em\",\"Ema\",\"Emalee\",\"Emalia\",\"Emelda\",\"Emelia\",\"Emelina\",\"Emeline\",\"Emelita\",\"Emelyne\",\"Emera\",\"Emilee\",\"Emili\",\"Emilia\",\"Emilie\",\"Emiline\",\"Emily\",\"Emlyn\",\"Emlynn\",\"Emlynne\",\"Emma\",\"Emmalee\",\"Emmaline\",\"Emmalyn\",\"Emmalynn\",\"Emmalynne\",\"Emmeline\",\"Emmey\",\"Emmi\",\"Emmie\",\"Emmy\",\"Emmye\",\"Emogene\",\"Emyle\",\"Emylee\",\"Engracia\",\"Enid\",\"Enrica\",\"Enrichetta\",\"Enrika\",\"Enriqueta\",\"Eolanda\",\"Eolande\",\"Eran\",\"Erda\",\"Erena\",\"Erica\",\"Ericha\",\"Ericka\",\"Erika\",\"Erin\",\"Erina\",\"Erinn\",\"Erinna\",\"Erma\",\"Ermengarde\",\"Ermentrude\",\"Ermina\",\"Erminia\",\"Erminie\",\"Erna\",\"Ernaline\",\"Ernesta\",\"Ernestine\",\"Ertha\",\"Eryn\",\"Esma\",\"Esmaria\",\"Esme\",\"Esmeralda\",\"Essa\",\"Essie\",\"Essy\",\"Esta\",\"Estel\",\"Estele\",\"Estell\",\"Estella\",\"Estelle\",\"Ester\",\"Esther\",\"Estrella\",\"Estrellita\",\"Ethel\",\"Ethelda\",\"Ethelin\",\"Ethelind\",\"Etheline\",\"Ethelyn\",\"Ethyl\",\"Etta\",\"Etti\",\"Ettie\",\"Etty\",\"Eudora\",\"Eugenia\",\"Eugenie\",\"Eugine\",\"Eula\",\"Eulalie\",\"Eunice\",\"Euphemia\",\"Eustacia\",\"Eva\",\"Evaleen\",\"Evangelia\",\"Evangelin\",\"Evangelina\",\"Evangeline\",\"Evania\",\"Evanne\",\"Eve\",\"Eveleen\",\"Evelina\",\"Eveline\",\"Evelyn\",\"Evey\",\"Evie\",\"Evita\",\"Evonne\",\"Evvie\",\"Evvy\",\"Evy\",\"Eyde\",\"Eydie\",\"Ezmeralda\",\"Fae\",\"Faina\",\"Faith\",\"Fallon\",\"Fan\",\"Fanchette\",\"Fanchon\",\"Fancie\",\"Fancy\",\"Fanechka\",\"Fania\",\"Fanni\",\"Fannie\",\"Fanny\",\"Fanya\",\"Fara\",\"Farah\",\"Farand\",\"Farica\",\"Farra\",\"Farrah\",\"Farrand\",\"Faun\",\"Faunie\",\"Faustina\",\"Faustine\",\"Fawn\",\"Fawne\",\"Fawnia\",\"Fay\",\"Faydra\",\"Faye\",\"Fayette\",\"Fayina\",\"Fayre\",\"Fayth\",\"Faythe\",\"Federica\",\"Fedora\",\"Felecia\",\"Felicdad\",\"Felice\",\"Felicia\",\"Felicity\",\"Felicle\",\"Felipa\",\"Felisha\",\"Felita\",\"Feliza\",\"Fenelia\",\"Feodora\",\"Ferdinanda\",\"Ferdinande\",\"Fern\",\"Fernanda\",\"Fernande\",\"Fernandina\",\"Ferne\",\"Fey\",\"Fiann\",\"Fianna\",\"Fidela\",\"Fidelia\",\"Fidelity\",\"Fifi\",\"Fifine\",\"Filia\",\"Filide\",\"Filippa\",\"Fina\",\"Fiona\",\"Fionna\",\"Fionnula\",\"Fiorenze\",\"Fleur\",\"Fleurette\",\"Flo\",\"Flor\",\"Flora\",\"Florance\",\"Flore\",\"Florella\",\"Florence\",\"Florencia\",\"Florentia\",\"Florenza\",\"Florette\",\"Flori\",\"Floria\",\"Florida\",\"Florie\",\"Florina\",\"Florinda\",\"Floris\",\"Florri\",\"Florrie\",\"Florry\",\"Flory\",\"Flossi\",\"Flossie\",\"Flossy\",\"Flss\",\"Fran\",\"Francene\",\"Frances\",\"Francesca\",\"Francine\",\"Francisca\",\"Franciska\",\"Francoise\",\"Francyne\",\"Frank\",\"Frankie\",\"Franky\",\"Franni\",\"Frannie\",\"Franny\",\"Frayda\",\"Fred\",\"Freda\",\"Freddi\",\"Freddie\",\"Freddy\",\"Fredelia\",\"Frederica\",\"Fredericka\",\"Frederique\",\"Fredi\",\"Fredia\",\"Fredra\",\"Fredrika\",\"Freida\",\"Frieda\",\"Friederike\",\"Fulvia\",\"Gabbey\",\"Gabbi\",\"Gabbie\",\"Gabey\",\"Gabi\",\"Gabie\",\"Gabriel\",\"Gabriela\",\"Gabriell\",\"Gabriella\",\"Gabrielle\",\"Gabriellia\",\"Gabrila\",\"Gaby\",\"Gae\",\"Gael\",\"Gail\",\"Gale\",\"Galina\",\"Garland\",\"Garnet\",\"Garnette\",\"Gates\",\"Gavra\",\"Gavrielle\",\"Gay\",\"Gaye\",\"Gayel\",\"Gayla\",\"Gayle\",\"Gayleen\",\"Gaylene\",\"Gaynor\",\"Gelya\",\"Gena\",\"Gene\",\"Geneva\",\"Genevieve\",\"Genevra\",\"Genia\",\"Genna\",\"Genni\",\"Gennie\",\"Gennifer\",\"Genny\",\"Genovera\",\"Genvieve\",\"George\",\"Georgeanna\",\"Georgeanne\",\"Georgena\",\"Georgeta\",\"Georgetta\",\"Georgette\",\"Georgia\",\"Georgiana\",\"Georgianna\",\"Georgianne\",\"Georgie\",\"Georgina\",\"Georgine\",\"Geralda\",\"Geraldine\",\"Gerda\",\"Gerhardine\",\"Geri\",\"Gerianna\",\"Gerianne\",\"Gerladina\",\"Germain\",\"Germaine\",\"Germana\",\"Gerri\",\"Gerrie\",\"Gerrilee\",\"Gerry\",\"Gert\",\"Gerta\",\"Gerti\",\"Gertie\",\"Gertrud\",\"Gertruda\",\"Gertrude\",\"Gertrudis\",\"Gerty\",\"Giacinta\",\"Giana\",\"Gianina\",\"Gianna\",\"Gigi\",\"Gilberta\",\"Gilberte\",\"Gilbertina\",\"Gilbertine\",\"Gilda\",\"Gilemette\",\"Gill\",\"Gillan\",\"Gilli\",\"Gillian\",\"Gillie\",\"Gilligan\",\"Gilly\",\"Gina\",\"Ginelle\",\"Ginevra\",\"Ginger\",\"Ginni\",\"Ginnie\",\"Ginnifer\",\"Ginny\",\"Giorgia\",\"Giovanna\",\"Gipsy\",\"Giralda\",\"Gisela\",\"Gisele\",\"Gisella\",\"Giselle\",\"Giuditta\",\"Giulia\",\"Giulietta\",\"Giustina\",\"Gizela\",\"Glad\",\"Gladi\",\"Gladys\",\"Gleda\",\"Glen\",\"Glenda\",\"Glenine\",\"Glenn\",\"Glenna\",\"Glennie\",\"Glennis\",\"Glori\",\"Gloria\",\"Gloriana\",\"Gloriane\",\"Glory\",\"Glyn\",\"Glynda\",\"Glynis\",\"Glynnis\",\"Gnni\",\"Godiva\",\"Golda\",\"Goldarina\",\"Goldi\",\"Goldia\",\"Goldie\",\"Goldina\",\"Goldy\",\"Grace\",\"Gracia\",\"Gracie\",\"Grata\",\"Gratia\",\"Gratiana\",\"Gray\",\"Grayce\",\"Grazia\",\"Greer\",\"Greta\",\"Gretal\",\"Gretchen\",\"Grete\",\"Gretel\",\"Grethel\",\"Gretna\",\"Gretta\",\"Grier\",\"Griselda\",\"Grissel\",\"Guendolen\",\"Guenevere\",\"Guenna\",\"Guglielma\",\"Gui\",\"Guillema\",\"Guillemette\",\"Guinevere\",\"Guinna\",\"Gunilla\",\"Gus\",\"Gusella\",\"Gussi\",\"Gussie\",\"Gussy\",\"Gusta\",\"Gusti\",\"Gustie\",\"Gusty\",\"Gwen\",\"Gwendolen\",\"Gwendolin\",\"Gwendolyn\",\"Gweneth\",\"Gwenette\",\"Gwenneth\",\"Gwenni\",\"Gwennie\",\"Gwenny\",\"Gwenora\",\"Gwenore\",\"Gwyn\",\"Gwyneth\",\"Gwynne\",\"Gypsy\",\"Hadria\",\"Hailee\",\"Haily\",\"Haleigh\",\"Halette\",\"Haley\",\"Hali\",\"Halie\",\"Halimeda\",\"Halley\",\"Halli\",\"Hallie\",\"Hally\",\"Hana\",\"Hanna\",\"Hannah\",\"Hanni\",\"Hannie\",\"Hannis\",\"Hanny\",\"Happy\",\"Harlene\",\"Harley\",\"Harli\",\"Harlie\",\"Harmonia\",\"Harmonie\",\"Harmony\",\"Harri\",\"Harrie\",\"Harriet\",\"Harriett\",\"Harrietta\",\"Harriette\",\"Harriot\",\"Harriott\",\"Hatti\",\"Hattie\",\"Hatty\",\"Hayley\",\"Hazel\",\"Heath\",\"Heather\",\"Heda\",\"Hedda\",\"Heddi\",\"Heddie\",\"Hedi\",\"Hedvig\",\"Hedvige\",\"Hedwig\",\"Hedwiga\",\"Hedy\",\"Heida\",\"Heidi\",\"Heidie\",\"Helaina\",\"Helaine\",\"Helen\",\"Helen-elizabeth\",\"Helena\",\"Helene\",\"Helenka\",\"Helga\",\"Helge\",\"Helli\",\"Heloise\",\"Helsa\",\"Helyn\",\"Hendrika\",\"Henka\",\"Henrie\",\"Henrieta\",\"Henrietta\",\"Henriette\",\"Henryetta\",\"Hephzibah\",\"Hermia\",\"Hermina\",\"Hermine\",\"Herminia\",\"Hermione\",\"Herta\",\"Hertha\",\"Hester\",\"Hesther\",\"Hestia\",\"Hetti\",\"Hettie\",\"Hetty\",\"Hilary\",\"Hilda\",\"Hildagard\",\"Hildagarde\",\"Hilde\",\"Hildegaard\",\"Hildegarde\",\"Hildy\",\"Hillary\",\"Hilliary\",\"Hinda\",\"Holli\",\"Hollie\",\"Holly\",\"Holly-anne\",\"Hollyanne\",\"Honey\",\"Honor\",\"Honoria\",\"Hope\",\"Horatia\",\"Hortense\",\"Hortensia\",\"Hulda\",\"Hyacinth\",\"Hyacintha\",\"Hyacinthe\",\"Hyacinthia\",\"Hyacinthie\",\"Hynda\",\"Ianthe\",\"Ibbie\",\"Ibby\",\"Ida\",\"Idalia\",\"Idalina\",\"Idaline\",\"Idell\",\"Idelle\",\"Idette\",\"Ileana\",\"Ileane\",\"Ilene\",\"Ilise\",\"Ilka\",\"Illa\",\"Ilsa\",\"Ilse\",\"Ilysa\",\"Ilyse\",\"Ilyssa\",\"Imelda\",\"Imogen\",\"Imogene\",\"Imojean\",\"Ina\",\"Indira\",\"Ines\",\"Inesita\",\"Inessa\",\"Inez\",\"Inga\",\"Ingaberg\",\"Ingaborg\",\"Inge\",\"Ingeberg\",\"Ingeborg\",\"Inger\",\"Ingrid\",\"Ingunna\",\"Inna\",\"Iolande\",\"Iolanthe\",\"Iona\",\"Iormina\",\"Ira\",\"Irena\",\"Irene\",\"Irina\",\"Iris\",\"Irita\",\"Irma\",\"Isa\",\"Isabel\",\"Isabelita\",\"Isabella\",\"Isabelle\",\"Isadora\",\"Isahella\",\"Iseabal\",\"Isidora\",\"Isis\",\"Isobel\",\"Issi\",\"Issie\",\"Issy\",\"Ivett\",\"Ivette\",\"Ivie\",\"Ivonne\",\"Ivory\",\"Ivy\",\"Izabel\",\"Jacenta\",\"Jacinda\",\"Jacinta\",\"Jacintha\",\"Jacinthe\",\"Jackelyn\",\"Jacki\",\"Jackie\",\"Jacklin\",\"Jacklyn\",\"Jackquelin\",\"Jackqueline\",\"Jacky\",\"Jaclin\",\"Jaclyn\",\"Jacquelin\",\"Jacqueline\",\"Jacquelyn\",\"Jacquelynn\",\"Jacquenetta\",\"Jacquenette\",\"Jacquetta\",\"Jacquette\",\"Jacqui\",\"Jacquie\",\"Jacynth\",\"Jada\",\"Jade\",\"Jaime\",\"Jaimie\",\"Jaine\",\"Jami\",\"Jamie\",\"Jamima\",\"Jammie\",\"Jan\",\"Jana\",\"Janaya\",\"Janaye\",\"Jandy\",\"Jane\",\"Janean\",\"Janeczka\",\"Janeen\",\"Janel\",\"Janela\",\"Janella\",\"Janelle\",\"Janene\",\"Janenna\",\"Janessa\",\"Janet\",\"Janeta\",\"Janetta\",\"Janette\",\"Janeva\",\"Janey\",\"Jania\",\"Janice\",\"Janie\",\"Janifer\",\"Janina\",\"Janine\",\"Janis\",\"Janith\",\"Janka\",\"Janna\",\"Jannel\",\"Jannelle\",\"Janot\",\"Jany\",\"Jaquelin\",\"Jaquelyn\",\"Jaquenetta\",\"Jaquenette\",\"Jaquith\",\"Jasmin\",\"Jasmina\",\"Jasmine\",\"Jayme\",\"Jaymee\",\"Jayne\",\"Jaynell\",\"Jazmin\",\"Jean\",\"Jeana\",\"Jeane\",\"Jeanelle\",\"Jeanette\",\"Jeanie\",\"Jeanine\",\"Jeanna\",\"Jeanne\",\"Jeannette\",\"Jeannie\",\"Jeannine\",\"Jehanna\",\"Jelene\",\"Jemie\",\"Jemima\",\"Jemimah\",\"Jemmie\",\"Jemmy\",\"Jen\",\"Jena\",\"Jenda\",\"Jenelle\",\"Jeni\",\"Jenica\",\"Jeniece\",\"Jenifer\",\"Jeniffer\",\"Jenilee\",\"Jenine\",\"Jenn\",\"Jenna\",\"Jennee\",\"Jennette\",\"Jenni\",\"Jennica\",\"Jennie\",\"Jennifer\",\"Jennilee\",\"Jennine\",\"Jenny\",\"Jeralee\",\"Jere\",\"Jeri\",\"Jermaine\",\"Jerrie\",\"Jerrilee\",\"Jerrilyn\",\"Jerrine\",\"Jerry\",\"Jerrylee\",\"Jess\",\"Jessa\",\"Jessalin\",\"Jessalyn\",\"Jessamine\",\"Jessamyn\",\"Jesse\",\"Jesselyn\",\"Jessi\",\"Jessica\",\"Jessie\",\"Jessika\",\"Jessy\",\"Jewel\",\"Jewell\",\"Jewelle\",\"Jill\",\"Jillana\",\"Jillane\",\"Jillayne\",\"Jilleen\",\"Jillene\",\"Jilli\",\"Jillian\",\"Jillie\",\"Jilly\",\"Jinny\",\"Jo\",\"Jo-ann\",\"Jo-anne\",\"Joan\",\"Joana\",\"Joane\",\"Joanie\",\"Joann\",\"Joanna\",\"Joanne\",\"Joannes\",\"Jobey\",\"Jobi\",\"Jobie\",\"Jobina\",\"Joby\",\"Jobye\",\"Jobyna\",\"Jocelin\",\"Joceline\",\"Jocelyn\",\"Jocelyne\",\"Jodee\",\"Jodi\",\"Jodie\",\"Jody\",\"Joeann\",\"Joela\",\"Joelie\",\"Joell\",\"Joella\",\"Joelle\",\"Joellen\",\"Joelly\",\"Joellyn\",\"Joelynn\",\"Joete\",\"Joey\",\"Johanna\",\"Johannah\",\"Johna\",\"Johnath\",\"Johnette\",\"Johnna\",\"Joice\",\"Jojo\",\"Jolee\",\"Joleen\",\"Jolene\",\"Joletta\",\"Joli\",\"Jolie\",\"Joline\",\"Joly\",\"Jolyn\",\"Jolynn\",\"Jonell\",\"Joni\",\"Jonie\",\"Jonis\",\"Jordain\",\"Jordan\",\"Jordana\",\"Jordanna\",\"Jorey\",\"Jori\",\"Jorie\",\"Jorrie\",\"Jorry\",\"Joscelin\",\"Josee\",\"Josefa\",\"Josefina\",\"Josepha\",\"Josephina\",\"Josephine\",\"Josey\",\"Josi\",\"Josie\",\"Josselyn\",\"Josy\",\"Jourdan\",\"Joy\",\"Joya\",\"Joyan\",\"Joyann\",\"Joyce\",\"Joycelin\",\"Joye\",\"Jsandye\",\"Juana\",\"Juanita\",\"Judi\",\"Judie\",\"Judith\",\"Juditha\",\"Judy\",\"Judye\",\"Juieta\",\"Julee\",\"Juli\",\"Julia\",\"Juliana\",\"Juliane\",\"Juliann\",\"Julianna\",\"Julianne\",\"Julie\",\"Julienne\",\"Juliet\",\"Julieta\",\"Julietta\",\"Juliette\",\"Julina\",\"Juline\",\"Julissa\",\"Julita\",\"June\",\"Junette\",\"Junia\",\"Junie\",\"Junina\",\"Justina\",\"Justine\",\"Justinn\",\"Jyoti\",\"Kacey\",\"Kacie\",\"Kacy\",\"Kaela\",\"Kai\",\"Kaia\",\"Kaila\",\"Kaile\",\"Kailey\",\"Kaitlin\",\"Kaitlyn\",\"Kaitlynn\",\"Kaja\",\"Kakalina\",\"Kala\",\"Kaleena\",\"Kali\",\"Kalie\",\"Kalila\",\"Kalina\",\"Kalinda\",\"Kalindi\",\"Kalli\",\"Kally\",\"Kameko\",\"Kamila\",\"Kamilah\",\"Kamillah\",\"Kandace\",\"Kandy\",\"Kania\",\"Kanya\",\"Kara\",\"Kara-lynn\",\"Karalee\",\"Karalynn\",\"Kare\",\"Karee\",\"Karel\",\"Karen\",\"Karena\",\"Kari\",\"Karia\",\"Karie\",\"Karil\",\"Karilynn\",\"Karin\",\"Karina\",\"Karine\",\"Kariotta\",\"Karisa\",\"Karissa\",\"Karita\",\"Karla\",\"Karlee\",\"Karleen\",\"Karlen\",\"Karlene\",\"Karlie\",\"Karlotta\",\"Karlotte\",\"Karly\",\"Karlyn\",\"Karmen\",\"Karna\",\"Karol\",\"Karola\",\"Karole\",\"Karolina\",\"Karoline\",\"Karoly\",\"Karon\",\"Karrah\",\"Karrie\",\"Karry\",\"Kary\",\"Karyl\",\"Karylin\",\"Karyn\",\"Kasey\",\"Kass\",\"Kassandra\",\"Kassey\",\"Kassi\",\"Kassia\",\"Kassie\",\"Kat\",\"Kata\",\"Katalin\",\"Kate\",\"Katee\",\"Katerina\",\"Katerine\",\"Katey\",\"Kath\",\"Katha\",\"Katharina\",\"Katharine\",\"Katharyn\",\"Kathe\",\"Katherina\",\"Katherine\",\"Katheryn\",\"Kathi\",\"Kathie\",\"Kathleen\",\"Kathlin\",\"Kathrine\",\"Kathryn\",\"Kathryne\",\"Kathy\",\"Kathye\",\"Kati\",\"Katie\",\"Katina\",\"Katine\",\"Katinka\",\"Katleen\",\"Katlin\",\"Katrina\",\"Katrine\",\"Katrinka\",\"Katti\",\"Kattie\",\"Katuscha\",\"Katusha\",\"Katy\",\"Katya\",\"Kay\",\"Kaycee\",\"Kaye\",\"Kayla\",\"Kayle\",\"Kaylee\",\"Kayley\",\"Kaylil\",\"Kaylyn\",\"Keeley\",\"Keelia\",\"Keely\",\"Kelcey\",\"Kelci\",\"Kelcie\",\"Kelcy\",\"Kelila\",\"Kellen\",\"Kelley\",\"Kelli\",\"Kellia\",\"Kellie\",\"Kellina\",\"Kellsie\",\"Kelly\",\"Kellyann\",\"Kelsey\",\"Kelsi\",\"Kelsy\",\"Kendra\",\"Kendre\",\"Kenna\",\"Keri\",\"Keriann\",\"Kerianne\",\"Kerri\",\"Kerrie\",\"Kerrill\",\"Kerrin\",\"Kerry\",\"Kerstin\",\"Kesley\",\"Keslie\",\"Kessia\",\"Kessiah\",\"Ketti\",\"Kettie\",\"Ketty\",\"Kevina\",\"Kevyn\",\"Ki\",\"Kiah\",\"Kial\",\"Kiele\",\"Kiersten\",\"Kikelia\",\"Kiley\",\"Kim\",\"Kimberlee\",\"Kimberley\",\"Kimberli\",\"Kimberly\",\"Kimberlyn\",\"Kimbra\",\"Kimmi\",\"Kimmie\",\"Kimmy\",\"Kinna\",\"Kip\",\"Kipp\",\"Kippie\",\"Kippy\",\"Kira\",\"Kirbee\",\"Kirbie\",\"Kirby\",\"Kiri\",\"Kirsten\",\"Kirsteni\",\"Kirsti\",\"Kirstin\",\"Kirstyn\",\"Kissee\",\"Kissiah\",\"Kissie\",\"Kit\",\"Kitti\",\"Kittie\",\"Kitty\",\"Kizzee\",\"Kizzie\",\"Klara\",\"Klarika\",\"Klarrisa\",\"Konstance\",\"Konstanze\",\"Koo\",\"Kora\",\"Koral\",\"Koralle\",\"Kordula\",\"Kore\",\"Korella\",\"Koren\",\"Koressa\",\"Kori\",\"Korie\",\"Korney\",\"Korrie\",\"Korry\",\"Kris\",\"Krissie\",\"Krissy\",\"Krista\",\"Kristal\",\"Kristan\",\"Kriste\",\"Kristel\",\"Kristen\",\"Kristi\",\"Kristien\",\"Kristin\",\"Kristina\",\"Kristine\",\"Kristy\",\"Kristyn\",\"Krysta\",\"Krystal\",\"Krystalle\",\"Krystle\",\"Krystyna\",\"Kyla\",\"Kyle\",\"Kylen\",\"Kylie\",\"Kylila\",\"Kylynn\",\"Kym\",\"Kynthia\",\"Kyrstin\",\"Lacee\",\"Lacey\",\"Lacie\",\"Lacy\",\"Ladonna\",\"Laetitia\",\"Laina\",\"Lainey\",\"Lana\",\"Lanae\",\"Lane\",\"Lanette\",\"Laney\",\"Lani\",\"Lanie\",\"Lanita\",\"Lanna\",\"Lanni\",\"Lanny\",\"Lara\",\"Laraine\",\"Lari\",\"Larina\",\"Larine\",\"Larisa\",\"Larissa\",\"Lark\",\"Laryssa\",\"Latashia\",\"Latia\",\"Latisha\",\"Latrena\",\"Latrina\",\"Laura\",\"Lauraine\",\"Laural\",\"Lauralee\",\"Laure\",\"Lauree\",\"Laureen\",\"Laurel\",\"Laurella\",\"Lauren\",\"Laurena\",\"Laurene\",\"Lauretta\",\"Laurette\",\"Lauri\",\"Laurianne\",\"Laurice\",\"Laurie\",\"Lauryn\",\"Lavena\",\"Laverna\",\"Laverne\",\"Lavina\",\"Lavinia\",\"Lavinie\",\"Layla\",\"Layne\",\"Layney\",\"Lea\",\"Leah\",\"Leandra\",\"Leann\",\"Leanna\",\"Leanor\",\"Leanora\",\"Lebbie\",\"Leda\",\"Lee\",\"Leeann\",\"Leeanne\",\"Leela\",\"Leelah\",\"Leena\",\"Leesa\",\"Leese\",\"Legra\",\"Leia\",\"Leigh\",\"Leigha\",\"Leila\",\"Leilah\",\"Leisha\",\"Lela\",\"Lelah\",\"Leland\",\"Lelia\",\"Lena\",\"Lenee\",\"Lenette\",\"Lenka\",\"Lenna\",\"Lenora\",\"Lenore\",\"Leodora\",\"Leoine\",\"Leola\",\"Leoline\",\"Leona\",\"Leonanie\",\"Leone\",\"Leonelle\",\"Leonie\",\"Leonora\",\"Leonore\",\"Leontine\",\"Leontyne\",\"Leora\",\"Leshia\",\"Lesley\",\"Lesli\",\"Leslie\",\"Lesly\",\"Lesya\",\"Leta\",\"Lethia\",\"Leticia\",\"Letisha\",\"Letitia\",\"Letizia\",\"Letta\",\"Letti\",\"Lettie\",\"Letty\",\"Lexi\",\"Lexie\",\"Lexine\",\"Lexis\",\"Lexy\",\"Leyla\",\"Lezlie\",\"Lia\",\"Lian\",\"Liana\",\"Liane\",\"Lianna\",\"Lianne\",\"Lib\",\"Libbey\",\"Libbi\",\"Libbie\",\"Libby\",\"Licha\",\"Lida\",\"Lidia\",\"Liesa\",\"Lil\",\"Lila\",\"Lilah\",\"Lilas\",\"Lilia\",\"Lilian\",\"Liliane\",\"Lilias\",\"Lilith\",\"Lilla\",\"Lilli\",\"Lillian\",\"Lillis\",\"Lilllie\",\"Lilly\",\"Lily\",\"Lilyan\",\"Lin\",\"Lina\",\"Lind\",\"Linda\",\"Lindi\",\"Lindie\",\"Lindsay\",\"Lindsey\",\"Lindsy\",\"Lindy\",\"Linea\",\"Linell\",\"Linet\",\"Linette\",\"Linn\",\"Linnea\",\"Linnell\",\"Linnet\",\"Linnie\",\"Linzy\",\"Lira\",\"Lisa\",\"Lisabeth\",\"Lisbeth\",\"Lise\",\"Lisetta\",\"Lisette\",\"Lisha\",\"Lishe\",\"Lissa\",\"Lissi\",\"Lissie\",\"Lissy\",\"Lita\",\"Liuka\",\"Liv\",\"Liva\",\"Livia\",\"Livvie\",\"Livvy\",\"Livvyy\",\"Livy\",\"Liz\",\"Liza\",\"Lizabeth\",\"Lizbeth\",\"Lizette\",\"Lizzie\",\"Lizzy\",\"Loella\",\"Lois\",\"Loise\",\"Lola\",\"Loleta\",\"Lolita\",\"Lolly\",\"Lona\",\"Lonee\",\"Loni\",\"Lonna\",\"Lonni\",\"Lonnie\",\"Lora\",\"Lorain\",\"Loraine\",\"Loralee\",\"Loralie\",\"Loralyn\",\"Loree\",\"Loreen\",\"Lorelei\",\"Lorelle\",\"Loren\",\"Lorena\",\"Lorene\",\"Lorenza\",\"Loretta\",\"Lorette\",\"Lori\",\"Loria\",\"Lorianna\",\"Lorianne\",\"Lorie\",\"Lorilee\",\"Lorilyn\",\"Lorinda\",\"Lorine\",\"Lorita\",\"Lorna\",\"Lorne\",\"Lorraine\",\"Lorrayne\",\"Lorri\",\"Lorrie\",\"Lorrin\",\"Lorry\",\"Lory\",\"Lotta\",\"Lotte\",\"Lotti\",\"Lottie\",\"Lotty\",\"Lou\",\"Louella\",\"Louisa\",\"Louise\",\"Louisette\",\"Loutitia\",\"Lu\",\"Luce\",\"Luci\",\"Lucia\",\"Luciana\",\"Lucie\",\"Lucienne\",\"Lucila\",\"Lucilia\",\"Lucille\",\"Lucina\",\"Lucinda\",\"Lucine\",\"Lucita\",\"Lucky\",\"Lucretia\",\"Lucy\",\"Ludovika\",\"Luella\",\"Luelle\",\"Luisa\",\"Luise\",\"Lula\",\"Lulita\",\"Lulu\",\"Lura\",\"Lurette\",\"Lurleen\",\"Lurlene\",\"Lurline\",\"Lusa\",\"Luz\",\"Lyda\",\"Lydia\",\"Lydie\",\"Lyn\",\"Lynda\",\"Lynde\",\"Lyndel\",\"Lyndell\",\"Lyndsay\",\"Lyndsey\",\"Lyndsie\",\"Lyndy\",\"Lynea\",\"Lynelle\",\"Lynett\",\"Lynette\",\"Lynn\",\"Lynna\",\"Lynne\",\"Lynnea\",\"Lynnell\",\"Lynnelle\",\"Lynnet\",\"Lynnett\",\"Lynnette\",\"Lynsey\",\"Lyssa\",\"Mab\",\"Mabel\",\"Mabelle\",\"Mable\",\"Mada\",\"Madalena\",\"Madalyn\",\"Maddalena\",\"Maddi\",\"Maddie\",\"Maddy\",\"Madel\",\"Madelaine\",\"Madeleine\",\"Madelena\",\"Madelene\",\"Madelin\",\"Madelina\",\"Madeline\",\"Madella\",\"Madelle\",\"Madelon\",\"Madelyn\",\"Madge\",\"Madlen\",\"Madlin\",\"Madonna\",\"Mady\",\"Mae\",\"Maegan\",\"Mag\",\"Magda\",\"Magdaia\",\"Magdalen\",\"Magdalena\",\"Magdalene\",\"Maggee\",\"Maggi\",\"Maggie\",\"Maggy\",\"Mahala\",\"Mahalia\",\"Maia\",\"Maible\",\"Maiga\",\"Maighdiln\",\"Mair\",\"Maire\",\"Maisey\",\"Maisie\",\"Maitilde\",\"Mala\",\"Malanie\",\"Malena\",\"Malia\",\"Malina\",\"Malinda\",\"Malinde\",\"Malissa\",\"Malissia\",\"Mallissa\",\"Mallorie\",\"Mallory\",\"Malorie\",\"Malory\",\"Malva\",\"Malvina\",\"Malynda\",\"Mame\",\"Mamie\",\"Manda\",\"Mandi\",\"Mandie\",\"Mandy\",\"Manon\",\"Manya\",\"Mara\",\"Marabel\",\"Marcela\",\"Marcelia\",\"Marcella\",\"Marcelle\",\"Marcellina\",\"Marcelline\",\"Marchelle\",\"Marci\",\"Marcia\",\"Marcie\",\"Marcile\",\"Marcille\",\"Marcy\",\"Mareah\",\"Maren\",\"Marena\",\"Maressa\",\"Marga\",\"Margalit\",\"Margalo\",\"Margaret\",\"Margareta\",\"Margarete\",\"Margaretha\",\"Margarethe\",\"Margaretta\",\"Margarette\",\"Margarita\",\"Margaux\",\"Marge\",\"Margeaux\",\"Margery\",\"Marget\",\"Margette\",\"Margi\",\"Margie\",\"Margit\",\"Margo\",\"Margot\",\"Margret\",\"Marguerite\",\"Margy\",\"Mari\",\"Maria\",\"Mariam\",\"Marian\",\"Mariana\",\"Mariann\",\"Marianna\",\"Marianne\",\"Maribel\",\"Maribelle\",\"Maribeth\",\"Marice\",\"Maridel\",\"Marie\",\"Marie-ann\",\"Marie-jeanne\",\"Marieann\",\"Mariejeanne\",\"Mariel\",\"Mariele\",\"Marielle\",\"Mariellen\",\"Marietta\",\"Mariette\",\"Marigold\",\"Marijo\",\"Marika\",\"Marilee\",\"Marilin\",\"Marillin\",\"Marilyn\",\"Marin\",\"Marina\",\"Marinna\",\"Marion\",\"Mariquilla\",\"Maris\",\"Marisa\",\"Mariska\",\"Marissa\",\"Marita\",\"Maritsa\",\"Mariya\",\"Marj\",\"Marja\",\"Marje\",\"Marji\",\"Marjie\",\"Marjorie\",\"Marjory\",\"Marjy\",\"Marketa\",\"Marla\",\"Marlane\",\"Marleah\",\"Marlee\",\"Marleen\",\"Marlena\",\"Marlene\",\"Marley\",\"Marlie\",\"Marline\",\"Marlo\",\"Marlyn\",\"Marna\",\"Marne\",\"Marney\",\"Marni\",\"Marnia\",\"Marnie\",\"Marquita\",\"Marrilee\",\"Marris\",\"Marrissa\",\"Marsha\",\"Marsiella\",\"Marta\",\"Martelle\",\"Martguerita\",\"Martha\",\"Marthe\",\"Marthena\",\"Marti\",\"Martica\",\"Martie\",\"Martina\",\"Martita\",\"Marty\",\"Martynne\",\"Mary\",\"Marya\",\"Maryann\",\"Maryanna\",\"Maryanne\",\"Marybelle\",\"Marybeth\",\"Maryellen\",\"Maryjane\",\"Maryjo\",\"Maryl\",\"Marylee\",\"Marylin\",\"Marylinda\",\"Marylou\",\"Marylynne\",\"Maryrose\",\"Marys\",\"Marysa\",\"Masha\",\"Matelda\",\"Mathilda\",\"Mathilde\",\"Matilda\",\"Matilde\",\"Matti\",\"Mattie\",\"Matty\",\"Maud\",\"Maude\",\"Maudie\",\"Maura\",\"Maure\",\"Maureen\",\"Maureene\",\"Maurene\",\"Maurine\",\"Maurise\",\"Maurita\",\"Maurizia\",\"Mavis\",\"Mavra\",\"Max\",\"Maxi\",\"Maxie\",\"Maxine\",\"Maxy\",\"May\",\"Maybelle\",\"Maye\",\"Mead\",\"Meade\",\"Meagan\",\"Meaghan\",\"Meara\",\"Mechelle\",\"Meg\",\"Megan\",\"Megen\",\"Meggi\",\"Meggie\",\"Meggy\",\"Meghan\",\"Meghann\",\"Mehetabel\",\"Mei\",\"Mel\",\"Mela\",\"Melamie\",\"Melania\",\"Melanie\",\"Melantha\",\"Melany\",\"Melba\",\"Melesa\",\"Melessa\",\"Melicent\",\"Melina\",\"Melinda\",\"Melinde\",\"Melisa\",\"Melisande\",\"Melisandra\",\"Melisenda\",\"Melisent\",\"Melissa\",\"Melisse\",\"Melita\",\"Melitta\",\"Mella\",\"Melli\",\"Mellicent\",\"Mellie\",\"Mellisa\",\"Mellisent\",\"Melloney\",\"Melly\",\"Melodee\",\"Melodie\",\"Melody\",\"Melonie\",\"Melony\",\"Melosa\",\"Melva\",\"Mercedes\",\"Merci\",\"Mercie\",\"Mercy\",\"Meredith\",\"Meredithe\",\"Meridel\",\"Meridith\",\"Meriel\",\"Merilee\",\"Merilyn\",\"Meris\",\"Merissa\",\"Merl\",\"Merla\",\"Merle\",\"Merlina\",\"Merline\",\"Merna\",\"Merola\",\"Merralee\",\"Merridie\",\"Merrie\",\"Merrielle\",\"Merrile\",\"Merrilee\",\"Merrili\",\"Merrill\",\"Merrily\",\"Merry\",\"Mersey\",\"Meryl\",\"Meta\",\"Mia\",\"Micaela\",\"Michaela\",\"Michaelina\",\"Michaeline\",\"Michaella\",\"Michal\",\"Michel\",\"Michele\",\"Michelina\",\"Micheline\",\"Michell\",\"Michelle\",\"Micki\",\"Mickie\",\"Micky\",\"Midge\",\"Mignon\",\"Mignonne\",\"Miguela\",\"Miguelita\",\"Mikaela\",\"Mil\",\"Mildred\",\"Mildrid\",\"Milena\",\"Milicent\",\"Milissent\",\"Milka\",\"Milli\",\"Millicent\",\"Millie\",\"Millisent\",\"Milly\",\"Milzie\",\"Mimi\",\"Min\",\"Mina\",\"Minda\",\"Mindy\",\"Minerva\",\"Minetta\",\"Minette\",\"Minna\",\"Minnaminnie\",\"Minne\",\"Minni\",\"Minnie\",\"Minnnie\",\"Minny\",\"Minta\",\"Miquela\",\"Mira\",\"Mirabel\",\"Mirabella\",\"Mirabelle\",\"Miran\",\"Miranda\",\"Mireielle\",\"Mireille\",\"Mirella\",\"Mirelle\",\"Miriam\",\"Mirilla\",\"Mirna\",\"Misha\",\"Missie\",\"Missy\",\"Misti\",\"Misty\",\"Mitzi\",\"Modesta\",\"Modestia\",\"Modestine\",\"Modesty\",\"Moina\",\"Moira\",\"Moll\",\"Mollee\",\"Molli\",\"Mollie\",\"Molly\",\"Mommy\",\"Mona\",\"Monah\",\"Monica\",\"Monika\",\"Monique\",\"Mora\",\"Moreen\",\"Morena\",\"Morgan\",\"Morgana\",\"Morganica\",\"Morganne\",\"Morgen\",\"Moria\",\"Morissa\",\"Morna\",\"Moselle\",\"Moyna\",\"Moyra\",\"Mozelle\",\"Muffin\",\"Mufi\",\"Mufinella\",\"Muire\",\"Mureil\",\"Murial\",\"Muriel\",\"Murielle\",\"Myra\",\"Myrah\",\"Myranda\",\"Myriam\",\"Myrilla\",\"Myrle\",\"Myrlene\",\"Myrna\",\"Myrta\",\"Myrtia\",\"Myrtice\",\"Myrtie\",\"Myrtle\",\"Nada\",\"Nadean\",\"Nadeen\",\"Nadia\",\"Nadine\",\"Nadiya\",\"Nady\",\"Nadya\",\"Nalani\",\"Nan\",\"Nana\",\"Nananne\",\"Nance\",\"Nancee\",\"Nancey\",\"Nanci\",\"Nancie\",\"Nancy\",\"Nanete\",\"Nanette\",\"Nani\",\"Nanice\",\"Nanine\",\"Nannette\",\"Nanni\",\"Nannie\",\"Nanny\",\"Nanon\",\"Naoma\",\"Naomi\",\"Nara\",\"Nari\",\"Nariko\",\"Nat\",\"Nata\",\"Natala\",\"Natalee\",\"Natalie\",\"Natalina\",\"Nataline\",\"Natalya\",\"Natasha\",\"Natassia\",\"Nathalia\",\"Nathalie\",\"Natividad\",\"Natka\",\"Natty\",\"Neala\",\"Neda\",\"Nedda\",\"Nedi\",\"Neely\",\"Neila\",\"Neile\",\"Neilla\",\"Neille\",\"Nelia\",\"Nelie\",\"Nell\",\"Nelle\",\"Nelli\",\"Nellie\",\"Nelly\",\"Nerissa\",\"Nerita\",\"Nert\",\"Nerta\",\"Nerte\",\"Nerti\",\"Nertie\",\"Nerty\",\"Nessa\",\"Nessi\",\"Nessie\",\"Nessy\",\"Nesta\",\"Netta\",\"Netti\",\"Nettie\",\"Nettle\",\"Netty\",\"Nevsa\",\"Neysa\",\"Nichol\",\"Nichole\",\"Nicholle\",\"Nicki\",\"Nickie\",\"Nicky\",\"Nicol\",\"Nicola\",\"Nicole\",\"Nicolea\",\"Nicolette\",\"Nicoli\",\"Nicolina\",\"Nicoline\",\"Nicolle\",\"Nikaniki\",\"Nike\",\"Niki\",\"Nikki\",\"Nikkie\",\"Nikoletta\",\"Nikolia\",\"Nina\",\"Ninetta\",\"Ninette\",\"Ninnetta\",\"Ninnette\",\"Ninon\",\"Nissa\",\"Nisse\",\"Nissie\",\"Nissy\",\"Nita\",\"Nixie\",\"Noami\",\"Noel\",\"Noelani\",\"Noell\",\"Noella\",\"Noelle\",\"Noellyn\",\"Noelyn\",\"Noemi\",\"Nola\",\"Nolana\",\"Nolie\",\"Nollie\",\"Nomi\",\"Nona\",\"Nonah\",\"Noni\",\"Nonie\",\"Nonna\",\"Nonnah\",\"Nora\",\"Norah\",\"Norean\",\"Noreen\",\"Norene\",\"Norina\",\"Norine\",\"Norma\",\"Norri\",\"Norrie\",\"Norry\",\"Novelia\",\"Nydia\",\"Nyssa\",\"Octavia\",\"Odele\",\"Odelia\",\"Odelinda\",\"Odella\",\"Odelle\",\"Odessa\",\"Odetta\",\"Odette\",\"Odilia\",\"Odille\",\"Ofelia\",\"Ofella\",\"Ofilia\",\"Ola\",\"Olenka\",\"Olga\",\"Olia\",\"Olimpia\",\"Olive\",\"Olivette\",\"Olivia\",\"Olivie\",\"Oliy\",\"Ollie\",\"Olly\",\"Olva\",\"Olwen\",\"Olympe\",\"Olympia\",\"Olympie\",\"Ondrea\",\"Oneida\",\"Onida\",\"Oona\",\"Opal\",\"Opalina\",\"Opaline\",\"Ophelia\",\"Ophelie\",\"Ora\",\"Oralee\",\"Oralia\",\"Oralie\",\"Oralla\",\"Oralle\",\"Orel\",\"Orelee\",\"Orelia\",\"Orelie\",\"Orella\",\"Orelle\",\"Oriana\",\"Orly\",\"Orsa\",\"Orsola\",\"Ortensia\",\"Otha\",\"Othelia\",\"Othella\",\"Othilia\",\"Othilie\",\"Ottilie\",\"Page\",\"Paige\",\"Paloma\",\"Pam\",\"Pamela\",\"Pamelina\",\"Pamella\",\"Pammi\",\"Pammie\",\"Pammy\",\"Pandora\",\"Pansie\",\"Pansy\",\"Paola\",\"Paolina\",\"Papagena\",\"Pat\",\"Patience\",\"Patrica\",\"Patrice\",\"Patricia\",\"Patrizia\",\"Patsy\",\"Patti\",\"Pattie\",\"Patty\",\"Paula\",\"Paule\",\"Pauletta\",\"Paulette\",\"Pauli\",\"Paulie\",\"Paulina\",\"Pauline\",\"Paulita\",\"Pauly\",\"Pavia\",\"Pavla\",\"Pearl\",\"Pearla\",\"Pearle\",\"Pearline\",\"Peg\",\"Pegeen\",\"Peggi\",\"Peggie\",\"Peggy\",\"Pen\",\"Penelopa\",\"Penelope\",\"Penni\",\"Pennie\",\"Penny\",\"Pepi\",\"Pepita\",\"Peri\",\"Peria\",\"Perl\",\"Perla\",\"Perle\",\"Perri\",\"Perrine\",\"Perry\",\"Persis\",\"Pet\",\"Peta\",\"Petra\",\"Petrina\",\"Petronella\",\"Petronia\",\"Petronilla\",\"Petronille\",\"Petunia\",\"Phaedra\",\"Phaidra\",\"Phebe\",\"Phedra\",\"Phelia\",\"Phil\",\"Philipa\",\"Philippa\",\"Philippe\",\"Philippine\",\"Philis\",\"Phillida\",\"Phillie\",\"Phillis\",\"Philly\",\"Philomena\",\"Phoebe\",\"Phylis\",\"Phyllida\",\"Phyllis\",\"Phyllys\",\"Phylys\",\"Pia\",\"Pier\",\"Pierette\",\"Pierrette\",\"Pietra\",\"Piper\",\"Pippa\",\"Pippy\",\"Polly\",\"Pollyanna\",\"Pooh\",\"Poppy\",\"Portia\",\"Pris\",\"Prisca\",\"Priscella\",\"Priscilla\",\"Prissie\",\"Pru\",\"Prudence\",\"Prudi\",\"Prudy\",\"Prue\",\"Queenie\",\"Quentin\",\"Querida\",\"Quinn\",\"Quinta\",\"Quintana\",\"Quintilla\",\"Quintina\",\"Rachael\",\"Rachel\",\"Rachele\",\"Rachelle\",\"Rae\",\"Raeann\",\"Raf\",\"Rafa\",\"Rafaela\",\"Rafaelia\",\"Rafaelita\",\"Rahal\",\"Rahel\",\"Raina\",\"Raine\",\"Rakel\",\"Ralina\",\"Ramona\",\"Ramonda\",\"Rana\",\"Randa\",\"Randee\",\"Randene\",\"Randi\",\"Randie\",\"Randy\",\"Ranee\",\"Rani\",\"Rania\",\"Ranice\",\"Ranique\",\"Ranna\",\"Raphaela\",\"Raquel\",\"Raquela\",\"Rasia\",\"Rasla\",\"Raven\",\"Ray\",\"Raychel\",\"Raye\",\"Rayna\",\"Raynell\",\"Rayshell\",\"Rea\",\"Reba\",\"Rebbecca\",\"Rebe\",\"Rebeca\",\"Rebecca\",\"Rebecka\",\"Rebeka\",\"Rebekah\",\"Rebekkah\",\"Ree\",\"Reeba\",\"Reena\",\"Reeta\",\"Reeva\",\"Regan\",\"Reggi\",\"Reggie\",\"Regina\",\"Regine\",\"Reiko\",\"Reina\",\"Reine\",\"Remy\",\"Rena\",\"Renae\",\"Renata\",\"Renate\",\"Rene\",\"Renee\",\"Renell\",\"Renelle\",\"Renie\",\"Rennie\",\"Reta\",\"Retha\",\"Revkah\",\"Rey\",\"Reyna\",\"Rhea\",\"Rheba\",\"Rheta\",\"Rhetta\",\"Rhiamon\",\"Rhianna\",\"Rhianon\",\"Rhoda\",\"Rhodia\",\"Rhodie\",\"Rhody\",\"Rhona\",\"Rhonda\",\"Riane\",\"Riannon\",\"Rianon\",\"Rica\",\"Ricca\",\"Rici\",\"Ricki\",\"Rickie\",\"Ricky\",\"Riki\",\"Rikki\",\"Rina\",\"Risa\",\"Rita\",\"Riva\",\"Rivalee\",\"Rivi\",\"Rivkah\",\"Rivy\",\"Roana\",\"Roanna\",\"Roanne\",\"Robbi\",\"Robbie\",\"Robbin\",\"Robby\",\"Robbyn\",\"Robena\",\"Robenia\",\"Roberta\",\"Robin\",\"Robina\",\"Robinet\",\"Robinett\",\"Robinetta\",\"Robinette\",\"Robinia\",\"Roby\",\"Robyn\",\"Roch\",\"Rochell\",\"Rochella\",\"Rochelle\",\"Rochette\",\"Roda\",\"Rodi\",\"Rodie\",\"Rodina\",\"Rois\",\"Romola\",\"Romona\",\"Romonda\",\"Romy\",\"Rona\",\"Ronalda\",\"Ronda\",\"Ronica\",\"Ronna\",\"Ronni\",\"Ronnica\",\"Ronnie\",\"Ronny\",\"Roobbie\",\"Rora\",\"Rori\",\"Rorie\",\"Rory\",\"Ros\",\"Rosa\",\"Rosabel\",\"Rosabella\",\"Rosabelle\",\"Rosaleen\",\"Rosalia\",\"Rosalie\",\"Rosalind\",\"Rosalinda\",\"Rosalinde\",\"Rosaline\",\"Rosalyn\",\"Rosalynd\",\"Rosamond\",\"Rosamund\",\"Rosana\",\"Rosanna\",\"Rosanne\",\"Rose\",\"Roseann\",\"Roseanna\",\"Roseanne\",\"Roselia\",\"Roselin\",\"Roseline\",\"Rosella\",\"Roselle\",\"Rosemaria\",\"Rosemarie\",\"Rosemary\",\"Rosemonde\",\"Rosene\",\"Rosetta\",\"Rosette\",\"Roshelle\",\"Rosie\",\"Rosina\",\"Rosita\",\"Roslyn\",\"Rosmunda\",\"Rosy\",\"Row\",\"Rowe\",\"Rowena\",\"Roxana\",\"Roxane\",\"Roxanna\",\"Roxanne\",\"Roxi\",\"Roxie\",\"Roxine\",\"Roxy\",\"Roz\",\"Rozalie\",\"Rozalin\",\"Rozamond\",\"Rozanna\",\"Rozanne\",\"Roze\",\"Rozele\",\"Rozella\",\"Rozelle\",\"Rozina\",\"Rubetta\",\"Rubi\",\"Rubia\",\"Rubie\",\"Rubina\",\"Ruby\",\"Ruperta\",\"Ruth\",\"Ruthann\",\"Ruthanne\",\"Ruthe\",\"Ruthi\",\"Ruthie\",\"Ruthy\",\"Ryann\",\"Rycca\",\"Saba\",\"Sabina\",\"Sabine\",\"Sabra\",\"Sabrina\",\"Sacha\",\"Sada\",\"Sadella\",\"Sadie\",\"Sadye\",\"Saidee\",\"Sal\",\"Salaidh\",\"Sallee\",\"Salli\",\"Sallie\",\"Sally\",\"Sallyann\",\"Sallyanne\",\"Saloma\",\"Salome\",\"Salomi\",\"Sam\",\"Samantha\",\"Samara\",\"Samaria\",\"Sammy\",\"Sande\",\"Sandi\",\"Sandie\",\"Sandra\",\"Sandy\",\"Sandye\",\"Sapphira\",\"Sapphire\",\"Sara\",\"Sara-ann\",\"Saraann\",\"Sarah\",\"Sarajane\",\"Saree\",\"Sarena\",\"Sarene\",\"Sarette\",\"Sari\",\"Sarina\",\"Sarine\",\"Sarita\",\"Sascha\",\"Sasha\",\"Sashenka\",\"Saudra\",\"Saundra\",\"Savina\",\"Sayre\",\"Scarlet\",\"Scarlett\",\"Sean\",\"Seana\",\"Seka\",\"Sela\",\"Selena\",\"Selene\",\"Selestina\",\"Selia\",\"Selie\",\"Selina\",\"Selinda\",\"Seline\",\"Sella\",\"Selle\",\"Selma\",\"Sena\",\"Sephira\",\"Serena\",\"Serene\",\"Shae\",\"Shaina\",\"Shaine\",\"Shalna\",\"Shalne\",\"Shana\",\"Shanda\",\"Shandee\",\"Shandeigh\",\"Shandie\",\"Shandra\",\"Shandy\",\"Shane\",\"Shani\",\"Shanie\",\"Shanna\",\"Shannah\",\"Shannen\",\"Shannon\",\"Shanon\",\"Shanta\",\"Shantee\",\"Shara\",\"Sharai\",\"Shari\",\"Sharia\",\"Sharity\",\"Sharl\",\"Sharla\",\"Sharleen\",\"Sharlene\",\"Sharline\",\"Sharon\",\"Sharona\",\"Sharron\",\"Sharyl\",\"Shaun\",\"Shauna\",\"Shawn\",\"Shawna\",\"Shawnee\",\"Shay\",\"Shayla\",\"Shaylah\",\"Shaylyn\",\"Shaylynn\",\"Shayna\",\"Shayne\",\"Shea\",\"Sheba\",\"Sheela\",\"Sheelagh\",\"Sheelah\",\"Sheena\",\"Sheeree\",\"Sheila\",\"Sheila-kathryn\",\"Sheilah\",\"Shel\",\"Shela\",\"Shelagh\",\"Shelba\",\"Shelbi\",\"Shelby\",\"Shelia\",\"Shell\",\"Shelley\",\"Shelli\",\"Shellie\",\"Shelly\",\"Shena\",\"Sher\",\"Sheree\",\"Sheri\",\"Sherie\",\"Sherill\",\"Sherilyn\",\"Sherline\",\"Sherri\",\"Sherrie\",\"Sherry\",\"Sherye\",\"Sheryl\",\"Shina\",\"Shir\",\"Shirl\",\"Shirlee\",\"Shirleen\",\"Shirlene\",\"Shirley\",\"Shirline\",\"Shoshana\",\"Shoshanna\",\"Siana\",\"Sianna\",\"Sib\",\"Sibbie\",\"Sibby\",\"Sibeal\",\"Sibel\",\"Sibella\",\"Sibelle\",\"Sibilla\",\"Sibley\",\"Sibyl\",\"Sibylla\",\"Sibylle\",\"Sidoney\",\"Sidonia\",\"Sidonnie\",\"Sigrid\",\"Sile\",\"Sileas\",\"Silva\",\"Silvana\",\"Silvia\",\"Silvie\",\"Simona\",\"Simone\",\"Simonette\",\"Simonne\",\"Sindee\",\"Siobhan\",\"Sioux\",\"Siouxie\",\"Sisely\",\"Sisile\",\"Sissie\",\"Sissy\",\"Siusan\",\"Sofia\",\"Sofie\",\"Sondra\",\"Sonia\",\"Sonja\",\"Sonni\",\"Sonnie\",\"Sonnnie\",\"Sonny\",\"Sonya\",\"Sophey\",\"Sophi\",\"Sophia\",\"Sophie\",\"Sophronia\",\"Sorcha\",\"Sosanna\",\"Stace\",\"Stacee\",\"Stacey\",\"Staci\",\"Stacia\",\"Stacie\",\"Stacy\",\"Stafani\",\"Star\",\"Starla\",\"Starlene\",\"Starlin\",\"Starr\",\"Stefa\",\"Stefania\",\"Stefanie\",\"Steffane\",\"Steffi\",\"Steffie\",\"Stella\",\"Stepha\",\"Stephana\",\"Stephani\",\"Stephanie\",\"Stephannie\",\"Stephenie\",\"Stephi\",\"Stephie\",\"Stephine\",\"Stesha\",\"Stevana\",\"Stevena\",\"Stoddard\",\"Storm\",\"Stormi\",\"Stormie\",\"Stormy\",\"Sue\",\"Suellen\",\"Sukey\",\"Suki\",\"Sula\",\"Sunny\",\"Sunshine\",\"Susan\",\"Susana\",\"Susanetta\",\"Susann\",\"Susanna\",\"Susannah\",\"Susanne\",\"Susette\",\"Susi\",\"Susie\",\"Susy\",\"Suzann\",\"Suzanna\",\"Suzanne\",\"Suzette\",\"Suzi\",\"Suzie\",\"Suzy\",\"Sybil\",\"Sybila\",\"Sybilla\",\"Sybille\",\"Sybyl\",\"Sydel\",\"Sydelle\",\"Sydney\",\"Sylvia\",\"Tabatha\",\"Tabbatha\",\"Tabbi\",\"Tabbie\",\"Tabbitha\",\"Tabby\",\"Tabina\",\"Tabitha\",\"Taffy\",\"Talia\",\"Tallia\",\"Tallie\",\"Tallou\",\"Tallulah\",\"Tally\",\"Talya\",\"Talyah\",\"Tamar\",\"Tamara\",\"Tamarah\",\"Tamarra\",\"Tamera\",\"Tami\",\"Tamiko\",\"Tamma\",\"Tammara\",\"Tammi\",\"Tammie\",\"Tammy\",\"Tamqrah\",\"Tamra\",\"Tana\",\"Tandi\",\"Tandie\",\"Tandy\",\"Tanhya\",\"Tani\",\"Tania\",\"Tanitansy\",\"Tansy\",\"Tanya\",\"Tara\",\"Tarah\",\"Tarra\",\"Tarrah\",\"Taryn\",\"Tasha\",\"Tasia\",\"Tate\",\"Tatiana\",\"Tatiania\",\"Tatum\",\"Tawnya\",\"Tawsha\",\"Ted\",\"Tedda\",\"Teddi\",\"Teddie\",\"Teddy\",\"Tedi\",\"Tedra\",\"Teena\",\"Teirtza\",\"Teodora\",\"Tera\",\"Teresa\",\"Terese\",\"Teresina\",\"Teresita\",\"Teressa\",\"Teri\",\"Teriann\",\"Terra\",\"Terri\",\"Terrie\",\"Terrijo\",\"Terry\",\"Terrye\",\"Tersina\",\"Terza\",\"Tess\",\"Tessa\",\"Tessi\",\"Tessie\",\"Tessy\",\"Thalia\",\"Thea\",\"Theadora\",\"Theda\",\"Thekla\",\"Thelma\",\"Theo\",\"Theodora\",\"Theodosia\",\"Theresa\",\"Therese\",\"Theresina\",\"Theresita\",\"Theressa\",\"Therine\",\"Thia\",\"Thomasa\",\"Thomasin\",\"Thomasina\",\"Thomasine\",\"Tiena\",\"Tierney\",\"Tiertza\",\"Tiff\",\"Tiffani\",\"Tiffanie\",\"Tiffany\",\"Tiffi\",\"Tiffie\",\"Tiffy\",\"Tilda\",\"Tildi\",\"Tildie\",\"Tildy\",\"Tillie\",\"Tilly\",\"Tim\",\"Timi\",\"Timmi\",\"Timmie\",\"Timmy\",\"Timothea\",\"Tina\",\"Tine\",\"Tiphani\",\"Tiphanie\",\"Tiphany\",\"Tish\",\"Tisha\",\"Tobe\",\"Tobey\",\"Tobi\",\"Toby\",\"Tobye\",\"Toinette\",\"Toma\",\"Tomasina\",\"Tomasine\",\"Tomi\",\"Tommi\",\"Tommie\",\"Tommy\",\"Toni\",\"Tonia\",\"Tonie\",\"Tony\",\"Tonya\",\"Tonye\",\"Tootsie\",\"Torey\",\"Tori\",\"Torie\",\"Torrie\",\"Tory\",\"Tova\",\"Tove\",\"Tracee\",\"Tracey\",\"Traci\",\"Tracie\",\"Tracy\",\"Trenna\",\"Tresa\",\"Trescha\",\"Tressa\",\"Tricia\",\"Trina\",\"Trish\",\"Trisha\",\"Trista\",\"Trix\",\"Trixi\",\"Trixie\",\"Trixy\",\"Truda\",\"Trude\",\"Trudey\",\"Trudi\",\"Trudie\",\"Trudy\",\"Trula\",\"Tuesday\",\"Twila\",\"Twyla\",\"Tybi\",\"Tybie\",\"Tyne\",\"Ula\",\"Ulla\",\"Ulrica\",\"Ulrika\",\"Ulrikaumeko\",\"Ulrike\",\"Umeko\",\"Una\",\"Ursa\",\"Ursala\",\"Ursola\",\"Ursula\",\"Ursulina\",\"Ursuline\",\"Uta\",\"Val\",\"Valaree\",\"Valaria\",\"Vale\",\"Valeda\",\"Valencia\",\"Valene\",\"Valenka\",\"Valentia\",\"Valentina\",\"Valentine\",\"Valera\",\"Valeria\",\"Valerie\",\"Valery\",\"Valerye\",\"Valida\",\"Valina\",\"Valli\",\"Vallie\",\"Vally\",\"Valma\",\"Valry\",\"Van\",\"Vanda\",\"Vanessa\",\"Vania\",\"Vanna\",\"Vanni\",\"Vannie\",\"Vanny\",\"Vanya\",\"Veda\",\"Velma\",\"Velvet\",\"Venita\",\"Venus\",\"Vera\",\"Veradis\",\"Vere\",\"Verena\",\"Verene\",\"Veriee\",\"Verile\",\"Verina\",\"Verine\",\"Verla\",\"Verna\",\"Vernice\",\"Veronica\",\"Veronika\",\"Veronike\",\"Veronique\",\"Vevay\",\"Vi\",\"Vicki\",\"Vickie\",\"Vicky\",\"Victoria\",\"Vida\",\"Viki\",\"Vikki\",\"Vikky\",\"Vilhelmina\",\"Vilma\",\"Vin\",\"Vina\",\"Vinita\",\"Vinni\",\"Vinnie\",\"Vinny\",\"Viola\",\"Violante\",\"Viole\",\"Violet\",\"Violetta\",\"Violette\",\"Virgie\",\"Virgina\",\"Virginia\",\"Virginie\",\"Vita\",\"Vitia\",\"Vitoria\",\"Vittoria\",\"Viv\",\"Viva\",\"Vivi\",\"Vivia\",\"Vivian\",\"Viviana\",\"Vivianna\",\"Vivianne\",\"Vivie\",\"Vivien\",\"Viviene\",\"Vivienne\",\"Viviyan\",\"Vivyan\",\"Vivyanne\",\"Vonni\",\"Vonnie\",\"Vonny\",\"Vyky\",\"Wallie\",\"Wallis\",\"Walliw\",\"Wally\",\"Waly\",\"Wanda\",\"Wandie\",\"Wandis\",\"Waneta\",\"Wanids\",\"Wenda\",\"Wendeline\",\"Wendi\",\"Wendie\",\"Wendy\",\"Wendye\",\"Wenona\",\"Wenonah\",\"Whitney\",\"Wileen\",\"Wilhelmina\",\"Wilhelmine\",\"Wilie\",\"Willa\",\"Willabella\",\"Willamina\",\"Willetta\",\"Willette\",\"Willi\",\"Willie\",\"Willow\",\"Willy\",\"Willyt\",\"Wilma\",\"Wilmette\",\"Wilona\",\"Wilone\",\"Wilow\",\"Windy\",\"Wini\",\"Winifred\",\"Winna\",\"Winnah\",\"Winne\",\"Winni\",\"Winnie\",\"Winnifred\",\"Winny\",\"Winona\",\"Winonah\",\"Wren\",\"Wrennie\",\"Wylma\",\"Wynn\",\"Wynne\",\"Wynnie\",\"Wynny\",\"Xaviera\",\"Xena\",\"Xenia\",\"Xylia\",\"Xylina\",\"Yalonda\",\"Yasmeen\",\"Yasmin\",\"Yelena\",\"Yetta\",\"Yettie\",\"Yetty\",\"Yevette\",\"Ynes\",\"Ynez\",\"Yoko\",\"Yolanda\",\"Yolande\",\"Yolane\",\"Yolanthe\",\"Yoshi\",\"Yoshiko\",\"Yovonnda\",\"Ysabel\",\"Yvette\",\"Yvonne\",\"Zabrina\",\"Zahara\",\"Zandra\",\"Zaneta\",\"Zara\",\"Zarah\",\"Zaria\",\"Zarla\",\"Zea\",\"Zelda\",\"Zelma\",\"Zena\",\"Zenia\",\"Zia\",\"Zilvia\",\"Zita\",\"Zitella\",\"Zoe\",\"Zola\",\"Zonda\",\"Zondra\",\"Zonnya\",\"Zora\",\"Zorah\",\"Zorana\",\"Zorina\",\"Zorine\",\"Zsazsa\",\"Zulema\",\"Zuzana\"],y=[\"Ackbar\",\"Adi Gallia\",\"Anakin Skywalker\",\"Arvel Crynyd\",\"Ayla Secura\",\"Bail Prestor Organa\",\"Barriss Offee\",\"Ben Quadinaros\",\"Beru Whitesun lars\",\"Bib Fortuna\",\"Biggs Darklighter\",\"Boba Fett\",\"Bossk\",\"C-3PO\",\"Chewbacca\",\"Cliegg Lars\",\"Cordé\",\"Darth Maul\",\"Darth Vader\",\"Dexter Jettster\",\"Dooku\",\"Dormé\",\"Dud Bolt\",\"Eeth Koth\",\"Finis Valorum\",\"Gasgano\",\"Greedo\",\"Gregar Typho\",\"Grievous\",\"Han Solo\",\"IG-88\",\"Jabba Desilijic Tiure\",\"Jango Fett\",\"Jar Jar Binks\",\"Jek Tono Porkins\",\"Jocasta Nu\",\"Ki-Adi-Mundi\",\"Kit Fisto\",\"Lama Su\",\"Lando Calrissian\",\"Leia Organa\",\"Lobot\",\"Luke Skywalker\",\"Luminara Unduli\",\"Mace Windu\",\"Mas Amedda\",\"Mon Mothma\",\"Nien Nunb\",\"Nute Gunray\",\"Obi-Wan Kenobi\",\"Owen Lars\",\"Padmé Amidala\",\"Palpatine\",\"Plo Koon\",\"Poggle the Lesser\",\"Quarsh Panaka\",\"Qui-Gon Jinn\",\"R2-D2\",\"R4-P17\",\"R5-D4\",\"Ratts Tyerel\",\"Raymus Antilles\",\"Ric Olié\",\"Roos Tarpals\",\"Rugor Nass\",\"Saesee Tiin\",\"San Hill\",\"Sebulba\",\"Shaak Ti\",\"Shmi Skywalker\",\"Sly Moore\",\"Tarfful\",\"Taun We\",\"Tion Medon\",\"Wat Tambor\",\"Watto\",\"Wedge Antilles\",\"Wicket Systri Warrick\",\"Wilhuff Tarkin\",\"Yarael Poof\",\"Yoda\",\"Zam Wesell\"];class h{static generate(a={}){let e=a.min||1,i=a.max||999;if(a.length){const n=Math.pow(10,a.length);return e=n/10,i=n-1,[`${Math.floor(Math.random()*(i-e))+e}`]}return[`${Math.floor(Math.random()*(i-e))+e}`]}}\n//# sourceMappingURL=index.m.js.map\n\n\n//# sourceURL=webpack://dathor-helpers/./node_modules/unique-names-generator/dist/index.m.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./dist/ExampleApp/MyApp.js");
/******/ 	
/******/ })()
;