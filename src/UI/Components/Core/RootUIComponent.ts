import { IUIComponentPropertyBag } from "../../Interfaces/IUIComponentPropertyBag";
import { UIComponentBase } from "../../UIComponent";
import { RouterOutletComponent } from "./RouterOutletComponent";

const RootUIComponentTemplate = (component: RootUIComponent): string => /*html*/`
    <div class="app-container min-h-screen flex flex-col">
        <header class="bg-gray-800 text-white p-4 shadow-md">
            <nav class="container mx-auto flex justify-between items-center">
                <a href="#/" class="text-2xl font-bold hover:text-blue-300 transition-colors">My App</a>
                <div class="space-x-4">
                    <a href="#/" class="hover:text-blue-300 transition-colors">Home</a>
                    <a href="#/products/1" class="hover:text-blue-300 transition-colors">Products</a>
                    <a href="#/about" class="hover:text-blue-300 transition-colors">About</a>
                </div>
            </nav>
        </header>
        
        <main id="main-content" class="flex-grow container mx-auto p-4">
            </main>

        <footer class="bg-gray-800 text-white p-4 text-center mt-auto">
            &copy; ${new Date().getFullYear()} My Awesome App. All rights reserved.
        </footer>
    </div>
`;

export class RootUIComponent extends UIComponentBase {
    constructor(properties: IUIComponentPropertyBag<{}>) {
        super({
            ...properties,
            // Assign the template function to the 'template' property
            template: RootUIComponentTemplate
        });

        // Instantiate RouterOutletComponent and add it to child components.
        // The ID ('main-router-outlet') must match the outletSelector used by your Router.
        this.childComponents.push(new RouterOutletComponent({ id: 'main-router-outlet', outletId: 'main-content' }));
    }

    // You no longer need to override the 'render' method here unless you have
    // very specific rendering logic for RootUIComponent that can't be handled
    // by the template or the base class's _renderAndAppendChildren.
    // The UIComponentBase's render method will now:
    // 1. Get the HTML from RootUIComponentTemplate.
    // 2. Convert it to an HTMLElement.
    // 3. Call _renderAndAppendChildren, which will render the RouterOutletComponent
    //    and append it to the element generated by the template (the 'main-content' div in this case).
    // The Router then specifically targets the '#main-router-outlet' by its ID.
}